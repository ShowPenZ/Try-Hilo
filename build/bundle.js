!function(I){var Q={};function g(B){if(Q[B])return Q[B].exports;var F=Q[B]={i:B,l:!1,exports:{}};return I[B].call(F.exports,F,F.exports,g),F.l=!0,F.exports}g.m=I,g.c=Q,g.d=function(I,Q,B){g.o(I,Q)||Object.defineProperty(I,Q,{enumerable:!0,get:B})},g.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},g.t=function(I,Q){if(1&Q&&(I=g(I)),8&Q)return I;if(4&Q&&"object"==typeof I&&I&&I.__esModule)return I;var B=Object.create(null);if(g.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:I}),2&Q&&"string"!=typeof I)for(var F in I)g.d(B,F,function(Q){return I[Q]}.bind(null,F));return B},g.n=function(I){var Q=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(Q,"a",Q),Q},g.o=function(I,Q){return Object.prototype.hasOwnProperty.call(I,Q)},g.p="./",g(g.s=10)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\n\n/**\n * @language=en\n * Create Example Class:\n * <pre>\n * var Bird = Hilo.Class.create({\n *     Extends: Animal,\n *     Mixes: EventMixin,\n *     constructor: function(name){\n *         this.name = name;\n *     },\n *     fly: function(){\n *         console.log('I am flying');\n *     },\n *     Statics: {\n *         isBird: function(bird){\n *             return bird instanceof Bird;\n *         }\n *     }\n * });\n *\n * var swallow = new Bird('swallow');\n * swallow.fly();\n * Bird.isBird(swallow);\n * </pre>\n * @namespace Class Class is created to aid the developer.\n * @static\n * @module hilo/core/Class\n */\nvar Class = function () {\n\n    /**\n     * @language=en\n     * Create a class based on the parameters, properties and methods specified.\n     * @param {Object} properties Properties and methods to create the class.\n     * <ul>\n     * <li><b>Extends</b> - Designed to inherit the parent class.</li>\n     * <li><b>Mixes</b> - Specifies mixed member collection object.</li>\n     * <li><b>Statics</b> - Static property or method specified class.</li>\n     * <li><b>constructor</b> -  The constructor of specified class.</li>\n     * <li>Other members of the property or method to create the class.</li>\n     * </ul>\n     * @returns {Object} Create classes.\n     */\n    var create = function create(properties) {\n        properties = properties || {};\n        var clazz = properties.hasOwnProperty('constructor') ? properties.constructor : function () {};\n        implement.call(clazz, properties);\n        return clazz;\n    };\n\n    /**\n     * @language=en\n     * @private\n     */\n    var implement = function implement(properties) {\n        var proto = {},\n            key,\n            value;\n        for (key in properties) {\n            value = properties[key];\n            if (classMutators.hasOwnProperty(key)) {\n                classMutators[key].call(this, value);\n            } else {\n                proto[key] = value;\n            }\n        }\n\n        mix(this.prototype, proto);\n    };\n\n    var classMutators = /** @ignore */{\n        Extends: function Extends(parent) {\n            var existed = this.prototype,\n                proto = createProto(parent.prototype);\n            //inherit static properites\n            mix(this, parent);\n            //keep existed properties\n            mix(proto, existed);\n            //correct constructor\n            proto.constructor = this;\n            //prototype chaining\n            this.prototype = proto;\n            //shortcut to parent's prototype\n            this.superclass = parent.prototype;\n        },\n\n        Mixes: function Mixes(items) {\n            items instanceof Array || (items = [items]);\n            var proto = this.prototype,\n                item;\n\n            while (item = items.shift()) {\n                mix(proto, item.prototype || item);\n            }\n        },\n\n        Statics: function Statics(properties) {\n            mix(this, properties);\n        }\n    };\n\n    /**\n     * @language=en\n     * @private\n     */\n    var createProto = function () {\n        if (Object.__proto__) {\n            return function (proto) {\n                return { __proto__: proto };\n            };\n        } else {\n            var Ctor = function Ctor() {};\n            return function (proto) {\n                Ctor.prototype = proto;\n                return new Ctor();\n            };\n        }\n    }();\n\n    /**\n     * @language=en\n     * Mixed property or method.\n     * @param {Object} target Mixed audiences.\n     * @param {Object} source The source whose methods and properties are to be mixed. It can support multiple source parameters.\n     * @returns {Object} Mixed audiences.\n     */\n    var mix = function mix(target) {\n        for (var i = 1, len = arguments.length; i < len; i++) {\n            var source = arguments[i],\n                defineProps;\n            for (var key in source) {\n                var prop = source[key];\n                if (prop && (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {\n                    if (prop.value !== undefined || typeof prop.get === 'function' || typeof prop.set === 'function') {\n                        defineProps = defineProps || {};\n                        defineProps[key] = prop;\n                        continue;\n                    }\n                }\n                target[key] = prop;\n            }\n            if (defineProps) defineProperties(target, defineProps);\n        }\n\n        return target;\n    };\n\n    var defineProperty, defineProperties;\n    try {\n        defineProperty = Object.defineProperty;\n        defineProperties = Object.defineProperties;\n        defineProperty({}, '$', { value: 0 });\n    } catch (e) {\n        if ('__defineGetter__' in Object) {\n            defineProperty = function defineProperty(obj, prop, desc) {\n                if ('value' in desc) obj[prop] = desc.value;\n                if ('get' in desc) obj.__defineGetter__(prop, desc.get);\n                if ('set' in desc) obj.__defineSetter__(prop, desc.set);\n                return obj;\n            };\n            defineProperties = function defineProperties(obj, props) {\n                for (var prop in props) {\n                    if (props.hasOwnProperty(prop)) {\n                        defineProperty(obj, prop, props[prop]);\n                    }\n                }\n                return obj;\n            };\n        }\n    }\n\n    return { create: create, mix: mix };\n}();\n\nmodule.exports = Class;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar browser = __webpack_require__(3);\nvar util = __webpack_require__(2);\n\nvar win = window,\n    doc = document,\n    docElem = doc.documentElement,\n    uid = 0;\n\nvar hasWarnedDict = {};\n\n/**\n * @language=en\n * @namespace Hilo The underlying core set of methods.\n * @static\n * @module hilo/core/Hilo\n * @requires hilo/util/browser\n * @requires hilo/util/util\n */\nvar Hilo = {\n    /**\n     * Hilo version\n     * @type String\n     */\n    version: '1.1.10',\n    /**\n     * @language=en\n     * Gets a globally unique id. Such as Stage1, Bitmap2 etc.\n     * @param {String} prefix Generated id's prefix.\n     * @returns {String} Globally unique id.\n     */\n    getUid: function getUid(prefix) {\n        var id = ++uid;\n        if (prefix) {\n            var charCode = prefix.charCodeAt(prefix.length - 1);\n            if (charCode >= 48 && charCode <= 57) prefix += \"_\"; //0至9之间添加下划线\n            return prefix + id;\n        }\n        return id;\n    },\n\n    /**\n     * @language=en\n     * Generates a string representation that contains a path to the specified visual object. Such as Stage1.Container2.Bitmap3.\n     * @param {View} view Specified visual object.\n     * @returns {String} String representation of the visual object.\n     */\n    viewToString: function viewToString(view) {\n        var result,\n            obj = view;\n        while (obj) {\n            result = result ? obj.id + '.' + result : obj.id;\n            obj = obj.parent;\n        }\n        return result;\n    },\n\n    /**\n     * @language=en\n     * Simple shallow copy objects.\n     * @deprecated use Hilo.util.copy instead\n     * @param {Object} target Target object to copy to.\n     * @param {Object} source Source object to copy.\n     * @param {Boolean} strict Indicates whether replication is undefined property, default is false, i.e., undefined attributes are not copied.\n     * @returns {Object} Object after copying.\n     */\n    copy: function copy(target, source, strict) {\n        util.copy(target, source, strict);\n        if (!hasWarnedDict.copy) {\n            hasWarnedDict.copy = true;\n            console.warn('Hilo.copy has been Deprecated! Use Hilo.util.copy instead.');\n        }\n        return target;\n    },\n\n    /**\n     * @language=en\n     * Browser feature set includes:\n     * @see browser\n     */\n    browser: browser,\n\n    /**\n     * @language=en\n     * Event enumeration objects include:\n     * <ul>\n     * <li><b>POINTER_START</b> - Mouse or touch start event. Corresponds to touchstart or mousedown.</li>\n     * <li><b>POINTER_MOVE</b> - Mouse or touch move event. Corresponds to touchmove or mousemove.</li>\n     * <li><b>POINTER_END</b> - Mouse or touch end event. Corresponds to touchend or mouseup.</li>\n     * </ul>\n     */\n    event: {\n        POINTER_START: browser.POINTER_START,\n        POINTER_MOVE: browser.POINTER_MOVE,\n        POINTER_END: browser.POINTER_END\n    },\n\n    /**\n     * @language=en\n     * Visual object alinment enumeration objects include:\n     * <ul>\n     * <li><b>TOP_LEFT</b> - Align the top left corner.</li>\n     * <li><b>TOP</b> - Top center alignment.</li>\n     * <li><b>TOP_RIGHT</b> - Align the top right corner.</li>\n     * <li><b>LEFT</b> - Left center alignment.</li>\n     * <li><b>CENTER</b> - Align center.</li>\n     * <li><b>RIGHT</b> - Right center alignment.</li>\n     * <li><b>BOTTOM_LEFT</b> - Align the bottom left corner.</li>\n     * <li><b>BOTTOM</b> - Bottom center alignment.</li>\n     * <li><b>BOTTOM_RIGHT</b> - Align the bottom right corner.</li>\n     * </ul>\n     */\n    align: {\n        TOP_LEFT: 'TL', //top & left\n        TOP: 'T', //top & center\n        TOP_RIGHT: 'TR', //top & right\n        LEFT: 'L', //left & center\n        CENTER: 'C', //center\n        RIGHT: 'R', //right & center\n        BOTTOM_LEFT: 'BL', //bottom & left\n        BOTTOM: 'B', //bottom & center\n        BOTTOM_RIGHT: 'BR' //bottom & right\n    },\n\n    /**\n     * @language=en\n     * Get DOM element content in the page display area.\n     * @param {HTMLElement} elem DOM elements.\n     * @returns {Object} Viewable area DOM elements. Format is: {left:0, top:0, width:100, height:100}.\n     */\n    getElementRect: function getElementRect(elem) {\n        var bounds;\n        try {\n            //this fails if it's a disconnected DOM node\n            bounds = elem.getBoundingClientRect();\n        } catch (e) {\n            bounds = {\n                top: elem.offsetTop,\n                left: elem.offsetLeft,\n                right: elem.offsetLeft + elem.offsetWidth,\n                bottom: elem.offsetTop + elem.offsetHeight\n            };\n        }\n\n        var offsetX = (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0) || 0;\n        var offsetY = (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0) || 0;\n        var styles = win.getComputedStyle ? getComputedStyle(elem) : elem.currentStyle;\n        var parseIntFn = parseInt;\n\n        var padLeft = parseIntFn(styles.paddingLeft) + parseIntFn(styles.borderLeftWidth) || 0;\n        var padTop = parseIntFn(styles.paddingTop) + parseIntFn(styles.borderTopWidth) || 0;\n        var padRight = parseIntFn(styles.paddingRight) + parseIntFn(styles.borderRightWidth) || 0;\n        var padBottom = parseIntFn(styles.paddingBottom) + parseIntFn(styles.borderBottomWidth) || 0;\n\n        var top = bounds.top || 0;\n        var left = bounds.left || 0;\n        var right = bounds.right || 0;\n        var bottom = bounds.bottom || 0;\n\n        return {\n            left: left + offsetX + padLeft,\n            top: top + offsetY + padTop,\n            width: right - padRight - left - padLeft,\n            height: bottom - padBottom - top - padTop\n        };\n    },\n\n    /**\n     * @language=en\n     * Create a DOM element. You can specify properties and styles.\n     * @param {String} type DOM element type to be created. Such as: 'div'.\n     * @param {Object} properties Properties and styles for DOM element.\n     * @returns {HTMLElement} A DOM element.\n     */\n    createElement: function createElement(type, properties) {\n        var elem = doc.createElement(type),\n            p,\n            val,\n            s;\n        for (p in properties) {\n            val = properties[p];\n            if (p === 'style') {\n                for (s in val) {\n                    elem.style[s] = val[s];\n                }\n            } else {\n                elem[p] = val;\n            }\n        }\n        return elem;\n    },\n\n    /**\n     * @language=en\n     * Gets a DOM element according to the parameter id. This method is equivalent to document.getElementById(id).\n     * @param {String} id id of the DOM element you want to get.\n     * @returns {HTMLElement} A DOM element.\n     */\n    getElement: function getElement(id) {\n        return doc.getElementById(id);\n    },\n\n    /**\n     * @language=en\n     * Set visual object DOM element CSS style.\n     * @param {View} obj Specifies the CSS style to set the visual object.\n     * @private\n     */\n    setElementStyleByView: function setElementStyleByView(obj) {\n        var drawable = obj.drawable,\n            style = drawable.domElement.style,\n            stateCache = obj._stateCache || (obj._stateCache = {}),\n            prefix = Hilo.browser.jsVendor,\n            px = 'px',\n            flag = false;\n\n        if (this.cacheStateIfChanged(obj, ['visible'], stateCache)) {\n            style.display = !obj.visible ? 'none' : '';\n        }\n        if (this.cacheStateIfChanged(obj, ['alpha'], stateCache)) {\n            style.opacity = obj.alpha;\n        }\n        if (!obj.visible || obj.alpha <= 0) return;\n\n        if (this.cacheStateIfChanged(obj, ['width'], stateCache)) {\n            style.width = obj.width + px;\n        }\n        if (this.cacheStateIfChanged(obj, ['height'], stateCache)) {\n            style.height = obj.height + px;\n        }\n        if (this.cacheStateIfChanged(obj, ['depth'], stateCache)) {\n            style.zIndex = obj.depth + 1;\n        }\n        if (flag = this.cacheStateIfChanged(obj, ['pivotX', 'pivotY'], stateCache)) {\n            style[prefix + 'TransformOrigin'] = obj.pivotX + px + ' ' + obj.pivotY + px;\n        }\n        if (this.cacheStateIfChanged(obj, ['x', 'y', 'rotation', 'scaleX', 'scaleY'], stateCache) || flag) {\n            style[prefix + 'Transform'] = this.getTransformCSS(obj);\n        }\n        if (this.cacheStateIfChanged(obj, ['background'], stateCache)) {\n            style.backgroundColor = obj.background;\n        }\n        if (!style.pointerEvents) {\n            style.pointerEvents = 'none';\n        }\n\n        //render image as background\n        var image = drawable.image;\n        if (image) {\n            var src = image.src;\n            if (src !== stateCache.image) {\n                stateCache.image = src;\n                style.backgroundImage = 'url(' + src + ')';\n            }\n\n            var rect = drawable.rect;\n            if (rect) {\n                var sx = rect[0],\n                    sy = rect[1];\n                if (sx !== stateCache.sx) {\n                    stateCache.sx = sx;\n                    style.backgroundPositionX = -sx + px;\n                }\n                if (sy !== stateCache.sy) {\n                    stateCache.sy = sy;\n                    style.backgroundPositionY = -sy + px;\n                }\n            }\n        }\n\n        //render mask\n        var mask = obj.mask;\n        if (mask) {\n            var maskImage = mask.drawable.domElement.style.backgroundImage;\n            if (maskImage !== stateCache.maskImage) {\n                stateCache.maskImage = maskImage;\n                style[prefix + 'MaskImage'] = maskImage;\n                style[prefix + 'MaskRepeat'] = 'no-repeat';\n            }\n\n            var maskX = mask.x,\n                maskY = mask.y;\n            if (maskX !== stateCache.maskX || maskY !== stateCache.maskY) {\n                stateCache.maskX = maskX;\n                stateCache.maskY = maskY;\n                style[prefix + 'MaskPosition'] = maskX + px + ' ' + maskY + px;\n            }\n        }\n    },\n\n    /**\n     * @private\n     */\n    cacheStateIfChanged: function cacheStateIfChanged(obj, propNames, stateCache) {\n        var i,\n            len,\n            name,\n            value,\n            changed = false;\n        for (i = 0, len = propNames.length; i < len; i++) {\n            name = propNames[i];\n            value = obj[name];\n            if (value != stateCache[name]) {\n                stateCache[name] = value;\n                changed = true;\n            }\n        }\n        return changed;\n    },\n\n    /**\n     * @language=en\n     * Generated visual object CSS style transformation.\n     * @param {View} obj Specifies visual object whose CSS style must be got.\n     * @returns {String} String representation of the CSS style.\n     */\n    getTransformCSS: function getTransformCSS(obj) {\n        var use3d = this.browser.supportTransform3D,\n            str3d = use3d ? '3d' : '';\n\n        return 'translate' + str3d + '(' + (obj.x - obj.pivotX) + 'px, ' + (obj.y - obj.pivotY) + (use3d ? 'px, 0px)' : 'px)') + 'rotate' + str3d + (use3d ? '(0, 0, 1, ' : '(') + obj.rotation + 'deg)' + 'scale' + str3d + '(' + obj.scaleX + ', ' + obj.scaleY + (use3d ? ', 1)' : ')');\n    }\n};\n\nmodule.exports = Hilo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\n\n/**\n * @language=en\n * @class util method set\n * @static\n * @module hilo/util/util\n */\nvar util = {\n    /**\n     * @language=en\n     * Simple shallow copy objects.\n     * @param {Object} target Target object to copy to.\n     * @param {Object} source Source object to copy.\n     * @param {Boolean} strict Indicates whether replication is undefined property, default is false, i.e., undefined attributes are not copied.\n     * @returns {Object} Object after copying.\n     */\n    copy: function copy(target, source, strict) {\n        for (var key in source) {\n            if (!strict || target.hasOwnProperty(key) || target[key] !== undefined) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n};\n\nmodule.exports = util;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby91dGlsL3V0aWwuanM/N2ZjYyJdLCJuYW1lcyI6WyJ1dGlsIiwiY29weSIsInRhcmdldCIsInNvdXJjZSIsInN0cmljdCIsImtleSIsImhhc093blByb3BlcnR5IiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBT0E7Ozs7OztBQU1BLElBQUlBLE9BQU87QUFDUDs7Ozs7Ozs7QUFRQUMsVUFBTSxjQUFTQyxNQUFULEVBQWlCQyxNQUFqQixFQUF5QkMsTUFBekIsRUFBZ0M7QUFDbEMsYUFBSSxJQUFJQyxHQUFSLElBQWVGLE1BQWYsRUFBc0I7QUFDbEIsZ0JBQUcsQ0FBQ0MsTUFBRCxJQUFXRixPQUFPSSxjQUFQLENBQXNCRCxHQUF0QixDQUFYLElBQXlDSCxPQUFPRyxHQUFQLE1BQWdCRSxTQUE1RCxFQUFzRTtBQUNsRUwsdUJBQU9HLEdBQVAsSUFBY0YsT0FBT0UsR0FBUCxDQUFkO0FBQ0g7QUFDSjtBQUNELGVBQU9ILE1BQVA7QUFDSDtBQWhCTSxDQUFYOztBQW1CQU0sT0FBT0MsT0FBUCxHQUFpQlQsSUFBakIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGlsbyAxLjEuMTAgZm9yIGNvbW1vbmpzXG4gKiBDb3B5cmlnaHQgMjAxNiBhbGliYWJhLmNvbVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cblxuXG4vKipcbiAqIEBsYW5ndWFnZT1lblxuICogQGNsYXNzIHV0aWwgbWV0aG9kIHNldFxuICogQHN0YXRpY1xuICogQG1vZHVsZSBoaWxvL3V0aWwvdXRpbFxuICovXG52YXIgdXRpbCA9IHtcbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBTaW1wbGUgc2hhbGxvdyBjb3B5IG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUYXJnZXQgb2JqZWN0IHRvIGNvcHkgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBTb3VyY2Ugb2JqZWN0IHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBzdHJpY3QgSW5kaWNhdGVzIHdoZXRoZXIgcmVwbGljYXRpb24gaXMgdW5kZWZpbmVkIHByb3BlcnR5LCBkZWZhdWx0IGlzIGZhbHNlLCBpLmUuLCB1bmRlZmluZWQgYXR0cmlidXRlcyBhcmUgbm90IGNvcGllZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBPYmplY3QgYWZ0ZXIgY29weWluZy5cbiAgICAgKi9cbiAgICBjb3B5OiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSwgc3RyaWN0KXtcbiAgICAgICAgZm9yKHZhciBrZXkgaW4gc291cmNlKXtcbiAgICAgICAgICAgIGlmKCFzdHJpY3QgfHwgdGFyZ2V0Lmhhc093blByb3BlcnR5KGtleSkgfHwgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdXRpbDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\n\n/**\n * @language=en\n * @class Browser feature set\n * @static\n * @module hilo/util/browser\n */\nvar browser = function () {\n  var ua = navigator.userAgent;\n  var doc = document;\n  var win = window;\n  var docElem = doc.documentElement;\n\n  var data = /** @lends browser */{\n    /**\n     * 是否是iphone\n     * @type {Boolean}\n     */\n    iphone: /iphone/i.test(ua),\n\n    /**\n     * 是否是ipad\n     * @type {Boolean}\n     */\n    ipad: /ipad/i.test(ua),\n\n    /**\n     * 是否是ipod\n     * @type {Boolean}\n     */\n    ipod: /ipod/i.test(ua),\n\n    /**\n     * 是否是ios\n     * @type {Boolean}\n     */\n    ios: /iphone|ipad|ipod/i.test(ua),\n\n    /**\n     * 是否是android\n     * @type {Boolean}\n     */\n    android: /android/i.test(ua),\n\n    /**\n     * 是否是webkit\n     * @type {Boolean}\n     */\n    webkit: /webkit/i.test(ua),\n\n    /**\n     * 是否是chrome\n     * @type {Boolean}\n     */\n    chrome: /chrome/i.test(ua),\n\n    /**\n     * 是否是safari\n     * @type {Boolean}\n     */\n    safari: /safari/i.test(ua),\n\n    /**\n     * 是否是firefox\n     * @type {Boolean}\n     */\n    firefox: /firefox/i.test(ua),\n\n    /**\n     * 是否是ie\n     * @type {Boolean}\n     */\n    ie: /msie/i.test(ua),\n\n    /**\n     * 是否是opera\n     * @type {Boolean}\n     */\n    opera: /opera/i.test(ua),\n    /**\n     * 是否支持触碰事件。\n     * @type {String}\n     */\n    supportTouch: 'ontouchstart' in win,\n\n    /**\n     * 是否支持canvas元素。\n     * @type {Boolean}\n     */\n    supportCanvas: doc.createElement('canvas').getContext != null,\n    /**\n     * 是否支持本地存储localStorage。\n     * @type {Boolean}\n     */\n    supportStorage: false,\n\n    /**\n     * 是否支持检测设备方向orientation。\n     * @type {Boolean}\n     */\n    supportOrientation: 'orientation' in win || 'orientation' in win.screen,\n\n    /**\n     * 是否支持检测加速度devicemotion。\n     * @type {Boolean}\n     */\n    supportDeviceMotion: 'ondevicemotion' in win\n  };\n\n  //`localStorage` is null or `localStorage.setItem` throws error in some cases (e.g. localStorage is disabled)\n  try {\n    var value = 'hilo';\n    localStorage.setItem(value, value);\n    localStorage.removeItem(value);\n    data.supportStorage = true;\n  } catch (e) {}\n\n  /**\n   * 浏览器厂商CSS前缀的js值。比如：webkit。\n   * @type {String}\n   */\n  var jsVendor = data.jsVendor = data.webkit ? 'webkit' : data.firefox ? 'webkit' : data.opera ? 'o' : data.ie ? 'ms' : '';\n  /**\n   * 浏览器厂商CSS前缀的css值。比如：-webkit-。\n   * @type {String}\n   */\n  var cssVendor = data.cssVendor = '-' + jsVendor + '-';\n\n  //css transform/3d feature dectection\n  var testElem = doc.createElement('div'),\n      style = testElem.style;\n  /**\n   * 是否支持CSS Transform变换。\n   * @type {Boolean}\n   */\n  var supportTransform = style[jsVendor + 'Transform'] != undefined;\n\n  /**\n   * 是否支持CSS Transform 3D变换。\n   * @type {Boolean}\n   */\n  var supportTransform3D = style[jsVendor + 'Perspective'] != undefined;\n  if (supportTransform3D) {\n    testElem.id = 'test3d';\n    style = doc.createElement('style');\n    style.textContent = '@media (' + cssVendor + 'transform-3d){#test3d{height:3px}}';\n    doc.head.appendChild(style);\n\n    docElem.appendChild(testElem);\n    supportTransform3D = testElem.offsetHeight == 3;\n    doc.head.removeChild(style);\n    docElem.removeChild(testElem);\n  }\n  data.supportTransform = supportTransform;\n  data.supportTransform3D = supportTransform3D;\n\n  var supportTouch = data.supportTouch;\n\n  /**\n   * 鼠标或触碰开始事件。对应touchstart或mousedown。\n   * @type {String}\n   */\n  var POINTER_START = supportTouch ? 'touchstart' : 'mousedown';\n\n  /**\n   * 鼠标或触碰移动事件。对应touchmove或mousemove。\n   * @type {String}\n   */\n  var POINTER_MOVE = supportTouch ? 'touchmove' : 'mousemove';\n\n  /**\n   * 鼠标或触碰结束事件。对应touchend或mouseup。\n   * @type {String}\n   */\n  var POINTER_END = supportTouch ? 'touchend' : 'mouseup';\n\n  data.POINTER_START = POINTER_START;\n  data.POINTER_MOVE = POINTER_MOVE;\n  data.POINTER_END = POINTER_END;\n\n  return data;\n}();\n\nmodule.exports = browser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\n\n/**\n * @language=en\n * @class EventMixin is a mixin on event related functions. Use Class.mix(target, EventMixin) to add event function onto target.\n * @static\n * @mixin\n * @module hilo/event/EventMixin\n * @requires hilo/core/Class\n */\nvar EventMixin = /** @lends EventMixin# */{\n    _listeners: null,\n\n    /**\n     * @language=en\n     * Add an event listenser.\n     * @param {String} type Event type to listen.\n     * @param {Function} listener Callback function of event listening.\n     * @param {Boolean} once Listen on event only once and no more response after the first response?\n     * @returns {Object} The Event itself. Functions chain call supported.\n     */\n    on: function on(type, listener, once) {\n        var listeners = this._listeners = this._listeners || {};\n        var eventListeners = listeners[type] = listeners[type] || [];\n        for (var i = 0, len = eventListeners.length; i < len; i++) {\n            var el = eventListeners[i];\n            if (el.listener === listener) return;\n        }\n        eventListeners.push({ listener: listener, once: once });\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Remove one event listener. Remove all event listeners if no parameter provided, and remove all event listeners on one type which is provided as the only parameter.\n     * @param {String} type The type of event listener that want to remove.\n     * @param {Function} listener Event listener callback function to be removed.\n     * @returns {Object} The Event itself. Functions chain call supported.\n     */\n    off: function off(type, listener) {\n        //remove all event listeners\n        if (arguments.length == 0) {\n            this._listeners = null;\n            return this;\n        }\n\n        var eventListeners = this._listeners && this._listeners[type];\n        if (eventListeners) {\n            //remove event listeners by specified type\n            if (arguments.length == 1) {\n                delete this._listeners[type];\n                return this;\n            }\n\n            for (var i = 0, len = eventListeners.length; i < len; i++) {\n                var el = eventListeners[i];\n                if (el.listener === listener) {\n                    eventListeners.splice(i, 1);\n                    if (eventListeners.length === 0) delete this._listeners[type];\n                    break;\n                }\n            }\n        }\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Send events. If the first parameter is an Object, take it  as an Event Object.\n     * @param {String} type Event type to send.\n     * @param {Object} detail The detail (parameters go with the event) of Event to send.\n     * @returns {Boolean} Whether Event call successfully.\n     */\n    fire: function fire(type, detail) {\n        var event, eventType;\n        if (typeof type === 'string') {\n            eventType = type;\n        } else {\n            event = type;\n            eventType = type.type;\n        }\n\n        var listeners = this._listeners;\n        if (!listeners) return false;\n\n        var eventListeners = listeners[eventType];\n        if (eventListeners) {\n            var eventListenersCopy = eventListeners.slice(0);\n            event = event || new EventObject(eventType, this, detail);\n            if (event._stopped) return false;\n\n            for (var i = 0; i < eventListenersCopy.length; i++) {\n                var el = eventListenersCopy[i];\n                el.listener.call(this, event);\n                if (el.once) {\n                    var index = eventListeners.indexOf(el);\n                    if (index > -1) {\n                        eventListeners.splice(index, 1);\n                    }\n                }\n            }\n\n            if (eventListeners.length == 0) delete listeners[eventType];\n            return true;\n        }\n        return false;\n    }\n};\n\n/**\n * @language=en\n * Event Object class. It's an private class now, but maybe will become a public class if needed.\n */\nvar EventObject = Class.create({\n    constructor: function EventObject(type, target, detail) {\n        this.type = type;\n        this.target = target;\n        this.detail = detail;\n        this.timeStamp = +new Date();\n    },\n\n    type: null,\n    target: null,\n    detail: null,\n    timeStamp: 0,\n\n    stopImmediatePropagation: function stopImmediatePropagation() {\n        this._stopped = true;\n    }\n});\n\n//Trick: `stopImmediatePropagation` compatibility\nvar RawEvent = window.Event;\nif (RawEvent) {\n    var proto = RawEvent.prototype,\n        stop = proto.stopImmediatePropagation;\n    proto.stopImmediatePropagation = function () {\n        stop && stop.call(this);\n        this._stopped = true;\n    };\n}\n\nmodule.exports = EventMixin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby9ldmVudC9FdmVudE1peGluLmpzPzI2NDIiXSwibmFtZXMiOlsiQ2xhc3MiLCJyZXF1aXJlIiwiRXZlbnRNaXhpbiIsIl9saXN0ZW5lcnMiLCJvbiIsInR5cGUiLCJsaXN0ZW5lciIsIm9uY2UiLCJsaXN0ZW5lcnMiLCJldmVudExpc3RlbmVycyIsImkiLCJsZW4iLCJsZW5ndGgiLCJlbCIsInB1c2giLCJvZmYiLCJhcmd1bWVudHMiLCJzcGxpY2UiLCJmaXJlIiwiZGV0YWlsIiwiZXZlbnQiLCJldmVudFR5cGUiLCJldmVudExpc3RlbmVyc0NvcHkiLCJzbGljZSIsIkV2ZW50T2JqZWN0IiwiX3N0b3BwZWQiLCJjYWxsIiwiaW5kZXgiLCJpbmRleE9mIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ0YXJnZXQiLCJ0aW1lU3RhbXAiLCJEYXRlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiUmF3RXZlbnQiLCJ3aW5kb3ciLCJFdmVudCIsInByb3RvIiwicHJvdG90eXBlIiwic3RvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7O0FBS0EsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUMsQ0FBUixDQUFaOztBQUlBOzs7Ozs7OztBQVFBLElBQUlDLGFBQWEseUJBQXlCO0FBQ3RDQyxnQkFBWSxJQUQwQjs7QUFHdEM7Ozs7Ozs7O0FBUUFDLFFBQUksWUFBU0MsSUFBVCxFQUFlQyxRQUFmLEVBQXlCQyxJQUF6QixFQUE4QjtBQUM5QixZQUFJQyxZQUFhLEtBQUtMLFVBQUwsR0FBa0IsS0FBS0EsVUFBTCxJQUFtQixFQUF0RDtBQUNBLFlBQUlNLGlCQUFrQkQsVUFBVUgsSUFBVixJQUFrQkcsVUFBVUgsSUFBVixLQUFtQixFQUEzRDtBQUNBLGFBQUksSUFBSUssSUFBSSxDQUFSLEVBQVdDLE1BQU1GLGVBQWVHLE1BQXBDLEVBQTRDRixJQUFJQyxHQUFoRCxFQUFxREQsR0FBckQsRUFBeUQ7QUFDckQsZ0JBQUlHLEtBQUtKLGVBQWVDLENBQWYsQ0FBVDtBQUNBLGdCQUFHRyxHQUFHUCxRQUFILEtBQWdCQSxRQUFuQixFQUE2QjtBQUNoQztBQUNERyx1QkFBZUssSUFBZixDQUFvQixFQUFDUixVQUFTQSxRQUFWLEVBQW9CQyxNQUFLQSxJQUF6QixFQUFwQjtBQUNBLGVBQU8sSUFBUDtBQUNILEtBcEJxQzs7QUFzQnRDOzs7Ozs7O0FBT0FRLFNBQUssYUFBU1YsSUFBVCxFQUFlQyxRQUFmLEVBQXdCO0FBQ3pCO0FBQ0EsWUFBR1UsVUFBVUosTUFBVixJQUFvQixDQUF2QixFQUF5QjtBQUNyQixpQkFBS1QsVUFBTCxHQUFrQixJQUFsQjtBQUNBLG1CQUFPLElBQVA7QUFDSDs7QUFFRCxZQUFJTSxpQkFBaUIsS0FBS04sVUFBTCxJQUFtQixLQUFLQSxVQUFMLENBQWdCRSxJQUFoQixDQUF4QztBQUNBLFlBQUdJLGNBQUgsRUFBa0I7QUFDZDtBQUNBLGdCQUFHTyxVQUFVSixNQUFWLElBQW9CLENBQXZCLEVBQXlCO0FBQ3JCLHVCQUFPLEtBQUtULFVBQUwsQ0FBZ0JFLElBQWhCLENBQVA7QUFDQSx1QkFBTyxJQUFQO0FBQ0g7O0FBRUQsaUJBQUksSUFBSUssSUFBSSxDQUFSLEVBQVdDLE1BQU1GLGVBQWVHLE1BQXBDLEVBQTRDRixJQUFJQyxHQUFoRCxFQUFxREQsR0FBckQsRUFBeUQ7QUFDckQsb0JBQUlHLEtBQUtKLGVBQWVDLENBQWYsQ0FBVDtBQUNBLG9CQUFHRyxHQUFHUCxRQUFILEtBQWdCQSxRQUFuQixFQUE0QjtBQUN4QkcsbUNBQWVRLE1BQWYsQ0FBc0JQLENBQXRCLEVBQXlCLENBQXpCO0FBQ0Esd0JBQUdELGVBQWVHLE1BQWYsS0FBMEIsQ0FBN0IsRUFBZ0MsT0FBTyxLQUFLVCxVQUFMLENBQWdCRSxJQUFoQixDQUFQO0FBQ2hDO0FBQ0g7QUFDSjtBQUNKO0FBQ0QsZUFBTyxJQUFQO0FBQ0gsS0F0RHFDOztBQXdEdEM7Ozs7Ozs7QUFPQWEsVUFBTSxjQUFTYixJQUFULEVBQWVjLE1BQWYsRUFBc0I7QUFDeEIsWUFBSUMsS0FBSixFQUFXQyxTQUFYO0FBQ0EsWUFBRyxPQUFPaEIsSUFBUCxLQUFnQixRQUFuQixFQUE0QjtBQUN4QmdCLHdCQUFZaEIsSUFBWjtBQUNILFNBRkQsTUFFSztBQUNEZSxvQkFBUWYsSUFBUjtBQUNBZ0Isd0JBQVloQixLQUFLQSxJQUFqQjtBQUNIOztBQUVELFlBQUlHLFlBQVksS0FBS0wsVUFBckI7QUFDQSxZQUFHLENBQUNLLFNBQUosRUFBZSxPQUFPLEtBQVA7O0FBRWYsWUFBSUMsaUJBQWlCRCxVQUFVYSxTQUFWLENBQXJCO0FBQ0EsWUFBR1osY0FBSCxFQUFrQjtBQUNkLGdCQUFJYSxxQkFBcUJiLGVBQWVjLEtBQWYsQ0FBcUIsQ0FBckIsQ0FBekI7QUFDQUgsb0JBQVFBLFNBQVMsSUFBSUksV0FBSixDQUFnQkgsU0FBaEIsRUFBMkIsSUFBM0IsRUFBaUNGLE1BQWpDLENBQWpCO0FBQ0EsZ0JBQUdDLE1BQU1LLFFBQVQsRUFBbUIsT0FBTyxLQUFQOztBQUVuQixpQkFBSSxJQUFJZixJQUFJLENBQVosRUFBZUEsSUFBSVksbUJBQW1CVixNQUF0QyxFQUE4Q0YsR0FBOUMsRUFBa0Q7QUFDOUMsb0JBQUlHLEtBQUtTLG1CQUFtQlosQ0FBbkIsQ0FBVDtBQUNBRyxtQkFBR1AsUUFBSCxDQUFZb0IsSUFBWixDQUFpQixJQUFqQixFQUF1Qk4sS0FBdkI7QUFDQSxvQkFBR1AsR0FBR04sSUFBTixFQUFZO0FBQ1Isd0JBQUlvQixRQUFRbEIsZUFBZW1CLE9BQWYsQ0FBdUJmLEVBQXZCLENBQVo7QUFDQSx3QkFBR2MsUUFBUSxDQUFDLENBQVosRUFBYztBQUNWbEIsdUNBQWVRLE1BQWYsQ0FBc0JVLEtBQXRCLEVBQTZCLENBQTdCO0FBQ0g7QUFDSjtBQUNKOztBQUVELGdCQUFHbEIsZUFBZUcsTUFBZixJQUF5QixDQUE1QixFQUErQixPQUFPSixVQUFVYSxTQUFWLENBQVA7QUFDL0IsbUJBQU8sSUFBUDtBQUNIO0FBQ0QsZUFBTyxLQUFQO0FBQ0g7QUFoR3FDLENBQTFDOztBQW1HQTs7OztBQUlBLElBQUlHLGNBQWN4QixNQUFNNkIsTUFBTixDQUFhO0FBQzNCQyxpQkFBYSxTQUFTTixXQUFULENBQXFCbkIsSUFBckIsRUFBMkIwQixNQUEzQixFQUFtQ1osTUFBbkMsRUFBMEM7QUFDbkQsYUFBS2QsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsYUFBSzBCLE1BQUwsR0FBY0EsTUFBZDtBQUNBLGFBQUtaLE1BQUwsR0FBY0EsTUFBZDtBQUNBLGFBQUthLFNBQUwsR0FBaUIsQ0FBQyxJQUFJQyxJQUFKLEVBQWxCO0FBQ0gsS0FOMEI7O0FBUTNCNUIsVUFBTSxJQVJxQjtBQVMzQjBCLFlBQVEsSUFUbUI7QUFVM0JaLFlBQVEsSUFWbUI7QUFXM0JhLGVBQVcsQ0FYZ0I7O0FBYTNCRSw4QkFBMEIsb0NBQVU7QUFDaEMsYUFBS1QsUUFBTCxHQUFnQixJQUFoQjtBQUNIO0FBZjBCLENBQWIsQ0FBbEI7O0FBa0JBO0FBQ0EsSUFBSVUsV0FBV0MsT0FBT0MsS0FBdEI7QUFDQSxJQUFHRixRQUFILEVBQVk7QUFDUixRQUFJRyxRQUFRSCxTQUFTSSxTQUFyQjtBQUFBLFFBQ0lDLE9BQU9GLE1BQU1KLHdCQURqQjtBQUVBSSxVQUFNSix3QkFBTixHQUFpQyxZQUFVO0FBQ3ZDTSxnQkFBUUEsS0FBS2QsSUFBTCxDQUFVLElBQVYsQ0FBUjtBQUNBLGFBQUtELFFBQUwsR0FBZ0IsSUFBaEI7QUFDSCxLQUhEO0FBSUg7O0FBR0RnQixPQUFPQyxPQUFQLEdBQWlCeEMsVUFBakIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGlsbyAxLjEuMTAgZm9yIGNvbW1vbmpzXG4gKiBDb3B5cmlnaHQgMjAxNiBhbGliYWJhLmNvbVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbnZhciBDbGFzcyA9IHJlcXVpcmUoJy4uL2NvcmUvQ2xhc3MnKTtcblxuXG5cbi8qKlxuICogQGxhbmd1YWdlPWVuXG4gKiBAY2xhc3MgRXZlbnRNaXhpbiBpcyBhIG1peGluIG9uIGV2ZW50IHJlbGF0ZWQgZnVuY3Rpb25zLiBVc2UgQ2xhc3MubWl4KHRhcmdldCwgRXZlbnRNaXhpbikgdG8gYWRkIGV2ZW50IGZ1bmN0aW9uIG9udG8gdGFyZ2V0LlxuICogQHN0YXRpY1xuICogQG1peGluXG4gKiBAbW9kdWxlIGhpbG8vZXZlbnQvRXZlbnRNaXhpblxuICogQHJlcXVpcmVzIGhpbG8vY29yZS9DbGFzc1xuICovXG52YXIgRXZlbnRNaXhpbiA9IC8qKiBAbGVuZHMgRXZlbnRNaXhpbiMgKi97XG4gICAgX2xpc3RlbmVyczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEBsYW5ndWFnZT1lblxuICAgICAqIEFkZCBhbiBldmVudCBsaXN0ZW5zZXIuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgRXZlbnQgdHlwZSB0byBsaXN0ZW4uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQ2FsbGJhY2sgZnVuY3Rpb24gb2YgZXZlbnQgbGlzdGVuaW5nLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBMaXN0ZW4gb24gZXZlbnQgb25seSBvbmNlIGFuZCBubyBtb3JlIHJlc3BvbnNlIGFmdGVyIHRoZSBmaXJzdCByZXNwb25zZT9cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgRXZlbnQgaXRzZWxmLiBGdW5jdGlvbnMgY2hhaW4gY2FsbCBzdXBwb3J0ZWQuXG4gICAgICovXG4gICAgb246IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCBvbmNlKXtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9ICh0aGlzLl9saXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMgfHwge30pO1xuICAgICAgICB2YXIgZXZlbnRMaXN0ZW5lcnMgPSAobGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXJzW3R5cGVdIHx8IFtdKTtcbiAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gZXZlbnRMaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICAgICAgdmFyIGVsID0gZXZlbnRMaXN0ZW5lcnNbaV07XG4gICAgICAgICAgICBpZihlbC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudExpc3RlbmVycy5wdXNoKHtsaXN0ZW5lcjpsaXN0ZW5lciwgb25jZTpvbmNlfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBSZW1vdmUgb25lIGV2ZW50IGxpc3RlbmVyLiBSZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVycyBpZiBubyBwYXJhbWV0ZXIgcHJvdmlkZWQsIGFuZCByZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVycyBvbiBvbmUgdHlwZSB3aGljaCBpcyBwcm92aWRlZCBhcyB0aGUgb25seSBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgbGlzdGVuZXIgdGhhdCB3YW50IHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBFdmVudCBsaXN0ZW5lciBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSByZW1vdmVkLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBFdmVudCBpdHNlbGYuIEZ1bmN0aW9ucyBjaGFpbiBjYWxsIHN1cHBvcnRlZC5cbiAgICAgKi9cbiAgICBvZmY6IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKXtcbiAgICAgICAgLy9yZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICBpZihhcmd1bWVudHMubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV2ZW50TGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzICYmIHRoaXMuX2xpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgaWYoZXZlbnRMaXN0ZW5lcnMpe1xuICAgICAgICAgICAgLy9yZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGJ5IHNwZWNpZmllZCB0eXBlXG4gICAgICAgICAgICBpZihhcmd1bWVudHMubGVuZ3RoID09IDEpe1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IGV2ZW50TGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBldmVudExpc3RlbmVyc1tpXTtcbiAgICAgICAgICAgICAgICBpZihlbC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpe1xuICAgICAgICAgICAgICAgICAgICBldmVudExpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBTZW5kIGV2ZW50cy4gSWYgdGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhbiBPYmplY3QsIHRha2UgaXQgIGFzIGFuIEV2ZW50IE9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBFdmVudCB0eXBlIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRldGFpbCBUaGUgZGV0YWlsIChwYXJhbWV0ZXJzIGdvIHdpdGggdGhlIGV2ZW50KSBvZiBFdmVudCB0byBzZW5kLlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIEV2ZW50IGNhbGwgc3VjY2Vzc2Z1bGx5LlxuICAgICAqL1xuICAgIGZpcmU6IGZ1bmN0aW9uKHR5cGUsIGRldGFpbCl7XG4gICAgICAgIHZhciBldmVudCwgZXZlbnRUeXBlO1xuICAgICAgICBpZih0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpe1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gdHlwZTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBldmVudCA9IHR5cGU7XG4gICAgICAgICAgICBldmVudFR5cGUgPSB0eXBlLnR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICBpZighbGlzdGVuZXJzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFyIGV2ZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gICAgICAgIGlmKGV2ZW50TGlzdGVuZXJzKXtcbiAgICAgICAgICAgIHZhciBldmVudExpc3RlbmVyc0NvcHkgPSBldmVudExpc3RlbmVycy5zbGljZSgwKTtcbiAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQgfHwgbmV3IEV2ZW50T2JqZWN0KGV2ZW50VHlwZSwgdGhpcywgZGV0YWlsKTtcbiAgICAgICAgICAgIGlmKGV2ZW50Ll9zdG9wcGVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBldmVudExpc3RlbmVyc0NvcHkubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IGV2ZW50TGlzdGVuZXJzQ29weVtpXTtcbiAgICAgICAgICAgICAgICBlbC5saXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICBpZihlbC5vbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50TGlzdGVuZXJzLmluZGV4T2YoZWwpO1xuICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA+IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PSAwKSBkZWxldGUgbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gKiBAbGFuZ3VhZ2U9ZW5cbiAqIEV2ZW50IE9iamVjdCBjbGFzcy4gSXQncyBhbiBwcml2YXRlIGNsYXNzIG5vdywgYnV0IG1heWJlIHdpbGwgYmVjb21lIGEgcHVibGljIGNsYXNzIGlmIG5lZWRlZC5cbiAqL1xudmFyIEV2ZW50T2JqZWN0ID0gQ2xhc3MuY3JlYXRlKHtcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gRXZlbnRPYmplY3QodHlwZSwgdGFyZ2V0LCBkZXRhaWwpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5kZXRhaWwgPSBkZXRhaWw7XG4gICAgICAgIHRoaXMudGltZVN0YW1wID0gK25ldyBEYXRlKCk7XG4gICAgfSxcblxuICAgIHR5cGU6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIGRldGFpbDogbnVsbCxcbiAgICB0aW1lU3RhbXA6IDAsXG5cbiAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuX3N0b3BwZWQgPSB0cnVlO1xuICAgIH1cbn0pO1xuXG4vL1RyaWNrOiBgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uYCBjb21wYXRpYmlsaXR5XG52YXIgUmF3RXZlbnQgPSB3aW5kb3cuRXZlbnQ7XG5pZihSYXdFdmVudCl7XG4gICAgdmFyIHByb3RvID0gUmF3RXZlbnQucHJvdG90eXBlLFxuICAgICAgICBzdG9wID0gcHJvdG8uc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xuICAgIHByb3RvLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHN0b3AgJiYgc3RvcC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICB9O1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRNaXhpbjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\nvar util = __webpack_require__(2);\n\n/**\n * @language=en\n * @class Renderer Renderer is the base class of renderer.\n * @param {Object} properties The properties to create a renderer, contains all writeable props of this class.\n * @module hilo/renderer/Renderer\n * @requires hilo/core/Class\n * @requires hilo/util/util\n * @property {Object} canvas The canvas of renderer. It can be a dom element, such as a div element, or a canvas element. readonly.\n * @property {Object} stage The stage of renderer, readonly.\n * @property {String} renderType The render type of renderer, readonly.\n */\nvar Renderer = Class.create( /** @lends Renderer.prototype */{\n  constructor: function constructor(properties) {\n    properties = properties || {};\n    util.copy(this, properties, true);\n  },\n\n  renderType: null,\n  canvas: null,\n  stage: null,\n  blendMode: 'source-over',\n\n  /**\n   * @language=en\n   * Prepare for draw visual object. The subclass need to implement it.\n   * @param {View} target The visual target to draw.\n   */\n  startDraw: function startDraw(target) {},\n\n  /**\n   * @language=en\n   * Draw the visual object. The subclass need to implement it.\n   * @param {View} target The visual target to draw.\n   */\n  draw: function draw(target) {},\n\n  /**\n   * @language=en\n   * The handling method after draw the visual object. The subclass need to implement it.\n   * @param {View} target The visual target to draw.\n   */\n  endDraw: function endDraw(target) {},\n\n  /**\n   * @language=en\n   * Transfrom the visual object. The subclass need to implement it.\n   */\n  transform: function transform() {},\n\n  /**\n   * @language=en\n   * Hide the visual object. The subclass need to implement it.\n   */\n  hide: function hide() {},\n\n  /**\n   * @language=en\n   * Remove the visual object from canvas. Notice that it dosen't remove the object from stage. The subclass need to implement it.\n   * @param {View} target The visual target to remove.\n   */\n  remove: function remove(target) {},\n\n  /**\n   * @language=en\n   * Clear the given region of canvas. The subclass need to implement it.\n   * @param {Number} x The position on the x axis of the given region.\n   * @param {Number} y The position on the y axis of the given region.\n   * @param {Number} width The width of the given region.\n   * @param {Number} height The height of the given region.\n   */\n  clear: function clear(x, y, width, height) {},\n\n  /**\n   * @language=en\n   * Resize the renderer's canvas.\n   * @param {Number} width The width of renderer's canvas.\n   * @param {Number} height The height of the renderer's canvas.\n   */\n  resize: function resize(width, height) {}\n\n});\n\nmodule.exports = Renderer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby9yZW5kZXJlci9SZW5kZXJlci5qcz9hZjk1Il0sIm5hbWVzIjpbIkNsYXNzIiwicmVxdWlyZSIsInV0aWwiLCJSZW5kZXJlciIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwicHJvcGVydGllcyIsImNvcHkiLCJyZW5kZXJUeXBlIiwiY2FudmFzIiwic3RhZ2UiLCJibGVuZE1vZGUiLCJzdGFydERyYXciLCJ0YXJnZXQiLCJkcmF3IiwiZW5kRHJhdyIsInRyYW5zZm9ybSIsImhpZGUiLCJyZW1vdmUiLCJjbGVhciIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJyZXNpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDLENBQVIsQ0FBWjtBQUNBLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDLENBQVIsQ0FBWDs7QUFJQTs7Ozs7Ozs7Ozs7QUFXQSxJQUFJRSxXQUFXSCxNQUFNSSxNQUFOLEVBQWEsZ0NBQWdDO0FBQ3hEQyxlQUFhLHFCQUFTQyxVQUFULEVBQW9CO0FBQzdCQSxpQkFBYUEsY0FBYyxFQUEzQjtBQUNBSixTQUFLSyxJQUFMLENBQVUsSUFBVixFQUFnQkQsVUFBaEIsRUFBNEIsSUFBNUI7QUFDSCxHQUp1RDs7QUFNeERFLGNBQVcsSUFONkM7QUFPeERDLFVBQVEsSUFQZ0Q7QUFReERDLFNBQU8sSUFSaUQ7QUFTeERDLGFBQVUsYUFUOEM7O0FBV3hEOzs7OztBQUtBQyxhQUFXLG1CQUFTQyxNQUFULEVBQWdCLENBQUcsQ0FoQjBCOztBQWtCeEQ7Ozs7O0FBS0FDLFFBQU0sY0FBU0QsTUFBVCxFQUFnQixDQUFHLENBdkIrQjs7QUF5QnhEOzs7OztBQUtBRSxXQUFTLGlCQUFTRixNQUFULEVBQWdCLENBQUcsQ0E5QjRCOztBQWdDeEQ7Ozs7QUFJQUcsYUFBVyxxQkFBVSxDQUFHLENBcENnQzs7QUFzQ3hEOzs7O0FBSUFDLFFBQU0sZ0JBQVUsQ0FBRyxDQTFDcUM7O0FBNEN4RDs7Ozs7QUFLQUMsVUFBUSxnQkFBU0wsTUFBVCxFQUFnQixDQUFHLENBakQ2Qjs7QUFtRHhEOzs7Ozs7OztBQVFBTSxTQUFPLGVBQVNDLENBQVQsRUFBWUMsQ0FBWixFQUFlQyxLQUFmLEVBQXNCQyxNQUF0QixFQUE2QixDQUFHLENBM0RpQjs7QUE2RHhEOzs7Ozs7QUFNQUMsVUFBUSxnQkFBU0YsS0FBVCxFQUFnQkMsTUFBaEIsRUFBdUIsQ0FBRzs7QUFuRXNCLENBQTdDLENBQWY7O0FBdUVBRSxPQUFPQyxPQUFQLEdBQWlCdkIsUUFBakIiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGlsbyAxLjEuMTAgZm9yIGNvbW1vbmpzXG4gKiBDb3B5cmlnaHQgMjAxNiBhbGliYWJhLmNvbVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbnZhciBDbGFzcyA9IHJlcXVpcmUoJy4uL2NvcmUvQ2xhc3MnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbC91dGlsJyk7XG5cblxuXG4vKipcbiAqIEBsYW5ndWFnZT1lblxuICogQGNsYXNzIFJlbmRlcmVyIFJlbmRlcmVyIGlzIHRoZSBiYXNlIGNsYXNzIG9mIHJlbmRlcmVyLlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gY3JlYXRlIGEgcmVuZGVyZXIsIGNvbnRhaW5zIGFsbCB3cml0ZWFibGUgcHJvcHMgb2YgdGhpcyBjbGFzcy5cbiAqIEBtb2R1bGUgaGlsby9yZW5kZXJlci9SZW5kZXJlclxuICogQHJlcXVpcmVzIGhpbG8vY29yZS9DbGFzc1xuICogQHJlcXVpcmVzIGhpbG8vdXRpbC91dGlsXG4gKiBAcHJvcGVydHkge09iamVjdH0gY2FudmFzIFRoZSBjYW52YXMgb2YgcmVuZGVyZXIuIEl0IGNhbiBiZSBhIGRvbSBlbGVtZW50LCBzdWNoIGFzIGEgZGl2IGVsZW1lbnQsIG9yIGEgY2FudmFzIGVsZW1lbnQuIHJlYWRvbmx5LlxuICogQHByb3BlcnR5IHtPYmplY3R9IHN0YWdlIFRoZSBzdGFnZSBvZiByZW5kZXJlciwgcmVhZG9ubHkuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcmVuZGVyVHlwZSBUaGUgcmVuZGVyIHR5cGUgb2YgcmVuZGVyZXIsIHJlYWRvbmx5LlxuICovXG52YXIgUmVuZGVyZXIgPSBDbGFzcy5jcmVhdGUoLyoqIEBsZW5kcyBSZW5kZXJlci5wcm90b3R5cGUgKi97XG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKHByb3BlcnRpZXMpe1xuICAgICAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCB7fTtcbiAgICAgICAgdXRpbC5jb3B5KHRoaXMsIHByb3BlcnRpZXMsIHRydWUpO1xuICAgIH0sXG5cbiAgICByZW5kZXJUeXBlOm51bGwsXG4gICAgY2FudmFzOiBudWxsLFxuICAgIHN0YWdlOiBudWxsLFxuICAgIGJsZW5kTW9kZTonc291cmNlLW92ZXInLFxuXG4gICAgLyoqXG4gICAgICogQGxhbmd1YWdlPWVuXG4gICAgICogUHJlcGFyZSBmb3IgZHJhdyB2aXN1YWwgb2JqZWN0LiBUaGUgc3ViY2xhc3MgbmVlZCB0byBpbXBsZW1lbnQgaXQuXG4gICAgICogQHBhcmFtIHtWaWV3fSB0YXJnZXQgVGhlIHZpc3VhbCB0YXJnZXQgdG8gZHJhdy5cbiAgICAgKi9cbiAgICBzdGFydERyYXc6IGZ1bmN0aW9uKHRhcmdldCl7IH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBEcmF3IHRoZSB2aXN1YWwgb2JqZWN0LiBUaGUgc3ViY2xhc3MgbmVlZCB0byBpbXBsZW1lbnQgaXQuXG4gICAgICogQHBhcmFtIHtWaWV3fSB0YXJnZXQgVGhlIHZpc3VhbCB0YXJnZXQgdG8gZHJhdy5cbiAgICAgKi9cbiAgICBkcmF3OiBmdW5jdGlvbih0YXJnZXQpeyB9LFxuXG4gICAgLyoqXG4gICAgICogQGxhbmd1YWdlPWVuXG4gICAgICogVGhlIGhhbmRsaW5nIG1ldGhvZCBhZnRlciBkcmF3IHRoZSB2aXN1YWwgb2JqZWN0LiBUaGUgc3ViY2xhc3MgbmVlZCB0byBpbXBsZW1lbnQgaXQuXG4gICAgICogQHBhcmFtIHtWaWV3fSB0YXJnZXQgVGhlIHZpc3VhbCB0YXJnZXQgdG8gZHJhdy5cbiAgICAgKi9cbiAgICBlbmREcmF3OiBmdW5jdGlvbih0YXJnZXQpeyB9LFxuXG4gICAgLyoqXG4gICAgICogQGxhbmd1YWdlPWVuXG4gICAgICogVHJhbnNmcm9tIHRoZSB2aXN1YWwgb2JqZWN0LiBUaGUgc3ViY2xhc3MgbmVlZCB0byBpbXBsZW1lbnQgaXQuXG4gICAgICovXG4gICAgdHJhbnNmb3JtOiBmdW5jdGlvbigpeyB9LFxuXG4gICAgLyoqXG4gICAgICogQGxhbmd1YWdlPWVuXG4gICAgICogSGlkZSB0aGUgdmlzdWFsIG9iamVjdC4gVGhlIHN1YmNsYXNzIG5lZWQgdG8gaW1wbGVtZW50IGl0LlxuICAgICAqL1xuICAgIGhpZGU6IGZ1bmN0aW9uKCl7IH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBSZW1vdmUgdGhlIHZpc3VhbCBvYmplY3QgZnJvbSBjYW52YXMuIE5vdGljZSB0aGF0IGl0IGRvc2VuJ3QgcmVtb3ZlIHRoZSBvYmplY3QgZnJvbSBzdGFnZS4gVGhlIHN1YmNsYXNzIG5lZWQgdG8gaW1wbGVtZW50IGl0LlxuICAgICAqIEBwYXJhbSB7Vmlld30gdGFyZ2V0IFRoZSB2aXN1YWwgdGFyZ2V0IHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uKHRhcmdldCl7IH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBDbGVhciB0aGUgZ2l2ZW4gcmVnaW9uIG9mIGNhbnZhcy4gVGhlIHN1YmNsYXNzIG5lZWQgdG8gaW1wbGVtZW50IGl0LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSBwb3NpdGlvbiBvbiB0aGUgeCBheGlzIG9mIHRoZSBnaXZlbiByZWdpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgVGhlIHBvc2l0aW9uIG9uIHRoZSB5IGF4aXMgb2YgdGhlIGdpdmVuIHJlZ2lvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggVGhlIHdpZHRoIG9mIHRoZSBnaXZlbiByZWdpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBnaXZlbiByZWdpb24uXG4gICAgICovXG4gICAgY2xlYXI6IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpeyB9LFxuXG4gICAgLyoqXG4gICAgICogQGxhbmd1YWdlPWVuXG4gICAgICogUmVzaXplIHRoZSByZW5kZXJlcidzIGNhbnZhcy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggVGhlIHdpZHRoIG9mIHJlbmRlcmVyJ3MgY2FudmFzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyZXIncyBjYW52YXMuXG4gICAgICovXG4gICAgcmVzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KXsgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZW5kZXJlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Hilo = __webpack_require__(1);\nvar Class = __webpack_require__(0);\nvar EventMixin = __webpack_require__(4);\nvar Matrix = __webpack_require__(7);\nvar util = __webpack_require__(2);\n\n/**\n * @language=en\n * @class View View is the base class of all display objects\n * @mixes EventMixin\n * @borrows EventMixin#on as #on\n * @borrows EventMixin#off as #off\n * @borrows EventMixin#fire as #fire\n * @param {Object} properties The properties to create a view object, contains all writeable props of this class\n * @module hilo/view/View\n * @requires hilo/core/Hilo\n * @requires hilo/core/Class\n * @requires hilo/event/EventMixin\n * @requires hilo/geom/Matrix\n * @requires hilo/util/util\n * @property {String} id The identifier for the view.\n * @property {Number} x The position of the view on the x axis relative to the local coordinates of the parent, default value is 0.\n * @property {Number} y The position of the view on the y axis relative to the local coordinates of the parent, default value is 0.\n * @property {Number} width The width of the view, default value is 0.\n * @property {Number} height The height of the view, default value is 0.\n * @property {Number} alpha The opacity of the view, default value is 1.\n * @property {Number} rotation The rotation of the view in angles, default value is 0.\n * @property {Boolean} visible The visibility of the view. If false the vew will not be drawn, default value is true.\n * @property {Number} pivotX Position of the center point on the x axis of the view, default value is 0.\n * @property {Number} pivotY Position of the center point on the y axis of the view, default value is 0.\n * @property {Number} scaleX The x axis scale factor of the view, default value is 1.\n * @property {Number} scaleY The y axis scale factor of the view, default value is 1.\n * @property {Boolean} pointerEnabled Is the view can receive DOM events, default value is true.\n * @property {Object} background The background style to fill the view, can be css color, gradient or pattern of canvas\n * @property {Graphics} mask Sets a mask for the view. A mask is an object that limits the visibility of an object to the shape of the mask applied to it. A regular mask must be a Hilo.Graphics object. This allows for much faster masking in canvas as it utilises shape clipping. To remove a mask, set this property to null.\n * @property {Number} tint The tint applied to the view，default is 0xFFFFFF.Only support in WebGL mode.\n * @property {String|Function} align The alignment of the view, the value must be one of Hilo.align enum.\n * @property {Container} parent The parent view of this view, readonly!\n * @property {Number} depth The z index of the view, readonly!\n * @property {Drawable} drawable The drawable object of the view. Only for advanced develop.\n * @property {Array} boundsArea The vertex points of the view, the points are relative to the center point. This is a example: [{x:10, y:10}, {x:20, y:20}].\n */\nvar View = function () {\n\n    return Class.create( /** @lends View.prototype */{\n        Mixes: EventMixin,\n        constructor: function constructor(properties) {\n            properties = properties || {};\n            this.id = this.id || properties.id || Hilo.getUid(\"View\");\n            util.copy(this, properties, true);\n        },\n\n        tint: 0xffffff,\n        id: null,\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        alpha: 1,\n        rotation: 0,\n        visible: true,\n        pivotX: 0,\n        pivotY: 0,\n        scaleX: 1,\n        scaleY: 1,\n        pointerEnabled: true,\n        background: null,\n        mask: null,\n        align: null,\n        drawable: null,\n        boundsArea: null,\n        parent: null,\n        depth: -1,\n        blendMode: 'source-over',\n\n        /**\n         * @language=en\n         * Get the stage object of the view. If the view doesn't add to any stage, null will be returned.\n         * @returns {Stage} The stage object of the view.\n         */\n        getStage: function getStage() {\n            var obj = this,\n                parent;\n            while (parent = obj.parent) {\n                obj = parent;\n            } //NOTE: don't use `instanceof` to prevent circular module requirement.\n            //But it's not a very reliable way to check it's a stage instance.\n            if (obj.canvas) return obj;\n            return null;\n        },\n\n        /**\n         * @language=en\n         * Get the scaled width of the view.\n         * @returns {Number} scaled width of the view.\n         */\n        getScaledWidth: function getScaledWidth() {\n            return this.width * this.scaleX;\n        },\n\n        /**\n         * @language=en\n         * Get the scaled height of the view.\n         * @returns {Number} scaled height of the view.\n         */\n        getScaledHeight: function getScaledHeight() {\n            return this.height * this.scaleY;\n        },\n\n        /**\n         * @language=en\n         * Add current view to a Contaner.\n         * @param {Container} container Container object.\n         * @param {Uint} index The index of the view in container.\n         * @returns {View} Current view.\n         */\n        addTo: function addTo(container, index) {\n            if (typeof index === 'number') container.addChildAt(this, index);else container.addChild(this);\n            return this;\n        },\n\n        /**\n         * @language=en\n         * Remove current view from it's parent container\n         * @returns {View} Current view.\n         */\n        removeFromParent: function removeFromParent() {\n            var parent = this.parent;\n            if (parent) parent.removeChild(this);\n            return this;\n        },\n\n        /**\n         * @language=en\n         * Get the bounds of the view as a circumscribed rectangle and all vertex points relative to the coordinates of the stage.\n         * @returns {Array} The vertex points array, and the array contains the following properties:\n         * <ul>\n         * <li><b>x</b> - The position of the view on the x axis relative to the coordinates of the stage.</li>\n         * <li><b>y</b> - The position of the view on the y axis relative to the coordinates of the stage.</li>\n         * <li><b>width</b> - The width of circumscribed rectangle of the view.</li>\n         * <li><b>height</b> - The height of circumscribed rectangle of the view</li>\n         * </ul>\n         */\n        getBounds: function getBounds() {\n            var w = this.width,\n                h = this.height,\n                mtx = this.getConcatenatedMatrix(),\n                poly = this.boundsArea || [{ x: 0, y: 0 }, { x: w, y: 0 }, { x: w, y: h }, { x: 0, y: h }],\n                vertexs = [],\n                point,\n                x,\n                y,\n                minX,\n                maxX,\n                minY,\n                maxY;\n\n            for (var i = 0, len = poly.length; i < len; i++) {\n                point = mtx.transformPoint(poly[i], true, true);\n                x = point.x;\n                y = point.y;\n\n                if (i == 0) {\n                    minX = maxX = x;\n                    minY = maxY = y;\n                } else {\n                    if (minX > x) minX = x;else if (maxX < x) maxX = x;\n                    if (minY > y) minY = y;else if (maxY < y) maxY = y;\n                }\n                vertexs[i] = point;\n            }\n\n            vertexs.x = minX;\n            vertexs.y = minY;\n            vertexs.width = maxX - minX;\n            vertexs.height = maxY - minY;\n            return vertexs;\n        },\n\n        /**\n         * @language=en\n         * Get the matrix that can transform points from current view coordinates to the ancestor container coordinates.\n         * @param {View} ancestor The ancestor of current view, default value is the top container.\n         * @private\n         */\n        getConcatenatedMatrix: function getConcatenatedMatrix(ancestor) {\n            var mtx = new Matrix(1, 0, 0, 1, 0, 0);\n\n            for (var o = this; o != ancestor && o.parent; o = o.parent) {\n                var cos = 1,\n                    sin = 0,\n                    rotation = o.rotation % 360,\n                    pivotX = o.pivotX,\n                    pivotY = o.pivotY,\n                    scaleX = o.scaleX,\n                    scaleY = o.scaleY;\n\n                if (rotation) {\n                    var r = rotation * Math.PI / 180;\n                    cos = Math.cos(r);\n                    sin = Math.sin(r);\n                }\n\n                if (pivotX != 0) mtx.tx -= pivotX;\n                if (pivotY != 0) mtx.ty -= pivotY;\n\n                var pos = o.getAlignPosition();\n                mtx.concat(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, pos.x, pos.y);\n            }\n            return mtx;\n        },\n\n        getAlignPosition: function getAlignPosition() {\n            var parent = this.parent;\n            var align = this.align;\n            var x = this.x;\n            var y = this.y;\n\n            if (parent && this.align) {\n                if (typeof align === 'function') {\n                    return this.align();\n                }\n\n                var w = this.width,\n                    h = this.height,\n                    pw = parent.width,\n                    ph = parent.height;\n                switch (align) {\n                    case 'TL':\n                        x = 0;\n                        y = 0;\n                        break;\n                    case 'T':\n                        x = pw - w >> 1;\n                        y = 0;\n                        break;\n                    case 'TR':\n                        x = pw - w;\n                        y = 0;\n                        break;\n                    case 'L':\n                        x = 0;\n                        y = ph - h >> 1;\n                        break;\n                    case 'C':\n                        x = pw - w >> 1;\n                        y = ph - h >> 1;\n                        break;\n                    case 'R':\n                        x = pw - w;\n                        y = ph - h >> 1;\n                        break;\n                    case 'BL':\n                        x = 0;\n                        y = ph - h;\n                        break;\n                    case 'B':\n                        x = pw - w >> 1;\n                        y = ph - h;\n                        break;\n                    case 'BR':\n                        x = pw - w;\n                        y = ph - h;\n                        break;\n                }\n            }\n\n            return {\n                x: x,\n                y: y\n            };\n        },\n\n        /**\n         * @language=en\n         * Determining whether a point is in the circumscribed rectangle of current view.\n         * @param {Number} x The x axis relative to the stage coordinates.\n         * @param {Number} y The y axis relative to the stage coordinates.\n         * @param {Boolean} usePolyCollision Is use polygon collision, default value is false.\n         * @returns {Boolean} the point is in the circumscribed rectangle of current view.\n         */\n        hitTestPoint: function hitTestPoint(x, y, usePolyCollision) {\n            var bound = this.getBounds(),\n                hit = x >= bound.x && x <= bound.x + bound.width && y >= bound.y && y <= bound.y + bound.height;\n\n            if (hit && usePolyCollision) {\n                hit = pointInPolygon(x, y, bound);\n            }\n            return hit;\n        },\n\n        /**\n         * @language=en\n         * Determining whether an object is in the circumscribed rectangle of current view.\n         * @param {View} object The object need to determining.\n         * @param {Boolean} usePolyCollision Is use polygon collision, default value is false.\n         */\n        hitTestObject: function hitTestObject(object, usePolyCollision) {\n            var b1 = this.getBounds(),\n                b2 = object.getBounds(),\n                hit = b1.x <= b2.x + b2.width && b2.x <= b1.x + b1.width && b1.y <= b2.y + b2.height && b2.y <= b1.y + b1.height;\n\n            if (hit && usePolyCollision) {\n                hit = polygonCollision(b1, b2);\n            }\n            return !!hit;\n        },\n\n        /**\n         * @language=en\n         * The method to render current display object. Only for advanced develop.\n         * @param {Renderer} renderer Renderer object.\n         * @param {Number} delta The delta time of render.\n         * @protected\n         */\n        _render: function _render(renderer, delta) {\n            if ((!this.onUpdate || this.onUpdate(delta) !== false) && renderer.startDraw(this)) {\n                renderer.transform(this);\n                this.render(renderer, delta);\n                renderer.endDraw(this);\n            }\n        },\n        /**\n         * @language=en\n         * Mouse event\n        */\n        _fireMouseEvent: function _fireMouseEvent(e) {\n            e.eventCurrentTarget = this;\n            this.fire(e);\n\n            // 处理mouseover事件 mouseover不需要阻止冒泡\n            // handle mouseover event, mouseover needn't stop propagation.\n            if (e.type == \"mousemove\") {\n                if (!this.__mouseOver) {\n                    this.__mouseOver = true;\n                    var overEvent = util.copy({}, e);\n                    overEvent.type = \"mouseover\";\n                    this.fire(overEvent);\n                }\n            } else if (e.type == \"mouseout\") {\n                this.__mouseOver = false;\n            }\n\n            // 向上冒泡\n            // handle event propagation\n            var parent = this.parent;\n            if (!e._stopped && !e._stopPropagationed && parent) {\n                if (e.type == \"mouseout\" || e.type == \"touchout\") {\n                    if (!parent.hitTestPoint(e.stageX, e.stageY, true)) {\n                        parent._fireMouseEvent(e);\n                    }\n                } else {\n                    parent._fireMouseEvent(e);\n                }\n            }\n        },\n\n        /**\n         * @language=en\n         * This method will call while the view need update(usually caused by ticker update). This method can return a Boolean value, if return false, the view will not be drawn.\n         * Limit: If you change the index in it's parent, it will not be drawn correct in current frame but next frame is correct.\n         * @type Function\n         * @default null\n         */\n        onUpdate: null,\n\n        /**\n         * @language=en\n         * The render method of current view. The subclass can implement it's own render logic by rewrite this function.\n         * @param {Renderer} renderer Renderer object.\n         * @param {Number} delta The delta time of render.\n         */\n        render: function render(renderer, delta) {\n            renderer.draw(this);\n        },\n\n        /**\n         * @language=en\n         * Get a string representing current view.\n         * @returns {String} string representing current view.\n         */\n        toString: function toString() {\n            return Hilo.viewToString(this);\n        }\n    });\n\n    /**\n     * @language=en\n     * @private\n     */\n    function pointInPolygon(x, y, poly) {\n        var cross = 0,\n            onBorder = false,\n            minX,\n            maxX,\n            minY,\n            maxY;\n\n        for (var i = 0, len = poly.length; i < len; i++) {\n            var p1 = poly[i],\n                p2 = poly[(i + 1) % len];\n\n            if (p1.y == p2.y && y == p1.y) {\n                p1.x > p2.x ? (minX = p2.x, maxX = p1.x) : (minX = p1.x, maxX = p2.x);\n                if (x >= minX && x <= maxX) {\n                    onBorder = true;\n                    continue;\n                }\n            }\n\n            p1.y > p2.y ? (minY = p2.y, maxY = p1.y) : (minY = p1.y, maxY = p2.y);\n            if (y < minY || y > maxY) continue;\n\n            var nx = (y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x;\n            if (nx > x) cross++;else if (nx == x) onBorder = true;\n\n            //当射线和多边形相交\n            if (p1.x > x && p1.y == y) {\n                var p0 = poly[(len + i - 1) % len];\n                //当交点的两边在射线两旁\n                if (p0.y < y && p2.y > y || p0.y > y && p2.y < y) {\n                    cross++;\n                }\n            }\n        }\n\n        return onBorder || cross % 2 == 1;\n    }\n\n    /**\n     * @language=en\n     * @private\n     */\n    function polygonCollision(poly1, poly2) {\n        var result = doSATCheck(poly1, poly2, { overlap: -Infinity, normal: { x: 0, y: 0 } });\n        if (result) return doSATCheck(poly2, poly1, result);\n        return false;\n    }\n\n    /**\n     * @language=en\n     * @private\n     */\n    function doSATCheck(poly1, poly2, result) {\n        var len1 = poly1.length,\n            len2 = poly2.length,\n            currentPoint,\n            nextPoint,\n            distance,\n            min1,\n            max1,\n            min2,\n            max2,\n            dot,\n            overlap,\n            normal = { x: 0, y: 0 };\n\n        for (var i = 0; i < len1; i++) {\n            currentPoint = poly1[i];\n            nextPoint = poly1[i < len1 - 1 ? i + 1 : 0];\n\n            normal.x = currentPoint.y - nextPoint.y;\n            normal.y = nextPoint.x - currentPoint.x;\n\n            distance = Math.sqrt(normal.x * normal.x + normal.y * normal.y);\n            normal.x /= distance;\n            normal.y /= distance;\n\n            min1 = max1 = poly1[0].x * normal.x + poly1[0].y * normal.y;\n            for (var j = 1; j < len1; j++) {\n                dot = poly1[j].x * normal.x + poly1[j].y * normal.y;\n                if (dot > max1) max1 = dot;else if (dot < min1) min1 = dot;\n            }\n\n            min2 = max2 = poly2[0].x * normal.x + poly2[0].y * normal.y;\n            for (j = 1; j < len2; j++) {\n                dot = poly2[j].x * normal.x + poly2[j].y * normal.y;\n                if (dot > max2) max2 = dot;else if (dot < min2) min2 = dot;\n            }\n\n            if (min1 < min2) {\n                overlap = min2 - max1;\n                normal.x = -normal.x;\n                normal.y = -normal.y;\n            } else {\n                overlap = min1 - max2;\n            }\n\n            if (overlap >= 0) {\n                return false;\n            } else if (overlap > result.overlap) {\n                result.overlap = overlap;\n                result.normal.x = normal.x;\n                result.normal.y = normal.y;\n            }\n        }\n\n        return result;\n    }\n}();\n\nmodule.exports = View;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\n\n/**\n * @language=en\n * @class Matrix class is a transforming matrix, which declare how points in one coordinate maped to another coordinate.\n * @param {Number} a The value affects pixel positioning alongside the x axis when Scale or rotate images.\n * @param {Number} b The value affects pixel positioning alongside the y axis when rotate or skew images.\n * @param {Number} c The value affects pixel positioning alongside the x axis when rotate or skew images.\n * @param {Number} d The value affects pixel positioning alongside the y axis when Scale or rotate images.\n * @param {Number} tx The distance to move every point alongside the x axis.\n * @param {Number} ty The distance to move every point alongside the y axis.\n * @module hilo/geom/Matrix\n * @requires hilo/core/Class\n */\nvar Matrix = Class.create( /** @lends Matrix.prototype */{\n    constructor: function constructor(a, b, c, d, tx, ty) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    },\n\n    /**\n     * @language=en\n     * Link a Matrix to current Matrix, in order to make geometry effects on these two composed more effective.\n     * @param {Matrix} mtx Matrix that link to the source matrix.\n     * @returns {Matrix} A Matrix Object.\n     */\n    concat: function concat(mtx) {\n        var args = arguments,\n            a = this.a,\n            b = this.b,\n            c = this.c,\n            d = this.d,\n            tx = this.tx,\n            ty = this.ty;\n\n        var ma, mb, mc, md, mx, my;\n        if (args.length >= 6) {\n            ma = args[0];\n            mb = args[1];\n            mc = args[2];\n            md = args[3];\n            mx = args[4];\n            my = args[5];\n        } else {\n            ma = mtx.a;\n            mb = mtx.b;\n            mc = mtx.c;\n            md = mtx.d;\n            mx = mtx.tx;\n            my = mtx.ty;\n        }\n\n        this.a = a * ma + b * mc;\n        this.b = a * mb + b * md;\n        this.c = c * ma + d * mc;\n        this.d = c * mb + d * md;\n        this.tx = tx * ma + ty * mc + mx;\n        this.ty = tx * mb + ty * md + my;\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Rotate the Matrix Object.\n     * @param {Number} angle The angle to rotate.\n     * @returns {Matrix} A Matrix object.\n     */\n    rotate: function rotate(angle) {\n        var sin = Math.sin(angle),\n            cos = Math.cos(angle),\n            a = this.a,\n            b = this.b,\n            c = this.c,\n            d = this.d,\n            tx = this.tx,\n            ty = this.ty;\n\n        this.a = a * cos - b * sin;\n        this.b = a * sin + b * cos;\n        this.c = c * cos - d * sin;\n        this.d = c * sin + d * cos;\n        this.tx = tx * cos - ty * sin;\n        this.ty = tx * sin + ty * cos;\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Scale the Matrix.\n     * @param {Number} sx The value to multiply those object scale alongside the x axis.\n     * @param {Number} sy The value to multiply those object scale alongside the y axis.\n     * @returns {Matrix} A Matrix object.\n     */\n    scale: function scale(sx, sy) {\n        this.a *= sx;\n        this.d *= sy;\n        this.c *= sx;\n        this.b *= sy;\n        this.tx *= sx;\n        this.ty *= sy;\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Translate the Matrix alongside x axis and y axis by dx and dy.\n     * @param {Number} dx Translate Matrix alongside the x axis to the right (measured in px).\n     * @param {Number} dy Translate Matrix alongside the y axis to the right (measured in px).\n     * @returns {Matrix} A Matrix object.\n     */\n    translate: function translate(dx, dy) {\n        this.tx += dx;\n        this.ty += dy;\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Set each Matrix property a value to trigger null transform. The Matrix after applying identity matrix transformation will be exactly the same as original.\n     * @returns {Matrix} A Matrix object.\n     */\n    identity: function identity() {\n        this.a = this.d = 1;\n        this.b = this.c = this.tx = this.ty = 0;\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Apply an invert transformation of original Matrix. Using this invert transformation, you can reset a Matrix to a state before it had been apply some Matrix.\n     * @returns {Matrix} A Matrix object.\n     */\n    invert: function invert() {\n        var a = this.a;\n        var b = this.b;\n        var c = this.c;\n        var d = this.d;\n        var tx = this.tx;\n        var i = a * d - b * c;\n\n        this.a = d / i;\n        this.b = -b / i;\n        this.c = -c / i;\n        this.d = a / i;\n        this.tx = (c * this.ty - d * tx) / i;\n        this.ty = -(a * this.ty - b * tx) / i;\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Return the result after apply a Matrix displaying transform on the point.\n     * @param {Object} point Point need to transform.\n     * @param {Boolean} round Whether ceil the coordinate values of the point.\n     * @param {Boolean} returnNew Whether return a new point.\n     * @returns {Object} 由应用矩阵转换所产生的点。\n     */\n    transformPoint: function transformPoint(point, round, returnNew) {\n        var x = point.x * this.a + point.y * this.c + this.tx,\n            y = point.x * this.b + point.y * this.d + this.ty;\n\n        if (round) {\n            x = x + 0.5 >> 0;\n            y = y + 0.5 >> 0;\n        }\n        if (returnNew) return { x: x, y: y };\n        point.x = x;\n        point.y = y;\n        return point;\n    }\n\n});\n\nmodule.exports = Matrix;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\nvar util = __webpack_require__(2);\n\n/**\n * @language=en\n * @class Drawable is a wrapper of drawable images.\n * @param {Object} properties create Objects properties, contains all writable properties.\n * @module hilo/view/Drawable\n * @requires hilo/core/Class\n * @requires hilo/util/util\n * @property {Object} image Image to be drawed, can used by CanvasRenderingContext2D.drawImage，like HTMLImageElement、HTMLCanvasElement、HTMLVideoElement。\n * @property {array} rect The retangle area that image will be drawed.\n */\nvar Drawable = Class.create( /** @lends Drawable.prototype */{\n    constructor: function constructor(properties) {\n        this.init(properties);\n    },\n\n    image: null,\n    rect: null,\n\n    /**\n     * @language=en\n     * Initialize drawable elements.\n     * @param {Object} properties Properties need to be initialized.\n     */\n    init: function init(properties) {\n        var me = this,\n            oldImage = me.image;\n        if (Drawable.isDrawable(properties)) {\n            me.image = properties;\n        } else {\n            util.copy(me, properties, true);\n        }\n\n        var image = me.image;\n        if (typeof image === 'string') {\n            if (oldImage && image === oldImage.getAttribute('src')) {\n                image = me.image = oldImage;\n            } else {\n                me.image = null;\n                //load image dynamically\n                var img = new Image();\n                if (properties.crossOrigin) {\n                    img.crossOrigin = properties.crossOrigin;\n                }\n                img.onload = function () {\n                    img.onload = null;\n                    me.init(img);\n                };\n                img.src = image;\n                return;\n            }\n        }\n\n        if (image && !me.rect) me.rect = [0, 0, image.width, image.height];\n    },\n\n    Statics: /** @lends Drawable */{\n        /**\n         * @language=en\n         * Check whether the given 'elem' and be wrapped into Drawable object.\n         * @param {Object} elem Element to be tested.\n         * @return {Boolean} Return true if element can be wrapped into Drawable element, otherwises return false.\n         */\n        isDrawable: function isDrawable(elem) {\n            if (!elem || !elem.tagName) return false;\n            var tagName = elem.tagName.toLowerCase();\n            return tagName === \"img\" || tagName === \"canvas\" || tagName === \"video\";\n        }\n    }\n});\n\nmodule.exports = Drawable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby92aWV3L0RyYXdhYmxlLmpzPzNkN2MiXSwibmFtZXMiOlsiQ2xhc3MiLCJyZXF1aXJlIiwidXRpbCIsIkRyYXdhYmxlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwiaW5pdCIsImltYWdlIiwicmVjdCIsIm1lIiwib2xkSW1hZ2UiLCJpc0RyYXdhYmxlIiwiY29weSIsImdldEF0dHJpYnV0ZSIsImltZyIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJvbmxvYWQiLCJzcmMiLCJ3aWR0aCIsImhlaWdodCIsIlN0YXRpY3MiLCJlbGVtIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7QUFLQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQyxDQUFSLENBQVo7QUFDQSxJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQyxDQUFSLENBQVg7O0FBSUE7Ozs7Ozs7Ozs7QUFVQSxJQUFJRSxXQUFXSCxNQUFNSSxNQUFOLEVBQWEsZ0NBQWdDO0FBQ3hEQyxpQkFBYSxxQkFBU0MsVUFBVCxFQUFvQjtBQUM3QixhQUFLQyxJQUFMLENBQVVELFVBQVY7QUFDSCxLQUh1RDs7QUFLeERFLFdBQU8sSUFMaUQ7QUFNeERDLFVBQU0sSUFOa0Q7O0FBUXhEOzs7OztBQUtBRixVQUFNLGNBQVNELFVBQVQsRUFBb0I7QUFDdEIsWUFBSUksS0FBSyxJQUFUO0FBQUEsWUFBZUMsV0FBV0QsR0FBR0YsS0FBN0I7QUFDQSxZQUFHTCxTQUFTUyxVQUFULENBQW9CTixVQUFwQixDQUFILEVBQW1DO0FBQy9CSSxlQUFHRixLQUFILEdBQVdGLFVBQVg7QUFDSCxTQUZELE1BRUs7QUFDREosaUJBQUtXLElBQUwsQ0FBVUgsRUFBVixFQUFjSixVQUFkLEVBQTBCLElBQTFCO0FBQ0g7O0FBRUQsWUFBSUUsUUFBUUUsR0FBR0YsS0FBZjtBQUNBLFlBQUcsT0FBT0EsS0FBUCxLQUFpQixRQUFwQixFQUE2QjtBQUN6QixnQkFBR0csWUFBWUgsVUFBVUcsU0FBU0csWUFBVCxDQUFzQixLQUF0QixDQUF6QixFQUFzRDtBQUNsRE4sd0JBQVFFLEdBQUdGLEtBQUgsR0FBV0csUUFBbkI7QUFDSCxhQUZELE1BRUs7QUFDREQsbUJBQUdGLEtBQUgsR0FBVyxJQUFYO0FBQ0E7QUFDQSxvQkFBSU8sTUFBTSxJQUFJQyxLQUFKLEVBQVY7QUFDQSxvQkFBR1YsV0FBV1csV0FBZCxFQUEwQjtBQUN0QkYsd0JBQUlFLFdBQUosR0FBa0JYLFdBQVdXLFdBQTdCO0FBQ0g7QUFDREYsb0JBQUlHLE1BQUosR0FBYSxZQUFVO0FBQ25CSCx3QkFBSUcsTUFBSixHQUFhLElBQWI7QUFDQVIsdUJBQUdILElBQUgsQ0FBUVEsR0FBUjtBQUNILGlCQUhEO0FBSUFBLG9CQUFJSSxHQUFKLEdBQVVYLEtBQVY7QUFDQTtBQUNIO0FBQ0o7O0FBRUQsWUFBR0EsU0FBUyxDQUFDRSxHQUFHRCxJQUFoQixFQUFzQkMsR0FBR0QsSUFBSCxHQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBT0QsTUFBTVksS0FBYixFQUFvQlosTUFBTWEsTUFBMUIsQ0FBVjtBQUN6QixLQTFDdUQ7O0FBNEN4REMsYUFBUyxzQkFBc0I7QUFDM0I7Ozs7OztBQU1BVixvQkFBWSxvQkFBU1csSUFBVCxFQUFjO0FBQ3RCLGdCQUFHLENBQUNBLElBQUQsSUFBUyxDQUFDQSxLQUFLQyxPQUFsQixFQUEyQixPQUFPLEtBQVA7QUFDM0IsZ0JBQUlBLFVBQVVELEtBQUtDLE9BQUwsQ0FBYUMsV0FBYixFQUFkO0FBQ0EsbUJBQU9ELFlBQVksS0FBWixJQUFxQkEsWUFBWSxRQUFqQyxJQUE2Q0EsWUFBWSxPQUFoRTtBQUNIO0FBWDBCO0FBNUN5QixDQUE3QyxDQUFmOztBQTJEQUUsT0FBT0MsT0FBUCxHQUFpQnhCLFFBQWpCIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhpbG8gMS4xLjEwIGZvciBjb21tb25qc1xuICogQ29weXJpZ2h0IDIwMTYgYWxpYmFiYS5jb21cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG52YXIgQ2xhc3MgPSByZXF1aXJlKCcuLi9jb3JlL0NsYXNzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvdXRpbCcpO1xuXG5cblxuLyoqXG4gKiBAbGFuZ3VhZ2U9ZW5cbiAqIEBjbGFzcyBEcmF3YWJsZSBpcyBhIHdyYXBwZXIgb2YgZHJhd2FibGUgaW1hZ2VzLlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgY3JlYXRlIE9iamVjdHMgcHJvcGVydGllcywgY29udGFpbnMgYWxsIHdyaXRhYmxlIHByb3BlcnRpZXMuXG4gKiBAbW9kdWxlIGhpbG8vdmlldy9EcmF3YWJsZVxuICogQHJlcXVpcmVzIGhpbG8vY29yZS9DbGFzc1xuICogQHJlcXVpcmVzIGhpbG8vdXRpbC91dGlsXG4gKiBAcHJvcGVydHkge09iamVjdH0gaW1hZ2UgSW1hZ2UgdG8gYmUgZHJhd2VkLCBjYW4gdXNlZCBieSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQuZHJhd0ltYWdl77yMbGlrZSBIVE1MSW1hZ2VFbGVtZW5044CBSFRNTENhbnZhc0VsZW1lbnTjgIFIVE1MVmlkZW9FbGVtZW5044CCXG4gKiBAcHJvcGVydHkge2FycmF5fSByZWN0IFRoZSByZXRhbmdsZSBhcmVhIHRoYXQgaW1hZ2Ugd2lsbCBiZSBkcmF3ZWQuXG4gKi9cbnZhciBEcmF3YWJsZSA9IENsYXNzLmNyZWF0ZSgvKiogQGxlbmRzIERyYXdhYmxlLnByb3RvdHlwZSAqL3tcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24ocHJvcGVydGllcyl7XG4gICAgICAgIHRoaXMuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICB9LFxuXG4gICAgaW1hZ2U6IG51bGwsXG4gICAgcmVjdDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEBsYW5ndWFnZT1lblxuICAgICAqIEluaXRpYWxpemUgZHJhd2FibGUgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgUHJvcGVydGllcyBuZWVkIHRvIGJlIGluaXRpYWxpemVkLlxuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uKHByb3BlcnRpZXMpe1xuICAgICAgICB2YXIgbWUgPSB0aGlzLCBvbGRJbWFnZSA9IG1lLmltYWdlO1xuICAgICAgICBpZihEcmF3YWJsZS5pc0RyYXdhYmxlKHByb3BlcnRpZXMpKXtcbiAgICAgICAgICAgIG1lLmltYWdlID0gcHJvcGVydGllcztcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB1dGlsLmNvcHkobWUsIHByb3BlcnRpZXMsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGltYWdlID0gbWUuaW1hZ2U7XG4gICAgICAgIGlmKHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycpe1xuICAgICAgICAgICAgaWYob2xkSW1hZ2UgJiYgaW1hZ2UgPT09IG9sZEltYWdlLmdldEF0dHJpYnV0ZSgnc3JjJykpe1xuICAgICAgICAgICAgICAgIGltYWdlID0gbWUuaW1hZ2UgPSBvbGRJbWFnZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIG1lLmltYWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvL2xvYWQgaW1hZ2UgZHluYW1pY2FsbHlcbiAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgaWYocHJvcGVydGllcy5jcm9zc09yaWdpbil7XG4gICAgICAgICAgICAgICAgICAgIGltZy5jcm9zc09yaWdpbiA9IHByb3BlcnRpZXMuY3Jvc3NPcmlnaW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbWUuaW5pdChpbWcpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IGltYWdlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGltYWdlICYmICFtZS5yZWN0KSBtZS5yZWN0ID0gWzAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHRdO1xuICAgIH0sXG5cbiAgICBTdGF0aWNzOiAvKiogQGxlbmRzIERyYXdhYmxlICove1xuICAgICAgICAvKipcbiAgICAgICAgICogQGxhbmd1YWdlPWVuXG4gICAgICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuICdlbGVtJyBhbmQgYmUgd3JhcHBlZCBpbnRvIERyYXdhYmxlIG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW0gRWxlbWVudCB0byBiZSB0ZXN0ZWQuXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybiB0cnVlIGlmIGVsZW1lbnQgY2FuIGJlIHdyYXBwZWQgaW50byBEcmF3YWJsZSBlbGVtZW50LCBvdGhlcndpc2VzIHJldHVybiBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIGlzRHJhd2FibGU6IGZ1bmN0aW9uKGVsZW0pe1xuICAgICAgICAgICAgaWYoIWVsZW0gfHwgIWVsZW0udGFnTmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgdmFyIHRhZ05hbWUgPSBlbGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0YWdOYW1lID09PSBcImltZ1wiIHx8IHRhZ05hbWUgPT09IFwiY2FudmFzXCIgfHwgdGFnTmFtZSA9PT0gXCJ2aWRlb1wiO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhd2FibGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar EventMixin = __webpack_require__(4);\nvar Class = __webpack_require__(0);\n\n/**\n * @module runman/mediator\n * @requires hilo/event/EventMixin\n * @requires hilo/core/Class\n */\nvar mediator = Class.mix({}, EventMixin);\n\nmodule.exports = mediator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcnVubWFuL21lZGlhdG9yLmpzPzJlMTciXSwibmFtZXMiOlsiRXZlbnRNaXhpbiIsInJlcXVpcmUiLCJDbGFzcyIsIm1lZGlhdG9yIiwibWl4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQyxDQUFSLENBQWpCO0FBQ0EsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUMsQ0FBUixDQUFaOztBQUVBOzs7OztBQUtBLElBQUlFLFdBQVdELE1BQU1FLEdBQU4sQ0FBVSxFQUFWLEVBQWNKLFVBQWQsQ0FBZjs7QUFFQUssT0FBT0MsT0FBUCxHQUFpQkgsUUFBakIiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBFdmVudE1peGluID0gcmVxdWlyZSgnLi4vaGlsby9ldmVudC9FdmVudE1peGluJyk7XG52YXIgQ2xhc3MgPSByZXF1aXJlKCcuLi9oaWxvL2NvcmUvQ2xhc3MnKTtcblxuLyoqXG4gKiBAbW9kdWxlIHJ1bm1hbi9tZWRpYXRvclxuICogQHJlcXVpcmVzIGhpbG8vZXZlbnQvRXZlbnRNaXhpblxuICogQHJlcXVpcmVzIGhpbG8vY29yZS9DbGFzc1xuICovXG52YXIgbWVkaWF0b3IgPSBDbGFzcy5taXgoe30sIEV2ZW50TWl4aW4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lZGlhdG9yOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar game = __webpack_require__(11);\ngame.init(document.getElementById('stageContainer'));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZW50cnkuanM/NzBlZiJdLCJuYW1lcyI6WyJnYW1lIiwicmVxdWlyZSIsImluaXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLEVBQVIsQ0FBWDtBQUNBRCxLQUFLRSxJQUFMLENBQVVDLFNBQVNDLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQVYiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2FtZSA9IHJlcXVpcmUoJy4vcnVubWFuL2dhbWUnKTtcbmdhbWUuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhZ2VDb250YWluZXInKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar Stage = __webpack_require__(12);\nvar Ticker = __webpack_require__(17);\nvar Bitmap = __webpack_require__(18);\nvar mediator = __webpack_require__(9);\nvar resource = __webpack_require__(19);\nvar loading = __webpack_require__(23);\n\n/**\n * @module runman/game\n * @requires hilo/view/Stage\n * @requires hilo/util/Ticker\n * @requires hilo/view/Bitmap\n * @requires runman/mediator\n * @requires runman/resource\n * @requires runman/loading\n */\nvar game = {\n    init: function init(stageContainer) {\n        this.stageContainer = stageContainer;\n        this.bindEvent();\n        loading.start();\n        resource.load();\n    },\n    bindEvent: function bindEvent() {\n        var that = this;\n        mediator.on('resource:loaded', function (event) {\n            loading.loaded(event.detail.num);\n        });\n\n        mediator.on('resource:complete', function () {\n            that.initGame();\n        });\n    },\n    initGame: function initGame() {\n        this._initStage();\n        this._initScene();\n        mediator.fire('game:init');\n        this.ticker.start();\n    },\n    tick: function tick(dt) {\n        this.fish.x += 3;\n        if (this.fish.x > this.stage.width) {\n            this.fish.x = -this.fish.width;\n        }\n    },\n    _initStage: function _initStage() {\n        var stage = this.stage = new Stage({\n            width: 320,\n            height: 400,\n            renderType: 'canvas',\n            container: this.stageContainer\n        });\n\n        var ticker = this.ticker = new Ticker(60);\n        ticker.addTick(stage);\n        ticker.addTick(this);\n    },\n    _initScene: function _initScene() {\n        var fish = this.fish = new Bitmap({\n            x: 100,\n            y: 100,\n            image: resource.get('fish'),\n            rect: [0, 0, 174, 126],\n            onUpdate: function onUpdate() {\n                this.alpha += this.alphaSpeed;\n                if (this.alpha < 0) {\n                    this.alpha = 0;\n                    this.alphaSpeed *= -1;\n                } else if (this.alpha > 1) {\n                    this.alpha = 1;\n                    this.alphaSpeed *= -1;\n                }\n            }\n        });\n        fish.alphaSpeed = 0.02;\n\n        var bg = this.bg = new Bitmap({\n            image: resource.get('bg')\n        });\n\n        this.stage.addChild(bg, fish);\n    }\n};\n\nmodule.exports = game;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcnVubWFuL2dhbWUuanM/OWYzYSJdLCJuYW1lcyI6WyJTdGFnZSIsInJlcXVpcmUiLCJUaWNrZXIiLCJCaXRtYXAiLCJtZWRpYXRvciIsInJlc291cmNlIiwibG9hZGluZyIsImdhbWUiLCJpbml0Iiwic3RhZ2VDb250YWluZXIiLCJiaW5kRXZlbnQiLCJzdGFydCIsImxvYWQiLCJ0aGF0Iiwib24iLCJldmVudCIsImxvYWRlZCIsImRldGFpbCIsIm51bSIsImluaXRHYW1lIiwiX2luaXRTdGFnZSIsIl9pbml0U2NlbmUiLCJmaXJlIiwidGlja2VyIiwidGljayIsImR0IiwiZmlzaCIsIngiLCJzdGFnZSIsIndpZHRoIiwiaGVpZ2h0IiwicmVuZGVyVHlwZSIsImNvbnRhaW5lciIsImFkZFRpY2siLCJ5IiwiaW1hZ2UiLCJnZXQiLCJyZWN0Iiwib25VcGRhdGUiLCJhbHBoYSIsImFscGhhU3BlZWQiLCJiZyIsImFkZENoaWxkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQyxFQUFSLENBQVo7QUFDQSxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyxFQUFSLENBQWI7QUFDQSxJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQyxFQUFSLENBQWI7QUFDQSxJQUFJRyxXQUFXSCxtQkFBT0EsQ0FBQyxDQUFSLENBQWY7QUFDQSxJQUFJSSxXQUFXSixtQkFBT0EsQ0FBQyxFQUFSLENBQWY7QUFDQSxJQUFJSyxVQUFVTCxtQkFBT0EsQ0FBQyxFQUFSLENBQWQ7O0FBRUE7Ozs7Ozs7OztBQVNBLElBQUlNLE9BQU87QUFDUEMsVUFBSyxjQUFTQyxjQUFULEVBQXdCO0FBQ3pCLGFBQUtBLGNBQUwsR0FBc0JBLGNBQXRCO0FBQ0EsYUFBS0MsU0FBTDtBQUNBSixnQkFBUUssS0FBUjtBQUNBTixpQkFBU08sSUFBVDtBQUNILEtBTk07QUFPUEYsZUFBVSxxQkFBVTtBQUNoQixZQUFJRyxPQUFPLElBQVg7QUFDQVQsaUJBQVNVLEVBQVQsQ0FBWSxpQkFBWixFQUErQixVQUFTQyxLQUFULEVBQWU7QUFDMUNULG9CQUFRVSxNQUFSLENBQWVELE1BQU1FLE1BQU4sQ0FBYUMsR0FBNUI7QUFDSCxTQUZEOztBQUlBZCxpQkFBU1UsRUFBVCxDQUFZLG1CQUFaLEVBQWlDLFlBQVU7QUFDdkNELGlCQUFLTSxRQUFMO0FBQ0gsU0FGRDtBQUdILEtBaEJNO0FBaUJQQSxjQUFTLG9CQUFVO0FBQ2YsYUFBS0MsVUFBTDtBQUNBLGFBQUtDLFVBQUw7QUFDQWpCLGlCQUFTa0IsSUFBVCxDQUFjLFdBQWQ7QUFDQSxhQUFLQyxNQUFMLENBQVlaLEtBQVo7QUFDSCxLQXRCTTtBQXVCUGEsVUFBSyxjQUFTQyxFQUFULEVBQVk7QUFDYixhQUFLQyxJQUFMLENBQVVDLENBQVYsSUFBZSxDQUFmO0FBQ0EsWUFBRyxLQUFLRCxJQUFMLENBQVVDLENBQVYsR0FBYyxLQUFLQyxLQUFMLENBQVdDLEtBQTVCLEVBQWtDO0FBQzlCLGlCQUFLSCxJQUFMLENBQVVDLENBQVYsR0FBYyxDQUFDLEtBQUtELElBQUwsQ0FBVUcsS0FBekI7QUFDSDtBQUNKLEtBNUJNO0FBNkJQVCxnQkFBVyxzQkFBVTtBQUNqQixZQUFJUSxRQUFRLEtBQUtBLEtBQUwsR0FBYSxJQUFJNUIsS0FBSixDQUFVO0FBQy9CNkIsbUJBQU0sR0FEeUI7QUFFL0JDLG9CQUFPLEdBRndCO0FBRy9CQyx3QkFBVyxRQUhvQjtBQUkvQkMsdUJBQVUsS0FBS3ZCO0FBSmdCLFNBQVYsQ0FBekI7O0FBT0EsWUFBSWMsU0FBUyxLQUFLQSxNQUFMLEdBQWMsSUFBSXJCLE1BQUosQ0FBVyxFQUFYLENBQTNCO0FBQ0FxQixlQUFPVSxPQUFQLENBQWVMLEtBQWY7QUFDQUwsZUFBT1UsT0FBUCxDQUFlLElBQWY7QUFDSCxLQXhDTTtBQXlDUFosZ0JBQVcsc0JBQVU7QUFDakIsWUFBSUssT0FBTyxLQUFLQSxJQUFMLEdBQVksSUFBSXZCLE1BQUosQ0FBVztBQUM5QndCLGVBQUUsR0FENEI7QUFFOUJPLGVBQUUsR0FGNEI7QUFHOUJDLG1CQUFNOUIsU0FBUytCLEdBQVQsQ0FBYSxNQUFiLENBSHdCO0FBSTlCQyxrQkFBSyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sR0FBUCxFQUFZLEdBQVosQ0FKeUI7QUFLOUJDLHNCQUFTLG9CQUFVO0FBQ2YscUJBQUtDLEtBQUwsSUFBYyxLQUFLQyxVQUFuQjtBQUNBLG9CQUFHLEtBQUtELEtBQUwsR0FBYSxDQUFoQixFQUFrQjtBQUNkLHlCQUFLQSxLQUFMLEdBQWEsQ0FBYjtBQUNBLHlCQUFLQyxVQUFMLElBQW1CLENBQUMsQ0FBcEI7QUFDSCxpQkFIRCxNQUlLLElBQUcsS0FBS0QsS0FBTCxHQUFhLENBQWhCLEVBQWtCO0FBQ25CLHlCQUFLQSxLQUFMLEdBQWEsQ0FBYjtBQUNBLHlCQUFLQyxVQUFMLElBQW1CLENBQUMsQ0FBcEI7QUFDSDtBQUNKO0FBZjZCLFNBQVgsQ0FBdkI7QUFpQkFkLGFBQUtjLFVBQUwsR0FBa0IsSUFBbEI7O0FBRUEsWUFBSUMsS0FBSyxLQUFLQSxFQUFMLEdBQVUsSUFBSXRDLE1BQUosQ0FBVztBQUMxQmdDLG1CQUFNOUIsU0FBUytCLEdBQVQsQ0FBYSxJQUFiO0FBRG9CLFNBQVgsQ0FBbkI7O0FBSUEsYUFBS1IsS0FBTCxDQUFXYyxRQUFYLENBQW9CRCxFQUFwQixFQUF3QmYsSUFBeEI7QUFDSDtBQWxFTSxDQUFYOztBQXFFQWlCLE9BQU9DLE9BQVAsR0FBaUJyQyxJQUFqQiIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBTdGFnZSA9IHJlcXVpcmUoJy4uL2hpbG8vdmlldy9TdGFnZScpO1xudmFyIFRpY2tlciA9IHJlcXVpcmUoJy4uL2hpbG8vdXRpbC9UaWNrZXInKTtcbnZhciBCaXRtYXAgPSByZXF1aXJlKCcuLi9oaWxvL3ZpZXcvQml0bWFwJyk7XG52YXIgbWVkaWF0b3IgPSByZXF1aXJlKCcuL21lZGlhdG9yJyk7XG52YXIgcmVzb3VyY2UgPSByZXF1aXJlKCcuL3Jlc291cmNlJyk7XG52YXIgbG9hZGluZyA9IHJlcXVpcmUoJy4vbG9hZGluZycpO1xuXG4vKipcbiAqIEBtb2R1bGUgcnVubWFuL2dhbWVcbiAqIEByZXF1aXJlcyBoaWxvL3ZpZXcvU3RhZ2VcbiAqIEByZXF1aXJlcyBoaWxvL3V0aWwvVGlja2VyXG4gKiBAcmVxdWlyZXMgaGlsby92aWV3L0JpdG1hcFxuICogQHJlcXVpcmVzIHJ1bm1hbi9tZWRpYXRvclxuICogQHJlcXVpcmVzIHJ1bm1hbi9yZXNvdXJjZVxuICogQHJlcXVpcmVzIHJ1bm1hbi9sb2FkaW5nXG4gKi9cbnZhciBnYW1lID0ge1xuICAgIGluaXQ6ZnVuY3Rpb24oc3RhZ2VDb250YWluZXIpe1xuICAgICAgICB0aGlzLnN0YWdlQ29udGFpbmVyID0gc3RhZ2VDb250YWluZXI7XG4gICAgICAgIHRoaXMuYmluZEV2ZW50KCk7XG4gICAgICAgIGxvYWRpbmcuc3RhcnQoKTtcbiAgICAgICAgcmVzb3VyY2UubG9hZCgpO1xuICAgIH0sXG4gICAgYmluZEV2ZW50OmZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgbWVkaWF0b3Iub24oJ3Jlc291cmNlOmxvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIGxvYWRpbmcubG9hZGVkKGV2ZW50LmRldGFpbC5udW0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBtZWRpYXRvci5vbigncmVzb3VyY2U6Y29tcGxldGUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGhhdC5pbml0R2FtZSgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGluaXRHYW1lOmZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuX2luaXRTdGFnZSgpO1xuICAgICAgICB0aGlzLl9pbml0U2NlbmUoKTtcbiAgICAgICAgbWVkaWF0b3IuZmlyZSgnZ2FtZTppbml0Jyk7XG4gICAgICAgIHRoaXMudGlja2VyLnN0YXJ0KCk7XG4gICAgfSxcbiAgICB0aWNrOmZ1bmN0aW9uKGR0KXtcbiAgICAgICAgdGhpcy5maXNoLnggKz0gMztcbiAgICAgICAgaWYodGhpcy5maXNoLnggPiB0aGlzLnN0YWdlLndpZHRoKXtcbiAgICAgICAgICAgIHRoaXMuZmlzaC54ID0gLXRoaXMuZmlzaC53aWR0aDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2luaXRTdGFnZTpmdW5jdGlvbigpe1xuICAgICAgICB2YXIgc3RhZ2UgPSB0aGlzLnN0YWdlID0gbmV3IFN0YWdlKHtcbiAgICAgICAgICAgIHdpZHRoOjMyMCxcbiAgICAgICAgICAgIGhlaWdodDo0MDAsXG4gICAgICAgICAgICByZW5kZXJUeXBlOidjYW52YXMnLFxuICAgICAgICAgICAgY29udGFpbmVyOnRoaXMuc3RhZ2VDb250YWluZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHRpY2tlciA9IHRoaXMudGlja2VyID0gbmV3IFRpY2tlcig2MCk7XG4gICAgICAgIHRpY2tlci5hZGRUaWNrKHN0YWdlKTtcbiAgICAgICAgdGlja2VyLmFkZFRpY2sodGhpcyk7XG4gICAgfSxcbiAgICBfaW5pdFNjZW5lOmZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBmaXNoID0gdGhpcy5maXNoID0gbmV3IEJpdG1hcCh7XG4gICAgICAgICAgICB4OjEwMCxcbiAgICAgICAgICAgIHk6MTAwLFxuICAgICAgICAgICAgaW1hZ2U6cmVzb3VyY2UuZ2V0KCdmaXNoJyksXG4gICAgICAgICAgICByZWN0OlswLCAwLCAxNzQsIDEyNl0sXG4gICAgICAgICAgICBvblVwZGF0ZTpmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRoaXMuYWxwaGEgKz0gdGhpcy5hbHBoYVNwZWVkO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuYWxwaGEgPCAwKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHBoYSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxwaGFTcGVlZCAqPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLmFscGhhID4gMSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFscGhhU3BlZWQgKj0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZmlzaC5hbHBoYVNwZWVkID0gMC4wMjtcblxuICAgICAgICB2YXIgYmcgPSB0aGlzLmJnID0gbmV3IEJpdG1hcCh7XG4gICAgICAgICAgICBpbWFnZTpyZXNvdXJjZS5nZXQoJ2JnJylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdGFnZS5hZGRDaGlsZChiZywgZmlzaCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnYW1lOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Hilo = __webpack_require__(1);\nvar Class = __webpack_require__(0);\nvar Container = __webpack_require__(13);\nvar CanvasRenderer = __webpack_require__(14);\nvar DOMRenderer = __webpack_require__(15);\nvar WebGLRenderer = __webpack_require__(16);\nvar browser = __webpack_require__(3);\nvar util = __webpack_require__(2);\n\n/**\n * @language=en\n * Demo:\n * <pre>\n * var stage = new Hilo.Stage({\n *     renderType:'canvas',\n *     container: containerElement,\n *     width: 320,\n *     height: 480\n * });\n * </pre>\n * @class Stage is the root of all visual object tree, any visual object will be render only after being added to Stage or any children elements of Stage. Normally, every hilo application start with an stage instance.\n * @augments Container\n * @param {Object} properties Properties parameters for the object. Includes all writable properties of this class. Some important like:\n * <ul>\n * <li><b>container</b>:String|HTMLElement - Assign the parent container element of the Stage in the page. It should be a dom container or an id. If this parameter is not given and canvas isn't in the dom tree, you should add the stage vanvas into the dom tree yourself, otherwise Stage will not render. optional.</li>\n * <li><b>renderType</b>:String - Renering way: canvas|dom|webgl，default value is canvas, optional.</li>\n * <li><b>canvas</b>:String|HTMLCanvasElement|HTMLElement - 指定舞台所对应的画布元素。它是一个canvas或普通的div，也可以传入元素的id。若为canvas，则使用canvas来渲染所有对象，否则使用dom+css来渲染。可选。</li>\n * <li><b>width</b>:Number</li> - The width of the Stage, default value is the width of canvas, optional.\n * <li><b>height</b>:Number</li> - The height of the Stage, default value is the height of canvas, optional.\n * <li><b>paused</b>:Boolean</li> - Whether stop rendering the Stage, default value is false, optional.\n * </ul>\n * @module hilo/view/Stage\n * @requires hilo/core/Hilo\n * @requires hilo/core/Class\n * @requires hilo/view/Container\n * @requires hilo/renderer/CanvasRenderer\n * @requires hilo/renderer/DOMRenderer\n * @requires hilo/renderer/WebGLRenderer\n * @requires hilo/util/browser\n * @requires hilo/util/util\n * @property {HTMLCanvasElement|HTMLElement} canvas The canvas the Stage is related to. It can be a canvas or a div element, readonly!\n * @property {Renderer} renderer Stage renderer, readonly!\n * @property {Boolean} paused Paused Stage rendering.\n * @property {Object} viewport Rendering area of the Stage. Including properties like: left, top, width, height. readonly!\n */\nvar Stage = Class.create( /** @lends Stage.prototype */{\n    Extends: Container,\n    constructor: function constructor(properties) {\n        properties = properties || {};\n        this.id = this.id || properties.id || Hilo.getUid('Stage');\n        Stage.superclass.constructor.call(this, properties);\n\n        this._initRenderer(properties);\n\n        //init size\n        var width = this.width,\n            height = this.height,\n            viewport = this.updateViewport();\n        if (!properties.width) width = viewport && viewport.width || 320;\n        if (!properties.height) height = viewport && viewport.height || 480;\n        this.resize(width, height, true);\n    },\n\n    canvas: null,\n    renderer: null,\n    paused: false,\n    viewport: null,\n\n    /**\n     * @language=en\n     * @private\n     */\n    _initRenderer: function _initRenderer(properties) {\n        var canvas = properties.canvas;\n        var container = properties.container;\n        var renderType = properties.renderType || 'canvas';\n\n        if (typeof canvas === 'string') canvas = Hilo.getElement(canvas);\n        if (typeof container === 'string') container = Hilo.getElement(container);\n\n        if (!canvas) {\n            var canvasTagName = renderType === 'dom' ? 'div' : 'canvas';\n            canvas = Hilo.createElement(canvasTagName, {\n                style: {\n                    position: 'absolute'\n                }\n            });\n        } else if (!canvas.getContext) {\n            renderType = 'dom';\n        }\n\n        this.canvas = canvas;\n        if (container) container.appendChild(canvas);\n\n        var props = { canvas: canvas, stage: this };\n        switch (renderType) {\n            case 'dom':\n                this.renderer = new DOMRenderer(props);\n                break;\n            case 'webgl':\n                if (WebGLRenderer.isSupport()) {\n                    this.renderer = new WebGLRenderer(props);\n                } else {\n                    this.renderer = new CanvasRenderer(props);\n                }\n                break;\n            case 'canvas':\n            /* falls through */\n            default:\n                this.renderer = new CanvasRenderer(props);\n                break;\n        }\n    },\n\n    /**\n     * @language=en\n     * Add Stage canvas to DOM container. Note: this function overwrite View.addTo function.\n     * @param {HTMLElement} domElement An dom element.\n     * @returns {Stage} The Stage Object, chained call supported.\n     */\n    addTo: function addTo(domElement) {\n        var canvas = this.canvas;\n        if (canvas.parentNode !== domElement) {\n            domElement.appendChild(canvas);\n        }\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Invoke tick function and Stage will update and render. Developer may not need to use this funciton.\n     * @param {Number} delta The time had pass between this tick invoke and last tick invoke.\n     */\n    tick: function tick(delta) {\n        if (!this.paused) {\n            this._render(this.renderer, delta);\n        }\n    },\n\n    /**\n     * @language=en\n     * Turn on/off Stage response to DOM event. To make visual objects on the Stage interactive, use this function to turn on Stage's responses to events.\n     * @param {String|Array} type The event name or array that need to turn on/off.\n     * @param {Boolean} enabled Whether turn on or off the response method of stage DOM event. If not provided, default value is true.\n     * @returns {Stage} The Stage Object, chained call supported.\n     */\n    enableDOMEvent: function enableDOMEvent(types, enabled) {\n        var me = this,\n            canvas = me.canvas,\n            handler = me._domListener || (me._domListener = function (e) {\n            me._onDOMEvent(e);\n        });\n\n        types = typeof types === 'string' ? [types] : types;\n        enabled = enabled !== false;\n\n        for (var i = 0; i < types.length; i++) {\n            var type = types[i];\n\n            if (enabled) {\n                canvas.addEventListener(type, handler, false);\n            } else {\n                canvas.removeEventListener(type, handler);\n            }\n        }\n\n        return me;\n    },\n\n    /**\n     * @language=en\n     * DOM events handler function. This funciton will invoke events onto the visual object, which is on the position of the coordinate where the events is invoked.\n     * @private\n     */\n    _onDOMEvent: function _onDOMEvent(e) {\n        var type = e.type,\n            event = e,\n            isTouch = type.indexOf('touch') == 0;\n\n        //calculate stageX/stageY\n        var posObj = e;\n        if (isTouch) {\n            var touches = e.touches,\n                changedTouches = e.changedTouches;\n            posObj = touches && touches.length ? touches[0] : changedTouches && changedTouches.length ? changedTouches[0] : null;\n        }\n\n        var x = posObj.pageX || posObj.clientX,\n            y = posObj.pageY || posObj.clientY,\n            viewport = this.viewport || this.updateViewport();\n\n        event.stageX = x = (x - viewport.left) / this.scaleX;\n        event.stageY = y = (y - viewport.top) / this.scaleY;\n\n        //鼠标事件需要阻止冒泡方法 Prevent bubbling on mouse events.\n        event.stopPropagation = function () {\n            this._stopPropagationed = true;\n        };\n\n        var obj = this.getViewAtPoint(x, y, true, false, true) || this,\n            canvas = this.canvas,\n            target = this._eventTarget;\n\n        //fire mouseout/touchout event for last event target\n        var leave = type === 'mouseout';\n        //当obj和target不同 且obj不是target的子元素时才触发out事件 fire out event when obj and target isn't the same as well as obj is not a child element to target.\n        if (target && (target != obj && (!target.contains || !target.contains(obj)) || leave)) {\n            var out = type === 'touchmove' ? 'touchout' : type === 'mousemove' || leave || !obj ? 'mouseout' : null;\n            if (out) {\n                var outEvent = util.copy({}, event);\n                outEvent.type = out;\n                outEvent.eventTarget = target;\n                target._fireMouseEvent(outEvent);\n            }\n            event.lastEventTarget = target;\n            this._eventTarget = null;\n        }\n\n        //fire event for current view\n        if (obj && obj.pointerEnabled && type !== 'mouseout') {\n            event.eventTarget = this._eventTarget = obj;\n            obj._fireMouseEvent(event);\n        }\n\n        //set cursor for current view\n        if (!isTouch) {\n            var cursor = obj && obj.pointerEnabled && obj.useHandCursor ? 'pointer' : '';\n            canvas.style.cursor = cursor;\n        }\n\n        //fix android: `touchmove` fires only once\n        if (browser.android && type === 'touchmove') {\n            e.preventDefault();\n        }\n    },\n\n    /**\n     * @language=en\n     * Update the viewport (rendering area) which Stage show on the page. Invoke this function to update viewport when Stage canvas changes border, margin or padding properties.\n     * @returns {Object} The visible area of the Stage (the viewport property).\n     */\n    updateViewport: function updateViewport() {\n        var canvas = this.canvas,\n            viewport = null;\n        if (canvas.parentNode) {\n            viewport = this.viewport = Hilo.getElementRect(canvas);\n        }\n        return viewport;\n    },\n\n    /**\n     * @language=en\n     * Resize the Stage.\n     * @param {Number} width The width of the new Stage.\n     * @param {Number} height The height of the new Stage.\n     * @param {Boolean} forceResize Whether forced to resize the Stage, means no matter the size of the Stage, force to change the size to keep Stage, canvas and window act at the same time.\n     */\n    resize: function resize(width, height, forceResize) {\n        if (forceResize || this.width !== width || this.height !== height) {\n            this.width = width;\n            this.height = height;\n            this.renderer.resize(width, height);\n            this.updateViewport();\n        }\n    }\n\n});\n\nmodule.exports = Stage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby92aWV3L1N0YWdlLmpzP2NiN2UiXSwibmFtZXMiOlsiSGlsbyIsInJlcXVpcmUiLCJDbGFzcyIsIkNvbnRhaW5lciIsIkNhbnZhc1JlbmRlcmVyIiwiRE9NUmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYnJvd3NlciIsInV0aWwiLCJTdGFnZSIsImNyZWF0ZSIsIkV4dGVuZHMiLCJjb25zdHJ1Y3RvciIsInByb3BlcnRpZXMiLCJpZCIsImdldFVpZCIsInN1cGVyY2xhc3MiLCJjYWxsIiwiX2luaXRSZW5kZXJlciIsIndpZHRoIiwiaGVpZ2h0Iiwidmlld3BvcnQiLCJ1cGRhdGVWaWV3cG9ydCIsInJlc2l6ZSIsImNhbnZhcyIsInJlbmRlcmVyIiwicGF1c2VkIiwiY29udGFpbmVyIiwicmVuZGVyVHlwZSIsImdldEVsZW1lbnQiLCJjYW52YXNUYWdOYW1lIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwicG9zaXRpb24iLCJnZXRDb250ZXh0IiwiYXBwZW5kQ2hpbGQiLCJwcm9wcyIsInN0YWdlIiwiaXNTdXBwb3J0IiwiYWRkVG8iLCJkb21FbGVtZW50IiwicGFyZW50Tm9kZSIsInRpY2siLCJkZWx0YSIsIl9yZW5kZXIiLCJlbmFibGVET01FdmVudCIsInR5cGVzIiwiZW5hYmxlZCIsIm1lIiwiaGFuZGxlciIsIl9kb21MaXN0ZW5lciIsImUiLCJfb25ET01FdmVudCIsImkiLCJsZW5ndGgiLCJ0eXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudCIsImlzVG91Y2giLCJpbmRleE9mIiwicG9zT2JqIiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwieCIsInBhZ2VYIiwiY2xpZW50WCIsInkiLCJwYWdlWSIsImNsaWVudFkiLCJzdGFnZVgiLCJsZWZ0Iiwic2NhbGVYIiwic3RhZ2VZIiwidG9wIiwic2NhbGVZIiwic3RvcFByb3BhZ2F0aW9uIiwiX3N0b3BQcm9wYWdhdGlvbmVkIiwib2JqIiwiZ2V0Vmlld0F0UG9pbnQiLCJ0YXJnZXQiLCJfZXZlbnRUYXJnZXQiLCJsZWF2ZSIsImNvbnRhaW5zIiwib3V0Iiwib3V0RXZlbnQiLCJjb3B5IiwiZXZlbnRUYXJnZXQiLCJfZmlyZU1vdXNlRXZlbnQiLCJsYXN0RXZlbnRUYXJnZXQiLCJwb2ludGVyRW5hYmxlZCIsImN1cnNvciIsInVzZUhhbmRDdXJzb3IiLCJhbmRyb2lkIiwicHJldmVudERlZmF1bHQiLCJnZXRFbGVtZW50UmVjdCIsImZvcmNlUmVzaXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7QUFLQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQyxDQUFSLENBQVg7QUFDQSxJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQyxDQUFSLENBQVo7QUFDQSxJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQyxFQUFSLENBQWhCO0FBQ0EsSUFBSUcsaUJBQWlCSCxtQkFBT0EsQ0FBQyxFQUFSLENBQXJCO0FBQ0EsSUFBSUksY0FBY0osbUJBQU9BLENBQUMsRUFBUixDQUFsQjtBQUNBLElBQUlLLGdCQUFnQkwsbUJBQU9BLENBQUMsRUFBUixDQUFwQjtBQUNBLElBQUlNLFVBQVVOLG1CQUFPQSxDQUFDLENBQVIsQ0FBZDtBQUNBLElBQUlPLE9BQU9QLG1CQUFPQSxDQUFDLENBQVIsQ0FBWDs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0NBLElBQUlRLFFBQVFQLE1BQU1RLE1BQU4sRUFBYSw2QkFBNkI7QUFDbERDLGFBQVNSLFNBRHlDO0FBRWxEUyxpQkFBYSxxQkFBU0MsVUFBVCxFQUFvQjtBQUM3QkEscUJBQWFBLGNBQWMsRUFBM0I7QUFDQSxhQUFLQyxFQUFMLEdBQVUsS0FBS0EsRUFBTCxJQUFXRCxXQUFXQyxFQUF0QixJQUE0QmQsS0FBS2UsTUFBTCxDQUFZLE9BQVosQ0FBdEM7QUFDQU4sY0FBTU8sVUFBTixDQUFpQkosV0FBakIsQ0FBNkJLLElBQTdCLENBQWtDLElBQWxDLEVBQXdDSixVQUF4Qzs7QUFFQSxhQUFLSyxhQUFMLENBQW1CTCxVQUFuQjs7QUFFQTtBQUNBLFlBQUlNLFFBQVEsS0FBS0EsS0FBakI7QUFBQSxZQUF3QkMsU0FBUyxLQUFLQSxNQUF0QztBQUFBLFlBQ0lDLFdBQVcsS0FBS0MsY0FBTCxFQURmO0FBRUEsWUFBRyxDQUFDVCxXQUFXTSxLQUFmLEVBQXNCQSxRQUFTRSxZQUFZQSxTQUFTRixLQUF0QixJQUFnQyxHQUF4QztBQUN0QixZQUFHLENBQUNOLFdBQVdPLE1BQWYsRUFBdUJBLFNBQVVDLFlBQVlBLFNBQVNELE1BQXRCLElBQWlDLEdBQTFDO0FBQ3ZCLGFBQUtHLE1BQUwsQ0FBWUosS0FBWixFQUFtQkMsTUFBbkIsRUFBMkIsSUFBM0I7QUFDSCxLQWZpRDs7QUFpQmxESSxZQUFRLElBakIwQztBQWtCbERDLGNBQVUsSUFsQndDO0FBbUJsREMsWUFBUSxLQW5CMEM7QUFvQmxETCxjQUFVLElBcEJ3Qzs7QUFzQmxEOzs7O0FBSUFILG1CQUFlLHVCQUFTTCxVQUFULEVBQW9CO0FBQy9CLFlBQUlXLFNBQVNYLFdBQVdXLE1BQXhCO0FBQ0EsWUFBSUcsWUFBWWQsV0FBV2MsU0FBM0I7QUFDQSxZQUFJQyxhQUFhZixXQUFXZSxVQUFYLElBQXVCLFFBQXhDOztBQUVBLFlBQUcsT0FBT0osTUFBUCxLQUFrQixRQUFyQixFQUErQkEsU0FBU3hCLEtBQUs2QixVQUFMLENBQWdCTCxNQUFoQixDQUFUO0FBQy9CLFlBQUcsT0FBT0csU0FBUCxLQUFxQixRQUF4QixFQUFrQ0EsWUFBWTNCLEtBQUs2QixVQUFMLENBQWdCRixTQUFoQixDQUFaOztBQUVsQyxZQUFHLENBQUNILE1BQUosRUFBVztBQUNQLGdCQUFJTSxnQkFBZ0JGLGVBQWUsS0FBZixHQUFxQixLQUFyQixHQUEyQixRQUEvQztBQUNBSixxQkFBU3hCLEtBQUsrQixhQUFMLENBQW1CRCxhQUFuQixFQUFrQztBQUN2Q0UsdUJBQU87QUFDSEMsOEJBQVU7QUFEUDtBQURnQyxhQUFsQyxDQUFUO0FBS0gsU0FQRCxNQVFLLElBQUcsQ0FBQ1QsT0FBT1UsVUFBWCxFQUFzQjtBQUN2Qk4seUJBQWEsS0FBYjtBQUNIOztBQUVELGFBQUtKLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFlBQUdHLFNBQUgsRUFBY0EsVUFBVVEsV0FBVixDQUFzQlgsTUFBdEI7O0FBRWQsWUFBSVksUUFBUSxFQUFDWixRQUFPQSxNQUFSLEVBQWdCYSxPQUFNLElBQXRCLEVBQVo7QUFDQSxnQkFBT1QsVUFBUDtBQUNJLGlCQUFLLEtBQUw7QUFDSSxxQkFBS0gsUUFBTCxHQUFnQixJQUFJcEIsV0FBSixDQUFnQitCLEtBQWhCLENBQWhCO0FBQ0E7QUFDSixpQkFBSyxPQUFMO0FBQ0ksb0JBQUc5QixjQUFjZ0MsU0FBZCxFQUFILEVBQTZCO0FBQ3pCLHlCQUFLYixRQUFMLEdBQWdCLElBQUluQixhQUFKLENBQWtCOEIsS0FBbEIsQ0FBaEI7QUFDSCxpQkFGRCxNQUdJO0FBQ0EseUJBQUtYLFFBQUwsR0FBZ0IsSUFBSXJCLGNBQUosQ0FBbUJnQyxLQUFuQixDQUFoQjtBQUNIO0FBQ0Q7QUFDSixpQkFBSyxRQUFMO0FBQ0g7QUFDRztBQUNJLHFCQUFLWCxRQUFMLEdBQWdCLElBQUlyQixjQUFKLENBQW1CZ0MsS0FBbkIsQ0FBaEI7QUFDQTtBQWhCUjtBQWtCSCxLQXBFaUQ7O0FBc0VsRDs7Ozs7O0FBTUFHLFdBQU8sZUFBU0MsVUFBVCxFQUFvQjtBQUN2QixZQUFJaEIsU0FBUyxLQUFLQSxNQUFsQjtBQUNBLFlBQUdBLE9BQU9pQixVQUFQLEtBQXNCRCxVQUF6QixFQUFvQztBQUNoQ0EsdUJBQVdMLFdBQVgsQ0FBdUJYLE1BQXZCO0FBQ0g7QUFDRCxlQUFPLElBQVA7QUFDSCxLQWxGaUQ7O0FBb0ZsRDs7Ozs7QUFLQWtCLFVBQU0sY0FBU0MsS0FBVCxFQUFlO0FBQ2pCLFlBQUcsQ0FBQyxLQUFLakIsTUFBVCxFQUFnQjtBQUNaLGlCQUFLa0IsT0FBTCxDQUFhLEtBQUtuQixRQUFsQixFQUE0QmtCLEtBQTVCO0FBQ0g7QUFDSixLQTdGaUQ7O0FBK0ZsRDs7Ozs7OztBQU9BRSxvQkFBZ0Isd0JBQVNDLEtBQVQsRUFBZ0JDLE9BQWhCLEVBQXdCO0FBQ3BDLFlBQUlDLEtBQUssSUFBVDtBQUFBLFlBQ0l4QixTQUFTd0IsR0FBR3hCLE1BRGhCO0FBQUEsWUFFSXlCLFVBQVVELEdBQUdFLFlBQUgsS0FBb0JGLEdBQUdFLFlBQUgsR0FBa0IsVUFBU0MsQ0FBVCxFQUFXO0FBQUNILGVBQUdJLFdBQUgsQ0FBZUQsQ0FBZjtBQUFtQixTQUFyRSxDQUZkOztBQUlBTCxnQkFBUSxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLEdBQTRCLENBQUNBLEtBQUQsQ0FBNUIsR0FBc0NBLEtBQTlDO0FBQ0FDLGtCQUFVQSxZQUFZLEtBQXRCOztBQUVBLGFBQUksSUFBSU0sSUFBSSxDQUFaLEVBQWVBLElBQUlQLE1BQU1RLE1BQXpCLEVBQWlDRCxHQUFqQyxFQUFxQztBQUNqQyxnQkFBSUUsT0FBT1QsTUFBTU8sQ0FBTixDQUFYOztBQUVBLGdCQUFHTixPQUFILEVBQVc7QUFDUHZCLHVCQUFPZ0MsZ0JBQVAsQ0FBd0JELElBQXhCLEVBQThCTixPQUE5QixFQUF1QyxLQUF2QztBQUNILGFBRkQsTUFFSztBQUNEekIsdUJBQU9pQyxtQkFBUCxDQUEyQkYsSUFBM0IsRUFBaUNOLE9BQWpDO0FBQ0g7QUFDSjs7QUFFRCxlQUFPRCxFQUFQO0FBQ0gsS0F6SGlEOztBQTJIbEQ7Ozs7O0FBS0FJLGlCQUFhLHFCQUFTRCxDQUFULEVBQVc7QUFDcEIsWUFBSUksT0FBT0osRUFBRUksSUFBYjtBQUFBLFlBQW1CRyxRQUFRUCxDQUEzQjtBQUFBLFlBQThCUSxVQUFVSixLQUFLSyxPQUFMLENBQWEsT0FBYixLQUF5QixDQUFqRTs7QUFFQTtBQUNBLFlBQUlDLFNBQVNWLENBQWI7QUFDQSxZQUFHUSxPQUFILEVBQVc7QUFDUCxnQkFBSUcsVUFBVVgsRUFBRVcsT0FBaEI7QUFBQSxnQkFBeUJDLGlCQUFpQlosRUFBRVksY0FBNUM7QUFDQUYscUJBQVVDLFdBQVdBLFFBQVFSLE1BQXBCLEdBQThCUSxRQUFRLENBQVIsQ0FBOUIsR0FDQ0Msa0JBQWtCQSxlQUFlVCxNQUFsQyxHQUE0Q1MsZUFBZSxDQUFmLENBQTVDLEdBQWdFLElBRHpFO0FBRUg7O0FBRUQsWUFBSUMsSUFBSUgsT0FBT0ksS0FBUCxJQUFnQkosT0FBT0ssT0FBL0I7QUFBQSxZQUF3Q0MsSUFBSU4sT0FBT08sS0FBUCxJQUFnQlAsT0FBT1EsT0FBbkU7QUFBQSxZQUNJaEQsV0FBVyxLQUFLQSxRQUFMLElBQWlCLEtBQUtDLGNBQUwsRUFEaEM7O0FBR0FvQyxjQUFNWSxNQUFOLEdBQWVOLElBQUksQ0FBQ0EsSUFBSTNDLFNBQVNrRCxJQUFkLElBQXNCLEtBQUtDLE1BQTlDO0FBQ0FkLGNBQU1lLE1BQU4sR0FBZU4sSUFBSSxDQUFDQSxJQUFJOUMsU0FBU3FELEdBQWQsSUFBcUIsS0FBS0MsTUFBN0M7O0FBRUE7QUFDQWpCLGNBQU1rQixlQUFOLEdBQXdCLFlBQVU7QUFDOUIsaUJBQUtDLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0gsU0FGRDs7QUFJQSxZQUFJQyxNQUFNLEtBQUtDLGNBQUwsQ0FBb0JmLENBQXBCLEVBQXVCRyxDQUF2QixFQUEwQixJQUExQixFQUFnQyxLQUFoQyxFQUF1QyxJQUF2QyxLQUE4QyxJQUF4RDtBQUFBLFlBQ0kzQyxTQUFTLEtBQUtBLE1BRGxCO0FBQUEsWUFDMEJ3RCxTQUFTLEtBQUtDLFlBRHhDOztBQUdBO0FBQ0EsWUFBSUMsUUFBUTNCLFNBQVMsVUFBckI7QUFDQTtBQUNBLFlBQUd5QixXQUFXQSxVQUFVRixHQUFWLEtBQWtCLENBQUNFLE9BQU9HLFFBQVIsSUFBb0IsQ0FBQ0gsT0FBT0csUUFBUCxDQUFnQkwsR0FBaEIsQ0FBdkMsS0FBK0RJLEtBQTFFLENBQUgsRUFBb0Y7QUFDaEYsZ0JBQUlFLE1BQU83QixTQUFTLFdBQVYsR0FBeUIsVUFBekIsR0FDQ0EsU0FBUyxXQUFULElBQXdCMkIsS0FBeEIsSUFBaUMsQ0FBQ0osR0FBbkMsR0FBMEMsVUFBMUMsR0FBdUQsSUFEakU7QUFFQSxnQkFBR00sR0FBSCxFQUFRO0FBQ0osb0JBQUlDLFdBQVc3RSxLQUFLOEUsSUFBTCxDQUFVLEVBQVYsRUFBYzVCLEtBQWQsQ0FBZjtBQUNBMkIseUJBQVM5QixJQUFULEdBQWdCNkIsR0FBaEI7QUFDQUMseUJBQVNFLFdBQVQsR0FBdUJQLE1BQXZCO0FBQ0FBLHVCQUFPUSxlQUFQLENBQXVCSCxRQUF2QjtBQUNIO0FBQ0QzQixrQkFBTStCLGVBQU4sR0FBd0JULE1BQXhCO0FBQ0EsaUJBQUtDLFlBQUwsR0FBb0IsSUFBcEI7QUFDSDs7QUFFRDtBQUNBLFlBQUdILE9BQU9BLElBQUlZLGNBQVgsSUFBNkJuQyxTQUFTLFVBQXpDLEVBQW9EO0FBQ2hERyxrQkFBTTZCLFdBQU4sR0FBb0IsS0FBS04sWUFBTCxHQUFvQkgsR0FBeEM7QUFDQUEsZ0JBQUlVLGVBQUosQ0FBb0I5QixLQUFwQjtBQUNIOztBQUVEO0FBQ0EsWUFBRyxDQUFDQyxPQUFKLEVBQVk7QUFDUixnQkFBSWdDLFNBQVViLE9BQU9BLElBQUlZLGNBQVgsSUFBNkJaLElBQUljLGFBQWxDLEdBQW1ELFNBQW5ELEdBQStELEVBQTVFO0FBQ0FwRSxtQkFBT1EsS0FBUCxDQUFhMkQsTUFBYixHQUFzQkEsTUFBdEI7QUFDSDs7QUFFRDtBQUNBLFlBQUdwRixRQUFRc0YsT0FBUixJQUFtQnRDLFNBQVMsV0FBL0IsRUFBMkM7QUFDdkNKLGNBQUUyQyxjQUFGO0FBQ0g7QUFDSixLQXpMaUQ7O0FBMkxsRDs7Ozs7QUFLQXhFLG9CQUFnQiwwQkFBVTtBQUN0QixZQUFJRSxTQUFTLEtBQUtBLE1BQWxCO0FBQUEsWUFBMEJILFdBQVcsSUFBckM7QUFDQSxZQUFHRyxPQUFPaUIsVUFBVixFQUFxQjtBQUNqQnBCLHVCQUFXLEtBQUtBLFFBQUwsR0FBZ0JyQixLQUFLK0YsY0FBTCxDQUFvQnZFLE1BQXBCLENBQTNCO0FBQ0g7QUFDRCxlQUFPSCxRQUFQO0FBQ0gsS0F0TWlEOztBQXdNbEQ7Ozs7Ozs7QUFPQUUsWUFBUSxnQkFBU0osS0FBVCxFQUFnQkMsTUFBaEIsRUFBd0I0RSxXQUF4QixFQUFvQztBQUN4QyxZQUFHQSxlQUFlLEtBQUs3RSxLQUFMLEtBQWVBLEtBQTlCLElBQXVDLEtBQUtDLE1BQUwsS0FBZ0JBLE1BQTFELEVBQWlFO0FBQzdELGlCQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxpQkFBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsaUJBQUtLLFFBQUwsQ0FBY0YsTUFBZCxDQUFxQkosS0FBckIsRUFBNEJDLE1BQTVCO0FBQ0EsaUJBQUtFLGNBQUw7QUFDSDtBQUNKOztBQXROaUQsQ0FBMUMsQ0FBWjs7QUEyTkEyRSxPQUFPQyxPQUFQLEdBQWlCekYsS0FBakIiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhpbG8gMS4xLjEwIGZvciBjb21tb25qc1xuICogQ29weXJpZ2h0IDIwMTYgYWxpYmFiYS5jb21cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG52YXIgSGlsbyA9IHJlcXVpcmUoJy4uL2NvcmUvSGlsbycpO1xudmFyIENsYXNzID0gcmVxdWlyZSgnLi4vY29yZS9DbGFzcycpO1xudmFyIENvbnRhaW5lciA9IHJlcXVpcmUoJy4vQ29udGFpbmVyJyk7XG52YXIgQ2FudmFzUmVuZGVyZXIgPSByZXF1aXJlKCcuLi9yZW5kZXJlci9DYW52YXNSZW5kZXJlcicpO1xudmFyIERPTVJlbmRlcmVyID0gcmVxdWlyZSgnLi4vcmVuZGVyZXIvRE9NUmVuZGVyZXInKTtcbnZhciBXZWJHTFJlbmRlcmVyID0gcmVxdWlyZSgnLi4vcmVuZGVyZXIvV2ViR0xSZW5kZXJlcicpO1xudmFyIGJyb3dzZXIgPSByZXF1aXJlKCcuLi91dGlsL2Jyb3dzZXInKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbC91dGlsJyk7XG5cblxuXG4vKipcbiAqIEBsYW5ndWFnZT1lblxuICogRGVtbzpcbiAqIDxwcmU+XG4gKiB2YXIgc3RhZ2UgPSBuZXcgSGlsby5TdGFnZSh7XG4gKiAgICAgcmVuZGVyVHlwZTonY2FudmFzJyxcbiAqICAgICBjb250YWluZXI6IGNvbnRhaW5lckVsZW1lbnQsXG4gKiAgICAgd2lkdGg6IDMyMCxcbiAqICAgICBoZWlnaHQ6IDQ4MFxuICogfSk7XG4gKiA8L3ByZT5cbiAqIEBjbGFzcyBTdGFnZSBpcyB0aGUgcm9vdCBvZiBhbGwgdmlzdWFsIG9iamVjdCB0cmVlLCBhbnkgdmlzdWFsIG9iamVjdCB3aWxsIGJlIHJlbmRlciBvbmx5IGFmdGVyIGJlaW5nIGFkZGVkIHRvIFN0YWdlIG9yIGFueSBjaGlsZHJlbiBlbGVtZW50cyBvZiBTdGFnZS4gTm9ybWFsbHksIGV2ZXJ5IGhpbG8gYXBwbGljYXRpb24gc3RhcnQgd2l0aCBhbiBzdGFnZSBpbnN0YW5jZS5cbiAqIEBhdWdtZW50cyBDb250YWluZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIFByb3BlcnRpZXMgcGFyYW1ldGVycyBmb3IgdGhlIG9iamVjdC4gSW5jbHVkZXMgYWxsIHdyaXRhYmxlIHByb3BlcnRpZXMgb2YgdGhpcyBjbGFzcy4gU29tZSBpbXBvcnRhbnQgbGlrZTpcbiAqIDx1bD5cbiAqIDxsaT48Yj5jb250YWluZXI8L2I+OlN0cmluZ3xIVE1MRWxlbWVudCAtIEFzc2lnbiB0aGUgcGFyZW50IGNvbnRhaW5lciBlbGVtZW50IG9mIHRoZSBTdGFnZSBpbiB0aGUgcGFnZS4gSXQgc2hvdWxkIGJlIGEgZG9tIGNvbnRhaW5lciBvciBhbiBpZC4gSWYgdGhpcyBwYXJhbWV0ZXIgaXMgbm90IGdpdmVuIGFuZCBjYW52YXMgaXNuJ3QgaW4gdGhlIGRvbSB0cmVlLCB5b3Ugc2hvdWxkIGFkZCB0aGUgc3RhZ2UgdmFudmFzIGludG8gdGhlIGRvbSB0cmVlIHlvdXJzZWxmLCBvdGhlcndpc2UgU3RhZ2Ugd2lsbCBub3QgcmVuZGVyLiBvcHRpb25hbC48L2xpPlxuICogPGxpPjxiPnJlbmRlclR5cGU8L2I+OlN0cmluZyAtIFJlbmVyaW5nIHdheTogY2FudmFzfGRvbXx3ZWJnbO+8jGRlZmF1bHQgdmFsdWUgaXMgY2FudmFzLCBvcHRpb25hbC48L2xpPlxuICogPGxpPjxiPmNhbnZhczwvYj46U3RyaW5nfEhUTUxDYW52YXNFbGVtZW50fEhUTUxFbGVtZW50IC0g5oyH5a6a6Iie5Y+w5omA5a+55bqU55qE55S75biD5YWD57Sg44CC5a6D5piv5LiA5LiqY2FudmFz5oiW5pmu6YCa55qEZGl277yM5Lmf5Y+v5Lul5Lyg5YWl5YWD57Sg55qEaWTjgILoi6XkuLpjYW52YXPvvIzliJnkvb/nlKhjYW52YXPmnaXmuLLmn5PmiYDmnInlr7nosaHvvIzlkKbliJnkvb/nlKhkb20rY3Nz5p2l5riy5p+T44CC5Y+v6YCJ44CCPC9saT5cbiAqIDxsaT48Yj53aWR0aDwvYj46TnVtYmVyPC9saT4gLSBUaGUgd2lkdGggb2YgdGhlIFN0YWdlLCBkZWZhdWx0IHZhbHVlIGlzIHRoZSB3aWR0aCBvZiBjYW52YXMsIG9wdGlvbmFsLlxuICogPGxpPjxiPmhlaWdodDwvYj46TnVtYmVyPC9saT4gLSBUaGUgaGVpZ2h0IG9mIHRoZSBTdGFnZSwgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgaGVpZ2h0IG9mIGNhbnZhcywgb3B0aW9uYWwuXG4gKiA8bGk+PGI+cGF1c2VkPC9iPjpCb29sZWFuPC9saT4gLSBXaGV0aGVyIHN0b3AgcmVuZGVyaW5nIHRoZSBTdGFnZSwgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZSwgb3B0aW9uYWwuXG4gKiA8L3VsPlxuICogQG1vZHVsZSBoaWxvL3ZpZXcvU3RhZ2VcbiAqIEByZXF1aXJlcyBoaWxvL2NvcmUvSGlsb1xuICogQHJlcXVpcmVzIGhpbG8vY29yZS9DbGFzc1xuICogQHJlcXVpcmVzIGhpbG8vdmlldy9Db250YWluZXJcbiAqIEByZXF1aXJlcyBoaWxvL3JlbmRlcmVyL0NhbnZhc1JlbmRlcmVyXG4gKiBAcmVxdWlyZXMgaGlsby9yZW5kZXJlci9ET01SZW5kZXJlclxuICogQHJlcXVpcmVzIGhpbG8vcmVuZGVyZXIvV2ViR0xSZW5kZXJlclxuICogQHJlcXVpcmVzIGhpbG8vdXRpbC9icm93c2VyXG4gKiBAcmVxdWlyZXMgaGlsby91dGlsL3V0aWxcbiAqIEBwcm9wZXJ0eSB7SFRNTENhbnZhc0VsZW1lbnR8SFRNTEVsZW1lbnR9IGNhbnZhcyBUaGUgY2FudmFzIHRoZSBTdGFnZSBpcyByZWxhdGVkIHRvLiBJdCBjYW4gYmUgYSBjYW52YXMgb3IgYSBkaXYgZWxlbWVudCwgcmVhZG9ubHkhXG4gKiBAcHJvcGVydHkge1JlbmRlcmVyfSByZW5kZXJlciBTdGFnZSByZW5kZXJlciwgcmVhZG9ubHkhXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHBhdXNlZCBQYXVzZWQgU3RhZ2UgcmVuZGVyaW5nLlxuICogQHByb3BlcnR5IHtPYmplY3R9IHZpZXdwb3J0IFJlbmRlcmluZyBhcmVhIG9mIHRoZSBTdGFnZS4gSW5jbHVkaW5nIHByb3BlcnRpZXMgbGlrZTogbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0LiByZWFkb25seSFcbiAqL1xudmFyIFN0YWdlID0gQ2xhc3MuY3JlYXRlKC8qKiBAbGVuZHMgU3RhZ2UucHJvdG90eXBlICove1xuICAgIEV4dGVuZHM6IENvbnRhaW5lcixcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24ocHJvcGVydGllcyl7XG4gICAgICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IHt9O1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5pZCB8fCBwcm9wZXJ0aWVzLmlkIHx8IEhpbG8uZ2V0VWlkKCdTdGFnZScpO1xuICAgICAgICBTdGFnZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcHJvcGVydGllcyk7XG5cbiAgICAgICAgdGhpcy5faW5pdFJlbmRlcmVyKHByb3BlcnRpZXMpO1xuXG4gICAgICAgIC8vaW5pdCBzaXplXG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGgsIGhlaWdodCA9IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgdmlld3BvcnQgPSB0aGlzLnVwZGF0ZVZpZXdwb3J0KCk7XG4gICAgICAgIGlmKCFwcm9wZXJ0aWVzLndpZHRoKSB3aWR0aCA9ICh2aWV3cG9ydCAmJiB2aWV3cG9ydC53aWR0aCkgfHwgMzIwO1xuICAgICAgICBpZighcHJvcGVydGllcy5oZWlnaHQpIGhlaWdodCA9ICh2aWV3cG9ydCAmJiB2aWV3cG9ydC5oZWlnaHQpIHx8IDQ4MDtcbiAgICAgICAgdGhpcy5yZXNpemUod2lkdGgsIGhlaWdodCwgdHJ1ZSk7XG4gICAgfSxcblxuICAgIGNhbnZhczogbnVsbCxcbiAgICByZW5kZXJlcjogbnVsbCxcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQGxhbmd1YWdlPWVuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdFJlbmRlcmVyOiBmdW5jdGlvbihwcm9wZXJ0aWVzKXtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHByb3BlcnRpZXMuY2FudmFzO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gcHJvcGVydGllcy5jb250YWluZXI7XG4gICAgICAgIHZhciByZW5kZXJUeXBlID0gcHJvcGVydGllcy5yZW5kZXJUeXBlfHwnY2FudmFzJztcblxuICAgICAgICBpZih0eXBlb2YgY2FudmFzID09PSAnc3RyaW5nJykgY2FudmFzID0gSGlsby5nZXRFbGVtZW50KGNhbnZhcyk7XG4gICAgICAgIGlmKHR5cGVvZiBjb250YWluZXIgPT09ICdzdHJpbmcnKSBjb250YWluZXIgPSBIaWxvLmdldEVsZW1lbnQoY29udGFpbmVyKTtcblxuICAgICAgICBpZighY2FudmFzKXtcbiAgICAgICAgICAgIHZhciBjYW52YXNUYWdOYW1lID0gcmVuZGVyVHlwZSA9PT0gJ2RvbSc/J2Rpdic6J2NhbnZhcyc7XG4gICAgICAgICAgICBjYW52YXMgPSBIaWxvLmNyZWF0ZUVsZW1lbnQoY2FudmFzVGFnTmFtZSwge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZighY2FudmFzLmdldENvbnRleHQpe1xuICAgICAgICAgICAgcmVuZGVyVHlwZSA9ICdkb20nO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIGlmKGNvbnRhaW5lcikgY29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbiAgICAgICAgdmFyIHByb3BzID0ge2NhbnZhczpjYW52YXMsIHN0YWdlOnRoaXN9O1xuICAgICAgICBzd2l0Y2gocmVuZGVyVHlwZSl7XG4gICAgICAgICAgICBjYXNlICdkb20nOlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgRE9NUmVuZGVyZXIocHJvcHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2ViZ2wnOlxuICAgICAgICAgICAgICAgIGlmKFdlYkdMUmVuZGVyZXIuaXNTdXBwb3J0KCkpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFdlYkdMUmVuZGVyZXIocHJvcHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IENhbnZhc1JlbmRlcmVyKHByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjYW52YXMnOlxuXHQgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBDYW52YXNSZW5kZXJlcihwcm9wcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGxhbmd1YWdlPWVuXG4gICAgICogQWRkIFN0YWdlIGNhbnZhcyB0byBET00gY29udGFpbmVyLiBOb3RlOiB0aGlzIGZ1bmN0aW9uIG92ZXJ3cml0ZSBWaWV3LmFkZFRvIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRvbUVsZW1lbnQgQW4gZG9tIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge1N0YWdlfSBUaGUgU3RhZ2UgT2JqZWN0LCBjaGFpbmVkIGNhbGwgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIGFkZFRvOiBmdW5jdGlvbihkb21FbGVtZW50KXtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgICBpZihjYW52YXMucGFyZW50Tm9kZSAhPT0gZG9tRWxlbWVudCl7XG4gICAgICAgICAgICBkb21FbGVtZW50LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBsYW5ndWFnZT1lblxuICAgICAqIEludm9rZSB0aWNrIGZ1bmN0aW9uIGFuZCBTdGFnZSB3aWxsIHVwZGF0ZSBhbmQgcmVuZGVyLiBEZXZlbG9wZXIgbWF5IG5vdCBuZWVkIHRvIHVzZSB0aGlzIGZ1bmNpdG9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YSBUaGUgdGltZSBoYWQgcGFzcyBiZXR3ZWVuIHRoaXMgdGljayBpbnZva2UgYW5kIGxhc3QgdGljayBpbnZva2UuXG4gICAgICovXG4gICAgdGljazogZnVuY3Rpb24oZGVsdGEpe1xuICAgICAgICBpZighdGhpcy5wYXVzZWQpe1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyKHRoaXMucmVuZGVyZXIsIGRlbHRhKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBUdXJuIG9uL29mZiBTdGFnZSByZXNwb25zZSB0byBET00gZXZlbnQuIFRvIG1ha2UgdmlzdWFsIG9iamVjdHMgb24gdGhlIFN0YWdlIGludGVyYWN0aXZlLCB1c2UgdGhpcyBmdW5jdGlvbiB0byB0dXJuIG9uIFN0YWdlJ3MgcmVzcG9uc2VzIHRvIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gdHlwZSBUaGUgZXZlbnQgbmFtZSBvciBhcnJheSB0aGF0IG5lZWQgdG8gdHVybiBvbi9vZmYuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkIFdoZXRoZXIgdHVybiBvbiBvciBvZmYgdGhlIHJlc3BvbnNlIG1ldGhvZCBvZiBzdGFnZSBET00gZXZlbnQuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgICAqIEByZXR1cm5zIHtTdGFnZX0gVGhlIFN0YWdlIE9iamVjdCwgY2hhaW5lZCBjYWxsIHN1cHBvcnRlZC5cbiAgICAgKi9cbiAgICBlbmFibGVET01FdmVudDogZnVuY3Rpb24odHlwZXMsIGVuYWJsZWQpe1xuICAgICAgICB2YXIgbWUgPSB0aGlzLFxuICAgICAgICAgICAgY2FudmFzID0gbWUuY2FudmFzLFxuICAgICAgICAgICAgaGFuZGxlciA9IG1lLl9kb21MaXN0ZW5lciB8fCAobWUuX2RvbUxpc3RlbmVyID0gZnVuY3Rpb24oZSl7bWUuX29uRE9NRXZlbnQoZSk7fSk7XG5cbiAgICAgICAgdHlwZXMgPSB0eXBlb2YgdHlwZXMgPT09ICdzdHJpbmcnID8gW3R5cGVzXSA6IHR5cGVzO1xuICAgICAgICBlbmFibGVkID0gZW5hYmxlZCAhPT0gZmFsc2U7XG5cbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZXNbaV07XG5cbiAgICAgICAgICAgIGlmKGVuYWJsZWQpe1xuICAgICAgICAgICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBET00gZXZlbnRzIGhhbmRsZXIgZnVuY3Rpb24uIFRoaXMgZnVuY2l0b24gd2lsbCBpbnZva2UgZXZlbnRzIG9udG8gdGhlIHZpc3VhbCBvYmplY3QsIHdoaWNoIGlzIG9uIHRoZSBwb3NpdGlvbiBvZiB0aGUgY29vcmRpbmF0ZSB3aGVyZSB0aGUgZXZlbnRzIGlzIGludm9rZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfb25ET01FdmVudDogZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciB0eXBlID0gZS50eXBlLCBldmVudCA9IGUsIGlzVG91Y2ggPSB0eXBlLmluZGV4T2YoJ3RvdWNoJykgPT0gMDtcblxuICAgICAgICAvL2NhbGN1bGF0ZSBzdGFnZVgvc3RhZ2VZXG4gICAgICAgIHZhciBwb3NPYmogPSBlO1xuICAgICAgICBpZihpc1RvdWNoKXtcbiAgICAgICAgICAgIHZhciB0b3VjaGVzID0gZS50b3VjaGVzLCBjaGFuZ2VkVG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXM7XG4gICAgICAgICAgICBwb3NPYmogPSAodG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCkgPyB0b3VjaGVzWzBdIDpcbiAgICAgICAgICAgICAgICAgICAgIChjaGFuZ2VkVG91Y2hlcyAmJiBjaGFuZ2VkVG91Y2hlcy5sZW5ndGgpID8gY2hhbmdlZFRvdWNoZXNbMF0gOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHggPSBwb3NPYmoucGFnZVggfHwgcG9zT2JqLmNsaWVudFgsIHkgPSBwb3NPYmoucGFnZVkgfHwgcG9zT2JqLmNsaWVudFksXG4gICAgICAgICAgICB2aWV3cG9ydCA9IHRoaXMudmlld3BvcnQgfHwgdGhpcy51cGRhdGVWaWV3cG9ydCgpO1xuXG4gICAgICAgIGV2ZW50LnN0YWdlWCA9IHggPSAoeCAtIHZpZXdwb3J0LmxlZnQpIC8gdGhpcy5zY2FsZVg7XG4gICAgICAgIGV2ZW50LnN0YWdlWSA9IHkgPSAoeSAtIHZpZXdwb3J0LnRvcCkgLyB0aGlzLnNjYWxlWTtcblxuICAgICAgICAvL+m8oOagh+S6i+S7tumcgOimgemYu+atouWGkuazoeaWueazlSBQcmV2ZW50IGJ1YmJsaW5nIG9uIG1vdXNlIGV2ZW50cy5cbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRoaXMuX3N0b3BQcm9wYWdhdGlvbmVkID0gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb2JqID0gdGhpcy5nZXRWaWV3QXRQb2ludCh4LCB5LCB0cnVlLCBmYWxzZSwgdHJ1ZSl8fHRoaXMsXG4gICAgICAgICAgICBjYW52YXMgPSB0aGlzLmNhbnZhcywgdGFyZ2V0ID0gdGhpcy5fZXZlbnRUYXJnZXQ7XG5cbiAgICAgICAgLy9maXJlIG1vdXNlb3V0L3RvdWNob3V0IGV2ZW50IGZvciBsYXN0IGV2ZW50IHRhcmdldFxuICAgICAgICB2YXIgbGVhdmUgPSB0eXBlID09PSAnbW91c2VvdXQnO1xuICAgICAgICAvL+W9k29iauWSjHRhcmdldOS4jeWQjCDkuJRvYmrkuI3mmK90YXJnZXTnmoTlrZDlhYPntKDml7bmiY3op6blj5FvdXTkuovku7YgZmlyZSBvdXQgZXZlbnQgd2hlbiBvYmogYW5kIHRhcmdldCBpc24ndCB0aGUgc2FtZSBhcyB3ZWxsIGFzIG9iaiBpcyBub3QgYSBjaGlsZCBlbGVtZW50IHRvIHRhcmdldC5cbiAgICAgICAgaWYodGFyZ2V0ICYmICh0YXJnZXQgIT0gb2JqICYmICghdGFyZ2V0LmNvbnRhaW5zIHx8ICF0YXJnZXQuY29udGFpbnMob2JqKSl8fCBsZWF2ZSkpe1xuICAgICAgICAgICAgdmFyIG91dCA9ICh0eXBlID09PSAndG91Y2htb3ZlJykgPyAndG91Y2hvdXQnIDpcbiAgICAgICAgICAgICAgICAgICAgICAodHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgbGVhdmUgfHwgIW9iaikgPyAnbW91c2VvdXQnIDogbnVsbDtcbiAgICAgICAgICAgIGlmKG91dCkge1xuICAgICAgICAgICAgICAgIHZhciBvdXRFdmVudCA9IHV0aWwuY29weSh7fSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgIG91dEV2ZW50LnR5cGUgPSBvdXQ7XG4gICAgICAgICAgICAgICAgb3V0RXZlbnQuZXZlbnRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Ll9maXJlTW91c2VFdmVudChvdXRFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudC5sYXN0RXZlbnRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLl9ldmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvL2ZpcmUgZXZlbnQgZm9yIGN1cnJlbnQgdmlld1xuICAgICAgICBpZihvYmogJiYgb2JqLnBvaW50ZXJFbmFibGVkICYmIHR5cGUgIT09ICdtb3VzZW91dCcpe1xuICAgICAgICAgICAgZXZlbnQuZXZlbnRUYXJnZXQgPSB0aGlzLl9ldmVudFRhcmdldCA9IG9iajtcbiAgICAgICAgICAgIG9iai5fZmlyZU1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zZXQgY3Vyc29yIGZvciBjdXJyZW50IHZpZXdcbiAgICAgICAgaWYoIWlzVG91Y2gpe1xuICAgICAgICAgICAgdmFyIGN1cnNvciA9IChvYmogJiYgb2JqLnBvaW50ZXJFbmFibGVkICYmIG9iai51c2VIYW5kQ3Vyc29yKSA/ICdwb2ludGVyJyA6ICcnO1xuICAgICAgICAgICAgY2FudmFzLnN0eWxlLmN1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZml4IGFuZHJvaWQ6IGB0b3VjaG1vdmVgIGZpcmVzIG9ubHkgb25jZVxuICAgICAgICBpZihicm93c2VyLmFuZHJvaWQgJiYgdHlwZSA9PT0gJ3RvdWNobW92ZScpe1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBsYW5ndWFnZT1lblxuICAgICAqIFVwZGF0ZSB0aGUgdmlld3BvcnQgKHJlbmRlcmluZyBhcmVhKSB3aGljaCBTdGFnZSBzaG93IG9uIHRoZSBwYWdlLiBJbnZva2UgdGhpcyBmdW5jdGlvbiB0byB1cGRhdGUgdmlld3BvcnQgd2hlbiBTdGFnZSBjYW52YXMgY2hhbmdlcyBib3JkZXIsIG1hcmdpbiBvciBwYWRkaW5nIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gVGhlIHZpc2libGUgYXJlYSBvZiB0aGUgU3RhZ2UgKHRoZSB2aWV3cG9ydCBwcm9wZXJ0eSkuXG4gICAgICovXG4gICAgdXBkYXRlVmlld3BvcnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBjYW52YXMgPSB0aGlzLmNhbnZhcywgdmlld3BvcnQgPSBudWxsO1xuICAgICAgICBpZihjYW52YXMucGFyZW50Tm9kZSl7XG4gICAgICAgICAgICB2aWV3cG9ydCA9IHRoaXMudmlld3BvcnQgPSBIaWxvLmdldEVsZW1lbnRSZWN0KGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXdwb3J0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBSZXNpemUgdGhlIFN0YWdlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCBUaGUgd2lkdGggb2YgdGhlIG5ldyBTdGFnZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IFRoZSBoZWlnaHQgb2YgdGhlIG5ldyBTdGFnZS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZvcmNlUmVzaXplIFdoZXRoZXIgZm9yY2VkIHRvIHJlc2l6ZSB0aGUgU3RhZ2UsIG1lYW5zIG5vIG1hdHRlciB0aGUgc2l6ZSBvZiB0aGUgU3RhZ2UsIGZvcmNlIHRvIGNoYW5nZSB0aGUgc2l6ZSB0byBrZWVwIFN0YWdlLCBjYW52YXMgYW5kIHdpbmRvdyBhY3QgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgKi9cbiAgICByZXNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGZvcmNlUmVzaXplKXtcbiAgICAgICAgaWYoZm9yY2VSZXNpemUgfHwgdGhpcy53aWR0aCAhPT0gd2lkdGggfHwgdGhpcy5oZWlnaHQgIT09IGhlaWdodCl7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3cG9ydCgpO1xuICAgICAgICB9XG4gICAgfVxuXG59KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWdlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Hilo = __webpack_require__(1);\nvar Class = __webpack_require__(0);\nvar View = __webpack_require__(6);\n\n/**\n * @language=en\n * @class Container is the base class to all container classes. Each Container can add other view object as children.\n * @augments View\n * @param {Object} properties Properties parameters of the object to create. Contains all writable properties of this class.\n * @module hilo/view/Container\n * @requires hilo/core/Hilo\n * @requires hilo/core/Class\n * @requires hilo/view/View\n * @property {Array} children List of children elements of the container, readonly!\n * @property {Boolean} pointerChildren Whether children elements of the container can response to user interactive events, default value is true.\n * @property {Boolean} clipChildren Whether clip children elements which are out of the container, default value is false.\n */\nvar Container = Class.create( /** @lends Container.prototype */{\n    Extends: View,\n    constructor: function constructor(properties) {\n        properties = properties || {};\n        this.id = this.id || properties.id || Hilo.getUid(\"Container\");\n        Container.superclass.constructor.call(this, properties);\n\n        if (this.children) this._updateChildren();else this.children = [];\n    },\n\n    children: null,\n    pointerChildren: true,\n    clipChildren: false,\n\n    /**\n     * @language=en\n     * Return the amount of the children elements of the container.\n     * @returns {Uint} The amount of the children elements of the container.\n     */\n    getNumChildren: function getNumChildren() {\n        return this.children.length;\n    },\n\n    /**\n     * @language=en\n     * Add child element at given index.\n     * @param {View} child Element to add.\n     * @param {Number} index The given index position, range from 0.\n     */\n    addChildAt: function addChildAt(child, index) {\n        var children = this.children,\n            len = children.length,\n            parent = child.parent;\n\n        index = index < 0 ? 0 : index > len ? len : index;\n        var childIndex = this.getChildIndex(child);\n        if (childIndex == index) {\n            return this;\n        } else if (childIndex >= 0) {\n            children.splice(childIndex, 1);\n            index = index == len ? len - 1 : index;\n        } else if (parent) {\n            parent.removeChild(child);\n        }\n\n        children.splice(index, 0, child);\n\n        //直接插入，影响插入位置之后的深度\n        //Insert directly, this will affect depth of elements after the index.\n        if (childIndex < 0) {\n            this._updateChildren(index);\n        }\n        //只是移动时影响中间段的深度\n        //Will affect depth of elements in the middle during moving\n        else {\n                var startIndex = childIndex < index ? childIndex : index;\n                var endIndex = childIndex < index ? index : childIndex;\n                this._updateChildren(startIndex, endIndex + 1);\n            }\n\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Add child element at the top.\n     * @param {View} child Elements to add.\n     */\n    addChild: function addChild(child) {\n        var total = this.children.length,\n            args = arguments;\n\n        for (var i = 0, len = args.length; i < len; i++) {\n            this.addChildAt(args[i], total + i);\n        }\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Remove element at the index.\n     * @param {Int} index Index of the element to remove, range from 0.\n     * @returns {View} Element had been removed.\n     */\n    removeChildAt: function removeChildAt(index) {\n        var children = this.children;\n        if (index < 0 || index >= children.length) return null;\n\n        var child = children[index];\n        if (child) {\n            //NOTE: use `__renderer` for fixing child removal (DOMRenderer and FlashRenderer only).\n            //Do `not` use it in any other case.\n            if (!child.__renderer) {\n                var obj = child;\n                while (obj = obj.parent) {\n                    //obj is stage\n                    if (obj.renderer) {\n                        child.__renderer = obj.renderer;\n                        break;\n                    } else if (obj.__renderer) {\n                        child.__renderer = obj.__renderer;\n                        break;\n                    }\n                }\n            }\n\n            if (child.__renderer) {\n                child.__renderer.remove(child);\n            }\n\n            child.parent = null;\n            child.depth = -1;\n        }\n\n        children.splice(index, 1);\n        this._updateChildren(index);\n\n        return child;\n    },\n\n    /**\n     * @language=en\n     * Remove the given child element.\n     * @param {View} child The child element to remove.\n     * @returns {View} Element had been removed.\n     */\n    removeChild: function removeChild(child) {\n        return this.removeChildAt(this.getChildIndex(child));\n    },\n\n    /**\n     * @language=en\n     * Remove child element by its id.\n     * @param {String} id The id of element to remove.\n     * @returns {View} Element had been removed.\n     */\n    removeChildById: function removeChildById(id) {\n        var children = this.children,\n            child;\n        for (var i = 0, len = children.length; i < len; i++) {\n            child = children[i];\n            if (child.id === id) {\n                this.removeChildAt(i);\n                return child;\n            }\n        }\n        return null;\n    },\n\n    /**\n     * @language=en\n     * Remove all children elements.\n     * @returns {Container} Container itself.\n     */\n    removeAllChildren: function removeAllChildren() {\n        while (this.children.length) {\n            this.removeChildAt(0);\n        }return this;\n    },\n\n    /**\n     * @language=en\n     * Return child element at the given index.\n     * @param {Number} index The index of the element, range from 0.\n     */\n    getChildAt: function getChildAt(index) {\n        var children = this.children;\n        if (index < 0 || index >= children.length) return null;\n        return children[index];\n    },\n\n    /**\n     * @language=en\n     * Return child element at the given id.\n     * @param {String} id The id of child element to return.\n     */\n    getChildById: function getChildById(id) {\n        var children = this.children,\n            child;\n        for (var i = 0, len = children.length; i < len; i++) {\n            child = children[i];\n            if (child.id === id) return child;\n        }\n        return null;\n    },\n\n    /**\n     * @language=en\n     * Return index value of the given child element.\n     * @param {View} child The child element need to get its index.\n     */\n    getChildIndex: function getChildIndex(child) {\n        return this.children.indexOf(child);\n    },\n\n    /**\n     * @language=en\n     * Set the index of child element.\n     * @param {View} child The child element need to set index.\n     * @param {Number} index The index to set to the element.\n     */\n    setChildIndex: function setChildIndex(child, index) {\n        var children = this.children,\n            oldIndex = children.indexOf(child);\n\n        if (oldIndex >= 0 && oldIndex != index) {\n            var len = children.length;\n            index = index < 0 ? 0 : index >= len ? len - 1 : index;\n            children.splice(oldIndex, 1);\n            children.splice(index, 0, child);\n            this._updateChildren();\n        }\n        return this;\n    },\n\n    /**\n     * @language=en\n     * Swap index between two child elements.\n     * @param {View} child1 Child element A.\n     * @param {View} child2 Child element B.\n     */\n    swapChildren: function swapChildren(child1, child2) {\n        var children = this.children,\n            index1 = this.getChildIndex(child1),\n            index2 = this.getChildIndex(child2);\n\n        child1.depth = index2;\n        children[index2] = child1;\n        child2.depth = index1;\n        children[index1] = child2;\n    },\n\n    /**\n     * @language=en\n     * Swap two children elements at given indexes.\n     * @param {Number} index1 Given index A.\n     * @param {Number} index2 Given index B.\n     */\n    swapChildrenAt: function swapChildrenAt(index1, index2) {\n        var children = this.children,\n            child1 = this.getChildAt(index1),\n            child2 = this.getChildAt(index2);\n\n        child1.depth = index2;\n        children[index2] = child1;\n        child2.depth = index1;\n        children[index1] = child2;\n    },\n\n    /**\n     * @language=en\n     * Sort children elements by the given key or function.\n     * @param {Object} keyOrFunction If is String, sort children elements by the given property string; If is Function, sort by the function.\n     */\n    sortChildren: function sortChildren(keyOrFunction) {\n        var fn = keyOrFunction,\n            children = this.children;\n        if (typeof fn == \"string\") {\n            var key = fn;\n            fn = function fn(a, b) {\n                return b[key] - a[key];\n            };\n        }\n        children.sort(fn);\n        this._updateChildren();\n    },\n\n    /**\n     * @language=en\n     * Update children elements.\n     * @private\n     */\n    _updateChildren: function _updateChildren(start, end) {\n        var children = this.children,\n            child;\n        start = start || 0;\n        end = end || children.length;\n        for (var i = start; i < end; i++) {\n            child = children[i];\n            child.depth = i + 1;\n            child.parent = this;\n        }\n    },\n\n    /**\n     * @language=en\n     * Return whether this container contains the parameter described child element.\n     * @param {View} child The child element to test.\n     */\n    contains: function contains(child) {\n        while (child = child.parent) {\n            if (child === this) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * @language=en\n     * Return object at the point positioned by given values on x axis and y axis.\n     * @param {Number} x The point's value on the coordinate's x axis.\n     * @param {Number} y The point's value on the coordinate's y asix.\n     * @param {Boolean} usePolyCollision Whether use polygon collision detection, default value is false.\n     * @param {Boolean} global Whether return all elements that match the condition, default value is false.\n     * @param {Boolean} eventMode Whether find elements under event mode, default value is false.\n     */\n    getViewAtPoint: function getViewAtPoint(x, y, usePolyCollision, global, eventMode) {\n        var result = global ? [] : null,\n            children = this.children,\n            child,\n            obj;\n\n        for (var i = children.length - 1; i >= 0; i--) {\n            child = children[i];\n            //skip child which is not shown or pointer enabled\n            if (!child || !child.visible || child.alpha <= 0 || eventMode && !child.pointerEnabled) continue;\n            //find child recursively\n            if (child.children && child.children.length && !(eventMode && !child.pointerChildren)) {\n                obj = child.getViewAtPoint(x, y, usePolyCollision, global, eventMode);\n            }\n\n            if (obj) {\n                if (!global) return obj;else if (obj.length) result = result.concat(obj);\n            } else if (child.hitTestPoint(x, y, usePolyCollision)) {\n                if (!global) return child;else result.push(child);\n            }\n        }\n\n        return global && result.length ? result : null;\n    },\n\n    /**\n     * @language=en\n     * Rewrite render method.\n     * @private\n     */\n    render: function render(renderer, delta) {\n        Container.superclass.render.call(this, renderer, delta);\n\n        var children = this.children.slice(0),\n            i,\n            len,\n            child;\n        for (i = 0, len = children.length; i < len; i++) {\n            child = children[i];\n            //NOTE: the child could remove or change it's parent\n            if (child.parent === this) child._render(renderer, delta);\n        }\n    }\n\n});\n\nmodule.exports = Container;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\nvar Hilo = __webpack_require__(1);\nvar Renderer = __webpack_require__(5);\n\n/**\n * @language=en\n * @class CanvasRenderer CanvasRenderer, all the visual object is drawing on the canvas element.The stage will create different renderer depend on the canvas and renderType properties, developer need not use this class directly.\n * @augments Renderer\n * @param {Object} properties The properties to create a renderer, contains all writeable props of this class.\n * @module hilo/renderer/CanvasRenderer\n * @requires hilo/core/Class\n * @requires hilo/core/Hilo\n * @requires hilo/renderer/Renderer\n * @property {CanvasRenderingContext2D} context The context of the canvas element, readonly.\n */\nvar CanvasRenderer = Class.create( /** @lends CanvasRenderer.prototype */{\n    Extends: Renderer,\n    constructor: function constructor(properties) {\n        CanvasRenderer.superclass.constructor.call(this, properties);\n\n        this.context = this.canvas.getContext(\"2d\");\n    },\n    renderType: 'canvas',\n    context: null,\n\n    /**\n     * @private\n     * @see Renderer#startDraw\n     */\n    startDraw: function startDraw(target) {\n        if (target.visible && target.alpha > 0) {\n            if (target === this.stage) {\n                this.context.clearRect(0, 0, target.width, target.height);\n            }\n            if (target.blendMode !== this.blendMode) {\n                this.context.globalCompositeOperation = this.blendMode = target.blendMode;\n            }\n            this.context.save();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * @private\n     * @see Renderer#draw\n     */\n    draw: function draw(target) {\n        var ctx = this.context,\n            w = target.width,\n            h = target.height;\n\n        //draw background\n        var bg = target.background;\n        if (bg) {\n            ctx.fillStyle = bg;\n            ctx.fillRect(0, 0, w, h);\n        }\n\n        //draw image\n        var drawable = target.drawable,\n            image = drawable && drawable.image;\n        if (image) {\n            var rect = drawable.rect,\n                sw = rect[2],\n                sh = rect[3],\n                offsetX = rect[4],\n                offsetY = rect[5];\n            //ie9+浏览器宽高为0时会报错 fixed ie9 bug.\n            if (!sw || !sh) {\n                return;\n            }\n            if (!w && !h) {\n                //fix width/height TODO: how to get rid of this?\n                w = target.width = sw;\n                h = target.height = sh;\n            }\n            //the pivot is the center of frame if has offset, otherwise is (0, 0)\n            if (offsetX || offsetY) ctx.translate(offsetX - sw * 0.5, offsetY - sh * 0.5);\n            ctx.drawImage(image, rect[0], rect[1], sw, sh, 0, 0, w, h);\n        }\n    },\n\n    /**\n     * @private\n     * @see Renderer#endDraw\n     */\n    endDraw: function endDraw(target) {\n        this.context.restore();\n    },\n\n    /**\n     * @private\n     * @see Renderer#transform\n     */\n    transform: function transform(target) {\n        var drawable = target.drawable;\n        if (drawable && drawable.domElement) {\n            Hilo.setElementStyleByView(target);\n            return;\n        }\n\n        var ctx = this.context,\n            scaleX = target.scaleX,\n            scaleY = target.scaleY;\n\n        if (target === this.stage) {\n            var style = this.canvas.style,\n                oldScaleX = target._scaleX,\n                oldScaleY = target._scaleY,\n                isStyleChange = false;\n\n            if (!oldScaleX && scaleX != 1 || oldScaleX && oldScaleX != scaleX) {\n                target._scaleX = scaleX;\n                style.width = scaleX * target.width + \"px\";\n                isStyleChange = true;\n            }\n            if (!oldScaleY && scaleY != 1 || oldScaleY && oldScaleY != scaleY) {\n                target._scaleY = scaleY;\n                style.height = scaleY * target.height + \"px\";\n                isStyleChange = true;\n            }\n            if (isStyleChange) {\n                target.updateViewport();\n            }\n        } else {\n            var x = target.x,\n                y = target.y,\n                pivotX = target.pivotX,\n                pivotY = target.pivotY,\n                rotation = target.rotation % 360,\n                mask = target.mask;\n\n            if (mask) {\n                mask._render(this);\n                ctx.clip();\n            }\n\n            //alignment\n            var align = target.align;\n            if (align) {\n                var pos = target.getAlignPosition();\n                x = pos.x;\n                y = pos.y;\n            }\n\n            if (x != 0 || y != 0) ctx.translate(x, y);\n            if (rotation != 0) ctx.rotate(rotation * Math.PI / 180);\n            if (scaleX != 1 || scaleY != 1) ctx.scale(scaleX, scaleY);\n            if (pivotX != 0 || pivotY != 0) ctx.translate(-pivotX, -pivotY);\n        }\n\n        if (target.alpha > 0) ctx.globalAlpha *= target.alpha;\n    },\n\n    /**\n     * @private\n     * @see Renderer#remove\n     */\n    remove: function remove(target) {\n        var drawable = target.drawable;\n        var elem = drawable && drawable.domElement;\n\n        if (elem) {\n            var parentElem = elem.parentNode;\n            if (parentElem) {\n                parentElem.removeChild(elem);\n            }\n        }\n    },\n\n    /**\n     * @private\n     * @see Renderer#clear\n     */\n    clear: function clear(x, y, width, height) {\n        this.context.clearRect(x, y, width, height);\n    },\n\n    /**\n     * @private\n     * @see Renderer#resize\n     */\n    resize: function resize(width, height) {\n        var canvas = this.canvas;\n        var stage = this.stage;\n        var style = canvas.style;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        style.width = stage.width * stage.scaleX + 'px';\n        style.height = stage.height * stage.scaleY + 'px';\n    }\n\n});\n\nmodule.exports = CanvasRenderer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\nvar Hilo = __webpack_require__(1);\nvar Renderer = __webpack_require__(5);\nvar Drawable = __webpack_require__(8);\n\n/**\n * @language=en\n * @class DomRenderer The DomRenderer, all the visual object is drawing using dom element.The stage will create different renderer depend on the canvas and renderType properties, developer need not use this class directly.\n * @augments Renderer\n * @param {Object} properties The properties to create a renderer, contains all writeable props of this class.\n * @module hilo/renderer/DOMRenderer\n * @requires hilo/core/Class\n * @requires hilo/core/Hilo\n * @requires hilo/renderer/Renderer\n * @requires hilo/view/Drawable\n */\nvar DOMRenderer = function () {\n\n    return Class.create({\n        Extends: Renderer,\n        constructor: function constructor(properties) {\n            DOMRenderer.superclass.constructor.call(this, properties);\n        },\n        renderType: \'dom\',\n        /**\n         * @private\n         * @see Renderer#startDraw\n         */\n        startDraw: function startDraw(target) {\n            //prepare drawable\n            var drawable = target.drawable = target.drawable || new Drawable();\n            drawable.domElement = drawable.domElement || createDOMDrawable(target, drawable);\n            return true;\n        },\n\n        /**\n         * @private\n         * @see Renderer#draw\n         */\n        draw: function draw(target) {\n            var parent = target.parent,\n                targetElem = target.drawable.domElement,\n                currentParent = targetElem.parentNode;\n\n            if (parent) {\n                var parentElem = parent.drawable.domElement;\n                if (parentElem != currentParent) {\n                    parentElem.appendChild(targetElem);\n                }\n                //fix image load bug\n                if (!target.width && !target.height) {\n                    var rect = target.drawable.rect;\n                    if (rect && (rect[2] || rect[3])) {\n                        target.width = rect[2];\n                        target.height = rect[3];\n                    }\n                }\n            } else if (target === this.stage && !currentParent) {\n                targetElem.style.overflow = \'hidden\';\n                this.canvas.appendChild(targetElem);\n            }\n        },\n\n        /**\n         * @private\n         * @see Renderer#transform\n         */\n        transform: function transform(target) {\n            Hilo.setElementStyleByView(target);\n            if (target === this.stage) {\n                var style = this.canvas.style,\n                    oldScaleX = target._scaleX,\n                    oldScaleY = target._scaleY,\n                    scaleX = target.scaleX,\n                    scaleY = target.scaleY;\n\n                if (!oldScaleX && scaleX != 1 || oldScaleX && oldScaleX != scaleX) {\n                    target._scaleX = scaleX;\n                    style.width = scaleX * target.width + "px";\n                }\n                if (!oldScaleY && scaleY != 1 || oldScaleY && oldScaleY != scaleY) {\n                    target._scaleY = scaleY;\n                    style.height = scaleY * target.height + "px";\n                }\n            }\n        },\n\n        /**\n         * @private\n         * @see Renderer#remove\n         */\n        remove: function remove(target) {\n            var drawable = target.drawable;\n            var elem = drawable && drawable.domElement;\n\n            if (elem) {\n                var parentElem = elem.parentNode;\n                if (parentElem) {\n                    parentElem.removeChild(elem);\n                }\n            }\n        },\n\n        /**\n         * @private\n         * @see Renderer#hide\n         */\n        hide: function hide(target) {\n            var elem = target.drawable && target.drawable.domElement;\n            if (elem) elem.style.display = \'none\';\n        },\n\n        /**\n         * @private\n         * @see Renderer#resize\n         */\n        resize: function resize(width, height) {\n            var style = this.canvas.style;\n            style.width = width + \'px\';\n            style.height = height + \'px\';\n            if (style.position != "absolute") {\n                style.position = "relative";\n            }\n        }\n    });\n\n    /**\n     * @language=en\n     * Create a dom element, you can set the tagName property，such as canvas and div.\n     * @param {Object} view A visual object.\n     * @param {Object} imageObj The image object to render, include the image propertiy and other associated properties, such as rect.\n     * @return {HTMLElement} The created dom element.\n     * @private\n     */\n    function createDOMDrawable(view, imageObj) {\n        var tag = view.tagName || "div",\n            img = imageObj.image,\n            w = view.width || img && img.width,\n            h = view.height || img && img.height,\n            elem = Hilo.createElement(tag),\n            style = elem.style;\n\n        if (view.id) elem.id = view.id;\n        style.position = "absolute";\n        style.left = (view.left || 0) + "px";\n        style.top = (view.top || 0) + "px";\n        style.width = w + "px";\n        style.height = h + "px";\n\n        if (tag == "canvas") {\n            elem.width = w;\n            elem.height = h;\n            if (img) {\n                var ctx = elem.getContext("2d");\n                var rect = imageObj.rect || [0, 0, w, h];\n                ctx.drawImage(img, rect[0], rect[1], rect[2], rect[3], view.x || 0, view.y || 0, view.width || rect[2], view.height || rect[3]);\n            }\n        } else {\n            style.opacity = view.alpha != undefined ? view.alpha : 1;\n            if (view === this.stage || view.clipChildren) style.overflow = "hidden";\n            if (img && img.src) {\n                style.backgroundImage = "url(" + img.src + ")";\n                var bgX = view.rectX || 0,\n                    bgY = view.rectY || 0;\n                style.backgroundPosition = -bgX + "px " + -bgY + "px";\n            }\n        }\n        return elem;\n    }\n}();\n\nmodule.exports = DOMRenderer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\nvar Hilo = __webpack_require__(1);\nvar Renderer = __webpack_require__(5);\nvar Matrix = __webpack_require__(7);\n\n/**\n * Heavily inspired by PIXI's SpriteRenderer:\n * https://github.com/pixijs/pixi.js/blob/v3.0.9/src/core/sprites/webgl/SpriteRenderer.js\n */\n\nvar DEG2RAD = Math.PI / 180;\n/**\n * @language=en\n * @class WebGLRenderer The WebGLRenderer, all the visual object is drawing on the canvas using WebGL.The stage will create different renderer depend on the canvas and renderType properties, developer need not use this class directly.\n * @augments Renderer\n * @param {Object} properties The properties to create a renderer, contains all writeable props of this class.\n * @module hilo/renderer/WebGLRenderer\n * @requires hilo/core/Class\n * @requires hilo/core/Hilo\n * @requires hilo/renderer/Renderer\n * @requires  hilo/geom/Matrix\n * @property {WebGLRenderingContext} gl The WebGL context of the renderer, readonly.\n */\nvar WebGLRenderer = Class.create( /** @lends WebGLRenderer.prototype */{\n    Extends: Renderer,\n    Statics: /** @lends WebGLRenderer */{\n        /**\n         * @language=en\n         * The max num of batch draw, default is 2000.\n         * @type {Number}\n         */\n        MAX_BATCH_NUM: 2000,\n        /**\n         * @language=en\n         * The num of vertex attributes, readonly.\n         * @type {Number}\n         */\n        ATTRIBUTE_NUM: 5,\n        /**\n         * @language=en\n         * is WebGL supported, readonly.\n         * @type {Boolean}\n         */\n        isSupport: function isSupport() {\n            if (this._isSupported == undefined) {\n                var canvas = document.createElement('canvas');\n                if (canvas.getContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))) {\n                    this._isSupported = true;\n                } else {\n                    this._isSupported = false;\n                }\n            }\n            return this._isSupported;\n        }\n    },\n    renderType: 'webgl',\n    gl: null,\n    _isContextLost: false,\n    _cacheTexture: {},\n    constructor: function constructor(properties) {\n        WebGLRenderer.superclass.constructor.call(this, properties);\n        var that = this;\n        this.gl = this.canvas.getContext(\"webgl\") || this.canvas.getContext('experimental-webgl');\n\n        this.maxBatchNum = WebGLRenderer.MAX_BATCH_NUM;\n        this.positionStride = WebGLRenderer.ATTRIBUTE_NUM * 4;\n        var vertexNum = this.maxBatchNum * WebGLRenderer.ATTRIBUTE_NUM * 4;\n        var indexNum = this.maxBatchNum * 6;\n        this.arrayBuffer = new ArrayBuffer(vertexNum * 4);\n        this.float32Array = new Float32Array(this.arrayBuffer);\n        this.uint32Array = new Uint32Array(this.arrayBuffer);\n        this.indexs = new Uint16Array(indexNum);\n        for (var i = 0, j = 0; i < indexNum; i += 6, j += 4) {\n            this.indexs[i + 0] = j + 0;\n            this.indexs[i + 1] = j + 1;\n            this.indexs[i + 2] = j + 2;\n            this.indexs[i + 3] = j + 1;\n            this.indexs[i + 4] = j + 2;\n            this.indexs[i + 5] = j + 3;\n        }\n        this.batchIndex = 0;\n        this.sprites = [];\n\n        this.canvas.addEventListener('webglcontextlost', function (e) {\n            that._isContextLost = true;\n            e.preventDefault();\n        }, false);\n\n        this.canvas.addEventListener('webglcontextrestored', function (e) {\n            that._isContextLost = false;\n            that.setupWebGLStateAndResource();\n        }, false);\n\n        this.setupWebGLStateAndResource();\n    },\n    setupWebGLStateAndResource: function setupWebGLStateAndResource() {\n        var gl = this.gl;\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.clearColor(0, 0, 0, 0);\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.enable(gl.BLEND);\n\n        this._cacheTexture = {};\n        this._initShaders();\n        this.defaultShader.active();\n\n        this.positionBuffer = gl.createBuffer();\n        this.indexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indexs, gl.STATIC_DRAW);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.arrayBuffer, gl.DYNAMIC_DRAW);\n\n        gl.vertexAttribPointer(this.a_position, 2, gl.FLOAT, false, this.positionStride, 0); //x, y\n        gl.vertexAttribPointer(this.a_TexCoord, 2, gl.FLOAT, false, this.positionStride, 2 * 4); //x, y\n        gl.vertexAttribPointer(this.a_tint, 4, gl.UNSIGNED_BYTE, true, this.positionStride, 4 * 4); //alpha\n    },\n\n    context: null,\n\n    /**\n     * @private\n     * @see Renderer#startDraw\n     */\n    startDraw: function startDraw(target) {\n        if (target.visible && target.alpha > 0) {\n            if (target === this.stage) {\n                this.clear();\n            }\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @private\n     * @see Renderer#draw\n     */\n    draw: function draw(target) {\n        var w = target.width,\n            h = target.height;\n\n        //TODO:draw background\n        var bg = target.background; // jshint ignore:line\n\n        //draw image\n        var drawable = target.drawable,\n            image = drawable && drawable.image;\n        if (image) {\n            var rect = drawable.rect,\n                sw = rect[2],\n                sh = rect[3];\n            if (!w && !h) {\n                //fix width/height TODO: how to get rid of this?\n                w = target.width = sw;\n                h = target.height = sh;\n            }\n\n            if (this.batchIndex >= this.maxBatchNum) {\n                this._renderBatches();\n            }\n\n            var vertexs = this._createVertexs(image, rect[0], rect[1], sw, sh, 0, 0, w, h);\n            var index = this.batchIndex * this.positionStride;\n            var float32Array = this.float32Array;\n            var uint32Array = this.uint32Array;\n\n            var tint = (target.tint >> 16) + (target.tint & 0xff00) + ((target.tint & 0xff) << 16) + (target.__webglRenderAlpha * 255 << 24);\n\n            float32Array[index + 0] = vertexs[0]; //x\n            float32Array[index + 1] = vertexs[1]; //y\n            float32Array[index + 2] = vertexs[2]; //uvx\n            float32Array[index + 3] = vertexs[3]; //uvy\n            uint32Array[index + 4] = tint; //tint\n\n            float32Array[index + 5] = vertexs[4];\n            float32Array[index + 6] = vertexs[5];\n            float32Array[index + 7] = vertexs[6];\n            float32Array[index + 8] = vertexs[7];\n            uint32Array[index + 9] = tint;\n\n            float32Array[index + 10] = vertexs[8];\n            float32Array[index + 11] = vertexs[9];\n            float32Array[index + 12] = vertexs[10];\n            float32Array[index + 13] = vertexs[11];\n            uint32Array[index + 14] = tint;\n\n            float32Array[index + 15] = vertexs[12];\n            float32Array[index + 16] = vertexs[13];\n            float32Array[index + 17] = vertexs[14];\n            float32Array[index + 18] = vertexs[15];\n            uint32Array[index + 19] = tint;\n\n            var matrix = target.__webglWorldMatrix;\n            for (var i = 0; i < 4; i++) {\n                var x = float32Array[index + i * 5];\n                var y = float32Array[index + i * 5 + 1];\n\n                float32Array[index + i * 5] = matrix.a * x + matrix.c * y + matrix.tx;\n                float32Array[index + i * 5 + 1] = matrix.b * x + matrix.d * y + matrix.ty;\n            }\n\n            target.__textureImage = image;\n            this.sprites[this.batchIndex++] = target;\n        }\n    },\n\n    /**\n     * @private\n     * @see Renderer#endDraw\n     */\n    endDraw: function endDraw(target) {\n        if (target === this.stage) {\n            this._renderBatches();\n        }\n    },\n    /**\n     * @private\n     * @see Renderer#transform\n     */\n    transform: function transform(target) {\n        var drawable = target.drawable;\n        if (drawable && drawable.domElement) {\n            Hilo.setElementStyleByView(target);\n            return;\n        }\n\n        var scaleX = target.scaleX,\n            scaleY = target.scaleY;\n\n        if (target === this.stage) {\n            var style = this.canvas.style,\n                oldScaleX = target._scaleX,\n                oldScaleY = target._scaleY,\n                isStyleChange = false;\n\n            if (!oldScaleX && scaleX != 1 || oldScaleX && oldScaleX != scaleX) {\n                target._scaleX = scaleX;\n                style.width = scaleX * target.width + \"px\";\n                isStyleChange = true;\n            }\n            if (!oldScaleY && scaleY != 1 || oldScaleY && oldScaleY != scaleY) {\n                target._scaleY = scaleY;\n                style.height = scaleY * target.height + \"px\";\n                isStyleChange = true;\n            }\n            if (isStyleChange) {\n                target.updateViewport();\n            }\n            target.__webglWorldMatrix = target.__webglWorldMatrix || new Matrix(1, 0, 0, 1, 0, 0);\n        } else if (target.parent) {\n            target.__webglWorldMatrix = target.__webglWorldMatrix || new Matrix(1, 0, 0, 1, 0, 0);\n            this._setConcatenatedMatrix(target, target.parent);\n        }\n\n        if (target.alpha > 0) {\n            if (target.parent && target.parent.__webglRenderAlpha) {\n                target.__webglRenderAlpha = target.alpha * target.parent.__webglRenderAlpha;\n            } else {\n                target.__webglRenderAlpha = target.alpha;\n            }\n        }\n    },\n\n    /**\n     * @private\n     * @see Renderer#remove\n     */\n    remove: function remove(target) {\n        var drawable = target.drawable;\n        var elem = drawable && drawable.domElement;\n\n        if (elem) {\n            var parentElem = elem.parentNode;\n            if (parentElem) {\n                parentElem.removeChild(elem);\n            }\n        }\n    },\n\n    /**\n     * @private\n     * @see Renderer#clear\n     */\n    clear: function clear(x, y, width, height) {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    },\n\n    /**\n     * @private\n     * @see Renderer#resize\n     */\n    resize: function resize(width, height) {\n        if (this.width !== width || this.height !== height) {\n            var canvas = this.canvas;\n            var stage = this.stage;\n            var style = canvas.style;\n\n            this.width = canvas.width = width;\n            this.height = canvas.height = height;\n\n            style.width = stage.width * stage.scaleX + 'px';\n            style.height = stage.height * stage.scaleY + 'px';\n\n            this.gl.viewport(0, 0, width, height);\n\n            this.canvasHalfWidth = width * .5;\n            this.canvasHalfHeight = height * .5;\n\n            this._uploadProjectionTransform(true);\n        }\n    },\n    _renderBatches: function _renderBatches() {\n        var gl = this.gl;\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.uint32Array.subarray(0, this.batchIndex * this.positionStride));\n        var startIndex = 0;\n        var batchNum = 0;\n        var preTextureImage = null;\n        for (var i = 0; i < this.batchIndex; i++) {\n            var sprite = this.sprites[i];\n            if (preTextureImage && preTextureImage !== sprite.__textureImage) {\n                this._renderBatch(startIndex, i);\n                startIndex = i;\n                batchNum = 1;\n            }\n            preTextureImage = sprite.__textureImage;\n        }\n        this._renderBatch(startIndex, this.batchIndex);\n        this.batchIndex = 0;\n    },\n    _renderBatch: function _renderBatch(start, end) {\n        var gl = this.gl;\n        var num = end - start;\n        if (num > 0) {\n            gl.bindTexture(gl.TEXTURE_2D, this._getTexture(this.sprites[start]));\n            gl.drawElements(gl.TRIANGLES, num * 6, gl.UNSIGNED_SHORT, start * 6 * 2);\n        }\n    },\n    _uploadProjectionTransform: function _uploadProjectionTransform(force) {\n        if (!this._projectionTransformElements || force) {\n            this._projectionTransformElements = new Float32Array([1 / this.canvasHalfWidth, 0, 0, 0, -1 / this.canvasHalfHeight, 0, -1, 1, 1]);\n        }\n\n        this.gl.uniformMatrix3fv(this.u_projectionTransform, false, this._projectionTransformElements);\n    },\n    _initShaders: function _initShaders() {\n        var VSHADER_SOURCE = '\\\n            attribute vec2 a_position;\\n\\\n            attribute vec2 a_TexCoord;\\n\\\n            attribute vec4 a_tint;\\n\\\n            uniform mat3 u_projectionTransform;\\n\\\n            varying vec2 v_TexCoord;\\n\\\n            varying vec4 v_tint;\\n\\\n            void main(){\\n\\\n                gl_Position =  vec4((u_projectionTransform * vec3(a_position, 1.0)).xy, 1.0, 1.0);\\n\\\n                v_TexCoord = a_TexCoord;\\n\\\n                v_tint = vec4(a_tint.rgb * a_tint.a, a_tint.a);\\n\\\n            }\\n\\\n        ';\n\n        var FSHADER_SOURCE = '\\n\\\n            precision mediump float;\\n\\\n            uniform sampler2D u_Sampler;\\n\\\n            varying vec2 v_TexCoord;\\n\\\n            varying vec4 v_tint;\\n\\\n            void main(){\\n\\\n                gl_FragColor = texture2D(u_Sampler, v_TexCoord) * v_tint;\\n\\\n            }\\n\\\n        ';\n\n        this.defaultShader = new Shader(this, {\n            v: VSHADER_SOURCE,\n            f: FSHADER_SOURCE\n        }, {\n            attributes: [\"a_position\", \"a_TexCoord\", \"a_tint\"],\n            uniforms: [\"u_projectionTransform\", \"u_Sampler\"]\n        });\n    },\n    _createVertexs: function _createVertexs(img, tx, ty, tw, th, x, y, w, h) {\n        var tempVertexs = this.__tempVertexs || [];\n        var width = img.width;\n        var height = img.height;\n\n        tw = tw / width;\n        th = th / height;\n        tx = tx / width;\n        ty = ty / height;\n\n        w = w;\n        h = h;\n        x = x;\n        y = y;\n\n        if (tw + tx > 1) {\n            tw = 1 - tx;\n        }\n\n        if (th + ty > 1) {\n            th = 1 - ty;\n        }\n\n        var index = 0;\n        tempVertexs[index++] = x;tempVertexs[index++] = y;tempVertexs[index++] = tx;tempVertexs[index++] = ty;\n        tempVertexs[index++] = x + w;tempVertexs[index++] = y;tempVertexs[index++] = tx + tw;tempVertexs[index++] = ty;\n        tempVertexs[index++] = x;tempVertexs[index++] = y + h;tempVertexs[index++] = tx;tempVertexs[index++] = ty + th;\n        tempVertexs[index++] = x + w;tempVertexs[index++] = y + h;tempVertexs[index++] = tx + tw;tempVertexs[index++] = ty + th;\n\n        return tempVertexs;\n    },\n    _setConcatenatedMatrix: function _setConcatenatedMatrix(view, ancestor) {\n        var mtx = view.__webglWorldMatrix;\n        var cos = 1,\n            sin = 0,\n            rotation = view.rotation % 360,\n            pivotX = view.pivotX,\n            pivotY = view.pivotY,\n            scaleX = view.scaleX,\n            scaleY = view.scaleY;\n\n        if (rotation) {\n            var r = rotation * DEG2RAD;\n            cos = Math.cos(r);\n            sin = Math.sin(r);\n        }\n\n        var pos = view.getAlignPosition();\n        mtx.a = cos * scaleX;\n        mtx.b = sin * scaleX;\n        mtx.c = -sin * scaleY;\n        mtx.d = cos * scaleY;\n        mtx.tx = pos.x - mtx.a * pivotX - mtx.c * pivotY;\n        mtx.ty = pos.y - mtx.b * pivotX - mtx.d * pivotY;\n\n        mtx.concat(ancestor.__webglWorldMatrix);\n    },\n    _getTexture: function _getTexture(sprite) {\n        var image = sprite.__textureImage;\n        var texture = this._cacheTexture[image.src];\n        if (!texture) {\n            texture = this.activeShader.uploadTexture(image);\n        }\n        return texture;\n    }\n});\n\n/**\n * @language=en\n * shader\n * @param {WebGLRenderer} renderer [description]\n * @param {Object} source\n * @param {String} source.v 顶点shader\n * @param {String} source.f 片段shader\n * @param {Object} attr\n * @param {Array} attr.attributes attribute数组\n * @param {Array} attr.uniforms uniform数组\n */\nvar Shader = function Shader(renderer, source, attr) {\n    this.renderer = renderer;\n    this.gl = renderer.gl;\n    this.program = this._createProgram(this.gl, source.v, source.f);\n\n    attr = attr || {};\n    this.attributes = attr.attributes || [];\n    this.uniforms = attr.uniforms || [];\n};\n\nShader.prototype = {\n    active: function active() {\n        var that = this;\n        var renderer = that.renderer;\n        var gl = that.gl;\n        var program = that.program;\n\n        if (program && gl) {\n            renderer.activeShader = that;\n            gl.useProgram(program);\n            that.attributes.forEach(function (attribute) {\n                renderer[attribute] = gl.getAttribLocation(program, attribute);\n                gl.enableVertexAttribArray(renderer[attribute]);\n            });\n\n            that.uniforms.forEach(function (uniform) {\n                renderer[uniform] = gl.getUniformLocation(program, uniform);\n            });\n\n            if (that.width !== renderer.width || that.height !== renderer.height) {\n                that.width = renderer.width;\n                that.height = renderer.height;\n                renderer._uploadProjectionTransform();\n            }\n        }\n    },\n    uploadTexture: function uploadTexture(image) {\n        var gl = this.gl;\n        var renderer = this.renderer;\n        var texture = gl.createTexture();\n        var u_Sampler = renderer.u_Sampler;\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.uniform1i(u_Sampler, 0);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        this.renderer._cacheTexture[image.src] = texture;\n        return texture;\n    },\n    _createProgram: function _createProgram(gl, vshader, fshader) {\n        var vertexShader = this._createShader(gl, gl.VERTEX_SHADER, vshader);\n        var fragmentShader = this._createShader(gl, gl.FRAGMENT_SHADER, fshader);\n        if (!vertexShader || !fragmentShader) {\n            return null;\n        }\n\n        var program = gl.createProgram();\n        if (program) {\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n\n            gl.linkProgram(program);\n\n            gl.deleteShader(fragmentShader);\n            gl.deleteShader(vertexShader);\n            var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n            if (!linked) {\n                var error = gl.getProgramInfoLog(program);\n                console.log('Failed to link program: ' + error);\n                gl.deleteProgram(program);\n                return null;\n            }\n        }\n        return program;\n    },\n    _createShader: function _createShader(gl, type, source) {\n        var shader = gl.createShader(type);\n        if (shader) {\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n\n            var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n            if (!compiled) {\n                var error = gl.getShaderInfoLog(shader);\n                console.log('Failed to compile shader: ' + error);\n                gl.deleteShader(shader);\n                return null;\n            }\n        }\n        return shader;\n    }\n};\n\nmodule.exports = WebGLRenderer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\nvar browser = __webpack_require__(3);\n\n/**\n * @language=en\n * @class Ticker is a Timer. It can run the code at specified framerate.\n * @param {Number} fps The fps of ticker.Default is 60.\n * @module hilo/util/Ticker\n * @requires hilo/core/Class\n * @requires hilo/util/browser\n */\nvar Ticker = Class.create( /** @lends Ticker.prototype */{\n    constructor: function constructor(fps) {\n        this._targetFPS = fps || 60;\n        this._interval = 1000 / this._targetFPS;\n        this._tickers = [];\n    },\n\n    _paused: false,\n    _targetFPS: 0,\n    _interval: 0,\n    _intervalId: null,\n    _tickers: null,\n    _lastTime: 0,\n    _tickCount: 0,\n    _tickTime: 0,\n    _measuredFPS: 0,\n\n    /**\n     * @language=en\n     * Start the ticker.\n     * @param {Boolean} userRAF Whether or not use requestAnimationFrame, default is true.\n     */\n    start: function start(useRAF) {\n        if (useRAF === undefined) {\n            useRAF = true;\n        }\n\n        if (this._intervalId) return;\n        this._lastTime = +new Date();\n\n        var self = this,\n            interval = this._interval,\n            raf = window.requestAnimationFrame || window[browser.jsVendor + 'RequestAnimationFrame'];\n\n        var _runLoop2;\n        if (useRAF && raf && interval < 17) {\n            this._useRAF = true;\n            _runLoop2 = function runLoop() {\n                self._intervalId = raf(_runLoop2);\n                self._tick();\n            };\n        } else {\n            _runLoop2 = function _runLoop() {\n                self._intervalId = setTimeout(_runLoop2, interval);\n                self._tick();\n            };\n        }\n\n        this._paused = false;\n        _runLoop2();\n    },\n\n    /**\n     * @language=en\n     * Stop the ticker.\n     */\n    stop: function stop() {\n        if (this._useRAF) {\n            var cancelRAF = window.cancelAnimationFrame || window[browser.jsVendor + 'CancelAnimationFrame'];\n            cancelRAF(this._intervalId);\n        } else {\n            clearTimeout(this._intervalId);\n        }\n        this._intervalId = null;\n        this._lastTime = 0;\n        this._paused = true;\n    },\n\n    /**\n     * @language=en\n     * Pause the ticker.\n     */\n    pause: function pause() {\n        this._paused = true;\n    },\n\n    /**\n     * @language=en\n     * Resume the ticker.\n     */\n    resume: function resume() {\n        this._paused = false;\n    },\n\n    /**\n     * @private\n     */\n    _tick: function _tick() {\n        if (this._paused) return;\n        var startTime = +new Date(),\n            deltaTime = startTime - this._lastTime,\n            tickers = this._tickers;\n\n        //calculates the real fps\n        if (++this._tickCount >= this._targetFPS) {\n            this._measuredFPS = 1000 / (this._tickTime / this._tickCount) + 0.5 >> 0;\n            this._tickCount = 0;\n            this._tickTime = 0;\n        } else {\n            this._tickTime += startTime - this._lastTime;\n        }\n        this._lastTime = startTime;\n\n        var tickersCopy = tickers.slice(0);\n        for (var i = 0, len = tickersCopy.length; i < len; i++) {\n            tickersCopy[i].tick(deltaTime);\n        }\n    },\n\n    /**\n     * @language=en\n     * Get the fps.\n     */\n    getMeasuredFPS: function getMeasuredFPS() {\n        return Math.min(this._measuredFPS, this._targetFPS);\n    },\n\n    /**\n     * @language=en\n     * Add tickObject. The tickObject must implement the tick method.\n     * @param {Object} tickObject The tickObject to add.It must implement the tick method.\n     */\n    addTick: function addTick(tickObject) {\n        if (!tickObject || typeof tickObject.tick != 'function') {\n            throw new Error('Ticker: The tick object must implement the tick method.');\n        }\n        this._tickers.push(tickObject);\n    },\n\n    /**\n     * @language=en\n     * Remove the tickObject\n     * @param {Object} tickObject The tickObject to remove.\n     */\n    removeTick: function removeTick(tickObject) {\n        var tickers = this._tickers,\n            index = tickers.indexOf(tickObject);\n        if (index >= 0) {\n            tickers.splice(index, 1);\n        }\n    },\n    /**\n     * 下次tick时回调\n     * @param  {Function} callback\n     * @return {tickObj}\n     */\n    nextTick: function nextTick(callback) {\n        var that = this;\n        var tickObj = {\n            tick: function tick(dt) {\n                that.removeTick(tickObj);\n                callback();\n            }\n        };\n\n        that.addTick(tickObj);\n        return tickObj;\n    },\n    /**\n     * 延迟指定的时间后调用回调, 类似setTimeout\n     * @param  {Function} callback\n     * @param  {Number}   duration 延迟的毫秒数\n     * @return {tickObj}\n     */\n    timeout: function timeout(callback, duration) {\n        var that = this;\n        var targetTime = new Date().getTime() + duration;\n        var tickObj = {\n            tick: function tick() {\n                var nowTime = new Date().getTime();\n                var dt = nowTime - targetTime;\n                if (dt >= 0) {\n                    that.removeTick(tickObj);\n                    callback();\n                }\n            }\n        };\n        that.addTick(tickObj);\n        return tickObj;\n    },\n    /**\n     * 指定的时间周期来调用函数, 类似setInterval\n     * @param  {Function} callback\n     * @param  {Number}   duration 时间周期，单位毫秒\n     * @return {tickObj}\n     */\n    interval: function interval(callback, duration) {\n        var that = this;\n        var targetTime = new Date().getTime() + duration;\n        var tickObj = {\n            tick: function tick() {\n                var nowTime = new Date().getTime();\n                var dt = nowTime - targetTime;\n                if (dt >= 0) {\n                    if (dt < duration) {\n                        nowTime -= dt;\n                    }\n                    targetTime = nowTime + duration;\n                    callback();\n                }\n            }\n        };\n        that.addTick(tickObj);\n        return tickObj;\n    }\n});\n\nmodule.exports = Ticker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Hilo = __webpack_require__(1);\nvar Class = __webpack_require__(0);\nvar View = __webpack_require__(6);\nvar Drawable = __webpack_require__(8);\n\n/**\n * @language=en\n * <iframe src='../../../examples/Bitmap.html?noHeader' width = '300' height = '200' scrolling='no'></iframe>\n * <br/>\n * Example:\n * <pre>\n * var bmp = new Hilo.Bitmap({image:imgElem, rect:[0, 0, 100, 100]});\n * stage.addChild(bmp);\n * </pre>\n * @class Bitmap\n * @augments View\n * @param {Object} properties the options of create Instance.It can contains all writable property and Moreover：\n * <ul>\n * <li><b>image</b> - the image of bitmap which contained。required。</li>\n * <li><b>rect</b> - the range of bitmap in the image。option</li>\n * </ul>\n * @module hilo/view/Bitmap\n * @requires hilo/core/Hilo\n * @requires hilo/core/Class\n * @requires hilo/view/View\n * @requires hilo/view/Drawable\n */\nvar Bitmap = Class.create( /** @lends Bitmap.prototype */{\n    Extends: View,\n    constructor: function constructor(properties) {\n        properties = properties || {};\n        this.id = this.id || properties.id || Hilo.getUid(\"Bitmap\");\n        Bitmap.superclass.constructor.call(this, properties);\n\n        this.drawable = new Drawable(properties);\n\n        //init width and height\n        if (!this.width || !this.height) {\n            var rect = this.drawable.rect;\n            if (rect) {\n                this.width = rect[2];\n                this.height = rect[3];\n            }\n        }\n    },\n\n    /**\n     * @language=en\n     * set the image。\n     * @param {Image|String} Image Object or URL。\n     * @param {Array} rect the range of bitmap in the image。\n     * @returns {Bitmap} self。\n     */\n    setImage: function setImage(image, rect) {\n        this.drawable.init({ image: image, rect: rect });\n        if (rect) {\n            this.width = rect[2];\n            this.height = rect[3];\n        } else if (!this.width && !this.height) {\n            rect = this.drawable.rect;\n            if (rect) {\n                this.width = rect[2];\n                this.height = rect[3];\n            }\n        }\n        return this;\n    }\n});\n\nmodule.exports = Bitmap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby92aWV3L0JpdG1hcC5qcz80YTYxIl0sIm5hbWVzIjpbIkhpbG8iLCJyZXF1aXJlIiwiQ2xhc3MiLCJWaWV3IiwiRHJhd2FibGUiLCJCaXRtYXAiLCJjcmVhdGUiLCJFeHRlbmRzIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwiaWQiLCJnZXRVaWQiLCJzdXBlcmNsYXNzIiwiY2FsbCIsImRyYXdhYmxlIiwid2lkdGgiLCJoZWlnaHQiLCJyZWN0Iiwic2V0SW1hZ2UiLCJpbWFnZSIsImluaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLENBQVIsQ0FBWDtBQUNBLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDLENBQVIsQ0FBWjtBQUNBLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDLENBQVIsQ0FBWDtBQUNBLElBQUlHLFdBQVdILG1CQUFPQSxDQUFDLENBQVIsQ0FBZjs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQyxJQUFJSSxTQUFTSCxNQUFNSSxNQUFOLEVBQWEsOEJBQThCO0FBQ3JEQyxhQUFTSixJQUQ0QztBQUVyREssaUJBQWEscUJBQVNDLFVBQVQsRUFBb0I7QUFDN0JBLHFCQUFhQSxjQUFjLEVBQTNCO0FBQ0EsYUFBS0MsRUFBTCxHQUFVLEtBQUtBLEVBQUwsSUFBV0QsV0FBV0MsRUFBdEIsSUFBNEJWLEtBQUtXLE1BQUwsQ0FBWSxRQUFaLENBQXRDO0FBQ0FOLGVBQU9PLFVBQVAsQ0FBa0JKLFdBQWxCLENBQThCSyxJQUE5QixDQUFtQyxJQUFuQyxFQUF5Q0osVUFBekM7O0FBRUEsYUFBS0ssUUFBTCxHQUFnQixJQUFJVixRQUFKLENBQWFLLFVBQWIsQ0FBaEI7O0FBRUE7QUFDQSxZQUFHLENBQUMsS0FBS00sS0FBTixJQUFlLENBQUMsS0FBS0MsTUFBeEIsRUFBK0I7QUFDM0IsZ0JBQUlDLE9BQU8sS0FBS0gsUUFBTCxDQUFjRyxJQUF6QjtBQUNBLGdCQUFHQSxJQUFILEVBQVE7QUFDSixxQkFBS0YsS0FBTCxHQUFhRSxLQUFLLENBQUwsQ0FBYjtBQUNBLHFCQUFLRCxNQUFMLEdBQWNDLEtBQUssQ0FBTCxDQUFkO0FBQ0g7QUFDSjtBQUNKLEtBakJvRDs7QUFtQnJEOzs7Ozs7O0FBT0FDLGNBQVUsa0JBQVNDLEtBQVQsRUFBZ0JGLElBQWhCLEVBQXFCO0FBQzNCLGFBQUtILFFBQUwsQ0FBY00sSUFBZCxDQUFtQixFQUFDRCxPQUFNQSxLQUFQLEVBQWNGLE1BQUtBLElBQW5CLEVBQW5CO0FBQ0EsWUFBR0EsSUFBSCxFQUFRO0FBQ0osaUJBQUtGLEtBQUwsR0FBYUUsS0FBSyxDQUFMLENBQWI7QUFDQSxpQkFBS0QsTUFBTCxHQUFjQyxLQUFLLENBQUwsQ0FBZDtBQUNILFNBSEQsTUFJSyxJQUFHLENBQUMsS0FBS0YsS0FBTixJQUFlLENBQUMsS0FBS0MsTUFBeEIsRUFBK0I7QUFDaENDLG1CQUFPLEtBQUtILFFBQUwsQ0FBY0csSUFBckI7QUFDQSxnQkFBR0EsSUFBSCxFQUFRO0FBQ0oscUJBQUtGLEtBQUwsR0FBYUUsS0FBSyxDQUFMLENBQWI7QUFDQSxxQkFBS0QsTUFBTCxHQUFjQyxLQUFLLENBQUwsQ0FBZDtBQUNIO0FBQ0o7QUFDRCxlQUFPLElBQVA7QUFDSDtBQXhDb0QsQ0FBM0MsQ0FBYjs7QUE0Q0RJLE9BQU9DLE9BQVAsR0FBaUJqQixNQUFqQiIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGlsbyAxLjEuMTAgZm9yIGNvbW1vbmpzXG4gKiBDb3B5cmlnaHQgMjAxNiBhbGliYWJhLmNvbVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbnZhciBIaWxvID0gcmVxdWlyZSgnLi4vY29yZS9IaWxvJyk7XG52YXIgQ2xhc3MgPSByZXF1aXJlKCcuLi9jb3JlL0NsYXNzJyk7XG52YXIgVmlldyA9IHJlcXVpcmUoJy4vVmlldycpO1xudmFyIERyYXdhYmxlID0gcmVxdWlyZSgnLi9EcmF3YWJsZScpO1xuXG5cblxuLyoqXG4gKiBAbGFuZ3VhZ2U9ZW5cbiAqIDxpZnJhbWUgc3JjPScuLi8uLi8uLi9leGFtcGxlcy9CaXRtYXAuaHRtbD9ub0hlYWRlcicgd2lkdGggPSAnMzAwJyBoZWlnaHQgPSAnMjAwJyBzY3JvbGxpbmc9J25vJz48L2lmcmFtZT5cbiAqIDxici8+XG4gKiBFeGFtcGxlOlxuICogPHByZT5cbiAqIHZhciBibXAgPSBuZXcgSGlsby5CaXRtYXAoe2ltYWdlOmltZ0VsZW0sIHJlY3Q6WzAsIDAsIDEwMCwgMTAwXX0pO1xuICogc3RhZ2UuYWRkQ2hpbGQoYm1wKTtcbiAqIDwvcHJlPlxuICogQGNsYXNzIEJpdG1hcFxuICogQGF1Z21lbnRzIFZpZXdcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIHRoZSBvcHRpb25zIG9mIGNyZWF0ZSBJbnN0YW5jZS5JdCBjYW4gY29udGFpbnMgYWxsIHdyaXRhYmxlIHByb3BlcnR5IGFuZCBNb3Jlb3Zlcu+8mlxuICogPHVsPlxuICogPGxpPjxiPmltYWdlPC9iPiAtIHRoZSBpbWFnZSBvZiBiaXRtYXAgd2hpY2ggY29udGFpbmVk44CCcmVxdWlyZWTjgII8L2xpPlxuICogPGxpPjxiPnJlY3Q8L2I+IC0gdGhlIHJhbmdlIG9mIGJpdG1hcCBpbiB0aGUgaW1hZ2XjgIJvcHRpb248L2xpPlxuICogPC91bD5cbiAqIEBtb2R1bGUgaGlsby92aWV3L0JpdG1hcFxuICogQHJlcXVpcmVzIGhpbG8vY29yZS9IaWxvXG4gKiBAcmVxdWlyZXMgaGlsby9jb3JlL0NsYXNzXG4gKiBAcmVxdWlyZXMgaGlsby92aWV3L1ZpZXdcbiAqIEByZXF1aXJlcyBoaWxvL3ZpZXcvRHJhd2FibGVcbiAqL1xuIHZhciBCaXRtYXAgPSBDbGFzcy5jcmVhdGUoLyoqIEBsZW5kcyBCaXRtYXAucHJvdG90eXBlICove1xuICAgIEV4dGVuZHM6IFZpZXcsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKHByb3BlcnRpZXMpe1xuICAgICAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCB7fTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuaWQgfHwgcHJvcGVydGllcy5pZCB8fCBIaWxvLmdldFVpZChcIkJpdG1hcFwiKTtcbiAgICAgICAgQml0bWFwLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwcm9wZXJ0aWVzKTtcblxuICAgICAgICB0aGlzLmRyYXdhYmxlID0gbmV3IERyYXdhYmxlKHByb3BlcnRpZXMpO1xuXG4gICAgICAgIC8vaW5pdCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAgIGlmKCF0aGlzLndpZHRoIHx8ICF0aGlzLmhlaWdodCl7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHRoaXMuZHJhd2FibGUucmVjdDtcbiAgICAgICAgICAgIGlmKHJlY3Qpe1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSByZWN0WzJdO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gcmVjdFszXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbGFuZ3VhZ2U9ZW5cbiAgICAgKiBzZXQgdGhlIGltYWdl44CCXG4gICAgICogQHBhcmFtIHtJbWFnZXxTdHJpbmd9IEltYWdlIE9iamVjdCBvciBVUkzjgIJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSByZWN0IHRoZSByYW5nZSBvZiBiaXRtYXAgaW4gdGhlIGltYWdl44CCXG4gICAgICogQHJldHVybnMge0JpdG1hcH0gc2VsZuOAglxuICAgICAqL1xuICAgIHNldEltYWdlOiBmdW5jdGlvbihpbWFnZSwgcmVjdCl7XG4gICAgICAgIHRoaXMuZHJhd2FibGUuaW5pdCh7aW1hZ2U6aW1hZ2UsIHJlY3Q6cmVjdH0pO1xuICAgICAgICBpZihyZWN0KXtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSByZWN0WzJdO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSByZWN0WzNdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoIXRoaXMud2lkdGggJiYgIXRoaXMuaGVpZ2h0KXtcbiAgICAgICAgICAgIHJlY3QgPSB0aGlzLmRyYXdhYmxlLnJlY3Q7XG4gICAgICAgICAgICBpZihyZWN0KXtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gcmVjdFsyXTtcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IHJlY3RbM107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuIH0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQml0bWFwOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar LoadQueue = __webpack_require__(20);\nvar mediator = __webpack_require__(9);\n\n/**\n * @module runman/resource\n * @requires hilo/loader/LoadQueue\n * @requires runman/mediator\n */\nvar resource = {\n    loadedRes: {},\n    res: [{ id: 'fish', src: '../../images/fish.png' }, { id: 'bg', src: '../../images/bg.png' }],\n    load: function load() {\n        var res = this.res;\n        var loadedRes = this.loadedRes;\n\n        var queue = this.queue = new LoadQueue();\n        queue.add(res);\n\n        queue.on(\"complete\", function () {\n            var imgs = [];\n            for (var i = 0; i < res.length; i++) {\n                var id = res[i].id;\n                loadedRes[id] = queue.getContent(id);\n            }\n            mediator.fire(\"resource:complete\");\n        });\n\n        queue.on(\"load\", function (d) {\n            mediator.fire(\"resource:loaded\", {\n                num: queue._loaded / (queue._source.length + 1)\n            });\n        });\n\n        queue.start();\n    },\n    get: function get(id) {\n        return this.loadedRes[id];\n    }\n};\n\nmodule.exports = resource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcnVubWFuL3Jlc291cmNlLmpzPzE2MjIiXSwibmFtZXMiOlsiTG9hZFF1ZXVlIiwicmVxdWlyZSIsIm1lZGlhdG9yIiwicmVzb3VyY2UiLCJsb2FkZWRSZXMiLCJyZXMiLCJpZCIsInNyYyIsImxvYWQiLCJxdWV1ZSIsImFkZCIsIm9uIiwiaW1ncyIsImkiLCJsZW5ndGgiLCJnZXRDb250ZW50IiwiZmlyZSIsImQiLCJudW0iLCJfbG9hZGVkIiwiX3NvdXJjZSIsInN0YXJ0IiwiZ2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxFQUFSLENBQWhCO0FBQ0EsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUMsQ0FBUixDQUFmOztBQUVBOzs7OztBQUtBLElBQUlFLFdBQVc7QUFDWEMsZUFBVSxFQURDO0FBRVhDLFNBQUksQ0FDQSxFQUFDQyxJQUFHLE1BQUosRUFBWUMsS0FBSSx1QkFBaEIsRUFEQSxFQUVBLEVBQUNELElBQUcsSUFBSixFQUFVQyxLQUFJLHFCQUFkLEVBRkEsQ0FGTztBQU1YQyxVQUFLLGdCQUFVO0FBQ1gsWUFBSUgsTUFBTSxLQUFLQSxHQUFmO0FBQ0EsWUFBSUQsWUFBWSxLQUFLQSxTQUFyQjs7QUFFQSxZQUFJSyxRQUFRLEtBQUtBLEtBQUwsR0FBYSxJQUFJVCxTQUFKLEVBQXpCO0FBQ0FTLGNBQU1DLEdBQU4sQ0FBVUwsR0FBVjs7QUFFQUksY0FBTUUsRUFBTixDQUFTLFVBQVQsRUFBcUIsWUFBVTtBQUMzQixnQkFBSUMsT0FBTyxFQUFYO0FBQ0EsaUJBQUksSUFBSUMsSUFBSSxDQUFaLEVBQWNBLElBQUlSLElBQUlTLE1BQXRCLEVBQTZCRCxHQUE3QixFQUFrQztBQUM5QixvQkFBSVAsS0FBS0QsSUFBSVEsQ0FBSixFQUFPUCxFQUFoQjtBQUNBRiwwQkFBVUUsRUFBVixJQUFnQkcsTUFBTU0sVUFBTixDQUFpQlQsRUFBakIsQ0FBaEI7QUFDSDtBQUNESixxQkFBU2MsSUFBVCxDQUFjLG1CQUFkO0FBQ0gsU0FQRDs7QUFTQVAsY0FBTUUsRUFBTixDQUFTLE1BQVQsRUFBaUIsVUFBU00sQ0FBVCxFQUFXO0FBQ3hCZixxQkFBU2MsSUFBVCxDQUFjLGlCQUFkLEVBQWlDO0FBQzdCRSxxQkFBSVQsTUFBTVUsT0FBTixJQUFlVixNQUFNVyxPQUFOLENBQWNOLE1BQWQsR0FBdUIsQ0FBdEM7QUFEeUIsYUFBakM7QUFHSCxTQUpEOztBQU1BTCxjQUFNWSxLQUFOO0FBQ0gsS0E3QlU7QUE4QlhDLFNBQUksYUFBU2hCLEVBQVQsRUFBWTtBQUNaLGVBQU8sS0FBS0YsU0FBTCxDQUFlRSxFQUFmLENBQVA7QUFDSDtBQWhDVSxDQUFmOztBQW1DQWlCLE9BQU9DLE9BQVAsR0FBaUJyQixRQUFqQiIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBMb2FkUXVldWUgPSByZXF1aXJlKCcuLi9oaWxvL2xvYWRlci9Mb2FkUXVldWUnKTtcbnZhciBtZWRpYXRvciA9IHJlcXVpcmUoJy4vbWVkaWF0b3InKTtcblxuLyoqXG4gKiBAbW9kdWxlIHJ1bm1hbi9yZXNvdXJjZVxuICogQHJlcXVpcmVzIGhpbG8vbG9hZGVyL0xvYWRRdWV1ZVxuICogQHJlcXVpcmVzIHJ1bm1hbi9tZWRpYXRvclxuICovXG52YXIgcmVzb3VyY2UgPSB7XG4gICAgbG9hZGVkUmVzOnt9LFxuICAgIHJlczpbXG4gICAgICAgIHtpZDonZmlzaCcsIHNyYzonLi4vLi4vaW1hZ2VzL2Zpc2gucG5nJ30sXG4gICAgICAgIHtpZDonYmcnLCBzcmM6Jy4uLy4uL2ltYWdlcy9iZy5wbmcnfVxuICAgIF0sXG4gICAgbG9hZDpmdW5jdGlvbigpe1xuICAgICAgICB2YXIgcmVzID0gdGhpcy5yZXM7XG4gICAgICAgIHZhciBsb2FkZWRSZXMgPSB0aGlzLmxvYWRlZFJlcztcblxuICAgICAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlID0gbmV3IExvYWRRdWV1ZTtcbiAgICAgICAgcXVldWUuYWRkKHJlcyk7XG5cbiAgICAgICAgcXVldWUub24oXCJjb21wbGV0ZVwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIGltZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7aSA8IHJlcy5sZW5ndGg7aSArKyl7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gcmVzW2ldLmlkO1xuICAgICAgICAgICAgICAgIGxvYWRlZFJlc1tpZF0gPSBxdWV1ZS5nZXRDb250ZW50KGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lZGlhdG9yLmZpcmUoXCJyZXNvdXJjZTpjb21wbGV0ZVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcXVldWUub24oXCJsb2FkXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgbWVkaWF0b3IuZmlyZShcInJlc291cmNlOmxvYWRlZFwiLCB7XG4gICAgICAgICAgICAgICAgbnVtOnF1ZXVlLl9sb2FkZWQvKHF1ZXVlLl9zb3VyY2UubGVuZ3RoICsgMSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBxdWV1ZS5zdGFydCgpO1xuICAgIH0sXG4gICAgZ2V0OmZ1bmN0aW9uKGlkKXtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZGVkUmVzW2lkXTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc291cmNlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\nvar EventMixin = __webpack_require__(4);\nvar ImageLoader = __webpack_require__(21);\nvar ScriptLoader = __webpack_require__(22);\n\n//TODO: 超时timeout，失败重连次数maxTries，更多的下载器Loader，队列暂停恢复等。\n\n/**\n * @language=en\n * @class LoadQueue is a queue-like loader.\n * @mixes EventMixin\n * @borrows EventMixin#on as #on\n * @borrows EventMixin#off as #off\n * @borrows EventMixin#fire as #fire\n * @param {Object} source resource that need to be loaded,could be a single object or array resource.\n * @module hilo/loader/LoadQueue\n * @requires hilo/core/Class\n * @requires hilo/event/EventMixin\n * @requires hilo/loader/ImageLoader\n * @requires hilo/loader/ScriptLoader\n * @property {Int} maxConnections the limited concurrent connections. default value  2.\n */\nvar LoadQueue = Class.create( /** @lends LoadQueue.prototype */{\n    Mixes: EventMixin,\n    constructor: function constructor(source) {\n        this._source = [];\n        this.add(source);\n    },\n\n    maxConnections: 2, //TODO: 应该是每个host的最大连接数。\n\n    _source: null,\n    _loaded: 0,\n    _connections: 0,\n    _currentIndex: -1,\n\n    /**\n     * @language=en\n     * Add desired resource,could be a single object or array resource.\n     * @param {Object|Array} source ,a single object or array resource. Each resource contains properties like below:\n     * <ul>\n     * <li><b>id</b> - resource identifier</li>\n     * <li><b>src</b> - resource url</li>\n     * <li><b>type</b> - resource type. By default, we automatically identify resource by file suffix and choose the relevant loader for you</li>\n     * <li><b>loader</b> - specified resource loader. If you specify this,we abandon choosing loader inside</li>\n     * <li><b>noCache</b> - a tag that set on or off to prevent cache,implemented by adding timestamp inside</li>\n     * <li><b>size</b> - predicted resource size, help calculating loading progress</li>\n     * </ul>\n     * @returns {LoadQueue} 下载队列实例本身。\n     */\n    add: function add(source) {\n        var me = this;\n        if (source) {\n            source = source instanceof Array ? source : [source];\n            me._source = me._source.concat(source);\n        }\n        return me;\n    },\n\n    /**\n     * @language=en\n     * get resource object by id or src\n     * @param {String}  specified id or src\n     * @returns {Object} resource object\n     */\n    get: function get(id) {\n        if (id) {\n            var source = this._source;\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (item.id === id || item.src === id) {\n                    return item;\n                }\n            }\n        }\n        return null;\n    },\n\n    /**\n     * @language=en\n     * get resource object content  by id or src\n     * @param {String} specified id or src\n     * @returns {Object} resource object content\n     */\n    getContent: function getContent(id) {\n        var item = this.get(id);\n        return item && item.content;\n    },\n\n    /**\n     * @language=en\n     * start loading\n     * @returns {LoadQueue} the loading instance\n     */\n    start: function start() {\n        var me = this;\n        me._loadNext();\n        return me;\n    },\n\n    /**\n     * @language=en\n     * @private\n     */\n    _loadNext: function _loadNext() {\n        var me = this,\n            source = me._source,\n            len = source.length;\n\n        //all items loaded\n        if (me._loaded >= len) {\n            me.fire('complete');\n            return;\n        }\n\n        if (me._currentIndex < len - 1 && me._connections < me.maxConnections) {\n            var index = ++me._currentIndex;\n            var item = source[index];\n            var loader = me._getLoader(item);\n\n            if (loader) {\n                var onLoad = loader.onLoad,\n                    onError = loader.onError;\n\n                loader.onLoad = function (e) {\n                    loader.onLoad = onLoad;\n                    loader.onError = onError;\n                    var content = onLoad && onLoad.call(loader, e) || e.target;\n                    me._onItemLoad(index, content);\n                };\n                loader.onError = function (e) {\n                    loader.onLoad = onLoad;\n                    loader.onError = onError;\n                    onError && onError.call(loader, e);\n                    me._onItemError(index, e);\n                };\n                me._connections++;\n            }\n\n            me._loadNext();\n            loader && loader.load(item);\n        }\n    },\n\n    /**\n     * @language=en\n     * @private\n     */\n    _getLoader: function _getLoader(item) {\n        var loader = item.loader;\n        if (loader) return loader;\n\n        var type = item.type || getExtension(item.src);\n\n        switch (type) {\n            case 'png':\n            case 'jpg':\n            case 'jpeg':\n            case 'gif':\n            case 'webp':\n                loader = new ImageLoader();\n                break;\n            case 'js':\n            case 'jsonp':\n                loader = new ScriptLoader();\n                break;\n        }\n\n        return loader;\n    },\n\n    /**\n     * @language=en\n     * @private\n     */\n    _onItemLoad: function _onItemLoad(index, content) {\n        var me = this,\n            item = me._source[index];\n        item.loaded = true;\n        item.content = content;\n        me._connections--;\n        me._loaded++;\n        me.fire('load', item);\n        me._loadNext();\n    },\n\n    /**\n     * @language=en\n     * @private\n     */\n    _onItemError: function _onItemError(index, e) {\n        var me = this,\n            item = me._source[index];\n        item.error = e;\n        me._connections--;\n        me._loaded++;\n        me.fire('error', item);\n        me._loadNext();\n    },\n\n    /**\n     * @language=en\n     *  get resource size, loaded or all.\n     * @param {Boolean} identify loaded or all resource. default is false, return all resource size. when set true, return loaded resource size.\n     * @returns {Number} resource size.\n     */\n    getSize: function getSize(loaded) {\n        var size = 0,\n            source = this._source;\n        for (var i = 0; i < source.length; i++) {\n            var item = source[i];\n            size += (loaded ? item.loaded && item.size : item.size) || 0;\n        }\n        return size;\n    },\n\n    /**\n     * @language=en\n     * get loaded resource count\n     * @returns {Uint} loaded resource count\n     */\n    getLoaded: function getLoaded() {\n        return this._loaded;\n    },\n\n    /**\n     * @language=en\n     * get all resource count\n     * @returns {Uint} all resource count\n     */\n    getTotal: function getTotal() {\n        return this._source.length;\n    }\n\n});\n\n/**\n * @language=en\n * @private\n */\nfunction getExtension(src) {\n    var extRegExp = /\\/?[^/]+\\.(\\w+)(\\?\\S+)?$/i,\n        match,\n        extension;\n    if (match = src.match(extRegExp)) {\n        extension = match[1].toLowerCase();\n    }\n    return extension || null;\n}\n\nmodule.exports = LoadQueue;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\n\n/**\n * @language=en\n * @private\n * @class image resources loader.\n * @module hilo/loader/ImageLoader\n * @requires hilo/core/Class\n */\nvar ImageLoader = Class.create({\n    load: function load(data) {\n        var me = this;\n\n        var image = new Image();\n        if (data.crossOrigin) {\n            image.crossOrigin = data.crossOrigin;\n        }\n\n        image.onload = function () {\n            me.onLoad(image);\n        };\n        image.onerror = image.onabort = me.onError.bind(image);\n        image.src = data.src + (data.noCache ? (data.src.indexOf('?') == -1 ? '?' : '&') + 't=' + +new Date() : '');\n    },\n\n    onLoad: function onLoad(image) {\n        image.onload = image.onerror = image.onabort = null;\n        return image;\n    },\n\n    onError: function onError(e) {\n        var image = e.target;\n        image.onload = image.onerror = image.onabort = null;\n        return e;\n    }\n\n});\n\nmodule.exports = ImageLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby9sb2FkZXIvSW1hZ2VMb2FkZXIuanM/NTAwZCJdLCJuYW1lcyI6WyJDbGFzcyIsInJlcXVpcmUiLCJJbWFnZUxvYWRlciIsImNyZWF0ZSIsImxvYWQiLCJkYXRhIiwibWUiLCJpbWFnZSIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJvbmxvYWQiLCJvbkxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9uRXJyb3IiLCJiaW5kIiwic3JjIiwibm9DYWNoZSIsImluZGV4T2YiLCJEYXRlIiwiZSIsInRhcmdldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7O0FBS0EsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUMsQ0FBUixDQUFaOztBQUlBOzs7Ozs7O0FBT0EsSUFBSUMsY0FBY0YsTUFBTUcsTUFBTixDQUFhO0FBQzNCQyxVQUFNLGNBQVNDLElBQVQsRUFBYztBQUNoQixZQUFJQyxLQUFLLElBQVQ7O0FBRUEsWUFBSUMsUUFBUSxJQUFJQyxLQUFKLEVBQVo7QUFDQSxZQUFHSCxLQUFLSSxXQUFSLEVBQW9CO0FBQ2hCRixrQkFBTUUsV0FBTixHQUFvQkosS0FBS0ksV0FBekI7QUFDSDs7QUFFREYsY0FBTUcsTUFBTixHQUFlLFlBQVU7QUFDckJKLGVBQUdLLE1BQUgsQ0FBVUosS0FBVjtBQUNILFNBRkQ7QUFHQUEsY0FBTUssT0FBTixHQUFnQkwsTUFBTU0sT0FBTixHQUFnQlAsR0FBR1EsT0FBSCxDQUFXQyxJQUFYLENBQWdCUixLQUFoQixDQUFoQztBQUNBQSxjQUFNUyxHQUFOLEdBQVlYLEtBQUtXLEdBQUwsSUFBWVgsS0FBS1ksT0FBTCxHQUFlLENBQUNaLEtBQUtXLEdBQUwsQ0FBU0UsT0FBVCxDQUFpQixHQUFqQixLQUF5QixDQUFDLENBQTFCLEdBQThCLEdBQTlCLEdBQW9DLEdBQXJDLElBQTRDLElBQTVDLEdBQW9ELENBQUMsSUFBSUMsSUFBSixFQUFwRSxHQUFrRixFQUE5RixDQUFaO0FBQ0gsS0FkMEI7O0FBZ0IzQlIsWUFBUSxnQkFBU0osS0FBVCxFQUFlO0FBQ25CQSxjQUFNRyxNQUFOLEdBQWVILE1BQU1LLE9BQU4sR0FBZ0JMLE1BQU1NLE9BQU4sR0FBZ0IsSUFBL0M7QUFDQSxlQUFPTixLQUFQO0FBQ0gsS0FuQjBCOztBQXFCM0JPLGFBQVMsaUJBQVNNLENBQVQsRUFBVztBQUNoQixZQUFJYixRQUFRYSxFQUFFQyxNQUFkO0FBQ0FkLGNBQU1HLE1BQU4sR0FBZUgsTUFBTUssT0FBTixHQUFnQkwsTUFBTU0sT0FBTixHQUFnQixJQUEvQztBQUNBLGVBQU9PLENBQVA7QUFDSDs7QUF6QjBCLENBQWIsQ0FBbEI7O0FBNkJBRSxPQUFPQyxPQUFQLEdBQWlCckIsV0FBakIiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhpbG8gMS4xLjEwIGZvciBjb21tb25qc1xuICogQ29weXJpZ2h0IDIwMTYgYWxpYmFiYS5jb21cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG52YXIgQ2xhc3MgPSByZXF1aXJlKCcuLi9jb3JlL0NsYXNzJyk7XG5cblxuXG4vKipcbiAqIEBsYW5ndWFnZT1lblxuICogQHByaXZhdGVcbiAqIEBjbGFzcyBpbWFnZSByZXNvdXJjZXMgbG9hZGVyLlxuICogQG1vZHVsZSBoaWxvL2xvYWRlci9JbWFnZUxvYWRlclxuICogQHJlcXVpcmVzIGhpbG8vY29yZS9DbGFzc1xuICovXG52YXIgSW1hZ2VMb2FkZXIgPSBDbGFzcy5jcmVhdGUoe1xuICAgIGxvYWQ6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpZihkYXRhLmNyb3NzT3JpZ2luKXtcbiAgICAgICAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gZGF0YS5jcm9zc09yaWdpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBtZS5vbkxvYWQoaW1hZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBpbWFnZS5vbmVycm9yID0gaW1hZ2Uub25hYm9ydCA9IG1lLm9uRXJyb3IuYmluZChpbWFnZSk7XG4gICAgICAgIGltYWdlLnNyYyA9IGRhdGEuc3JjICsgKGRhdGEubm9DYWNoZSA/IChkYXRhLnNyYy5pbmRleE9mKCc/JykgPT0gLTEgPyAnPycgOiAnJicpICsgJ3Q9JyArICgrbmV3IERhdGUoKSkgOiAnJyk7XG4gICAgfSxcblxuICAgIG9uTG9hZDogZnVuY3Rpb24oaW1hZ2Upe1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSBpbWFnZS5vbmVycm9yID0gaW1hZ2Uub25hYm9ydCA9IG51bGw7XG4gICAgICAgIHJldHVybiBpbWFnZTtcbiAgICB9LFxuXG4gICAgb25FcnJvcjogZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBpbWFnZSA9IGUudGFyZ2V0O1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSBpbWFnZS5vbmVycm9yID0gaW1hZ2Uub25hYm9ydCA9IG51bGw7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSW1hZ2VMb2FkZXI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Hilo 1.1.10 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Class = __webpack_require__(0);\n\n/**\n * @language=en\n * @private\n * @class javascript or JSONP loader\n * @module hilo/loader/ScriptLoader\n * @requires hilo/core/Class\n */\nvar ScriptLoader = Class.create({\n    load: function load(data) {\n        var me = this,\n            src = data.src,\n            isJSONP = data.type == 'jsonp';\n\n        if (isJSONP) {\n            var callbackName = data.callbackName || 'callback';\n            var callback = data.callback || 'jsonp' + ++ScriptLoader._count;\n            var win = window;\n\n            if (!win[callback]) {\n                win[callback] = function (result) {\n                    delete win[callback];\n                };\n            }\n\n            src += (src.indexOf('?') == -1 ? '?' : '&') + callbackName + '=' + callback;\n        }\n\n        if (data.noCache) src += (src.indexOf('?') == -1 ? '?' : '&') + 't=' + +new Date();\n\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.onload = me.onLoad.bind(me);\n        script.onerror = me.onError.bind(me);\n        script.src = src;\n        if (data.id) script.id = data.id;\n        document.getElementsByTagName('head')[0].appendChild(script);\n    },\n\n    onLoad: function onLoad(e) {\n        var script = e.target;\n        script.onload = script.onerror = null;\n        return script;\n    },\n\n    onError: function onError(e) {\n        var script = e.target;\n        script.onload = script.onerror = null;\n        return e;\n    },\n\n    Statics: {\n        _count: 0\n    }\n\n});\n\nmodule.exports = ScriptLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaGlsby9sb2FkZXIvU2NyaXB0TG9hZGVyLmpzPzQ5OTQiXSwibmFtZXMiOlsiQ2xhc3MiLCJyZXF1aXJlIiwiU2NyaXB0TG9hZGVyIiwiY3JlYXRlIiwibG9hZCIsImRhdGEiLCJtZSIsInNyYyIsImlzSlNPTlAiLCJ0eXBlIiwiY2FsbGJhY2tOYW1lIiwiY2FsbGJhY2siLCJfY291bnQiLCJ3aW4iLCJ3aW5kb3ciLCJyZXN1bHQiLCJpbmRleE9mIiwibm9DYWNoZSIsIkRhdGUiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhc3luYyIsIm9ubG9hZCIsIm9uTG9hZCIsImJpbmQiLCJvbmVycm9yIiwib25FcnJvciIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsImUiLCJ0YXJnZXQiLCJTdGF0aWNzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7QUFLQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQyxDQUFSLENBQVo7O0FBSUE7Ozs7Ozs7QUFPQSxJQUFJQyxlQUFlRixNQUFNRyxNQUFOLENBQWE7QUFDNUJDLFVBQU0sY0FBU0MsSUFBVCxFQUFjO0FBQ2hCLFlBQUlDLEtBQUssSUFBVDtBQUFBLFlBQWVDLE1BQU1GLEtBQUtFLEdBQTFCO0FBQUEsWUFBK0JDLFVBQVVILEtBQUtJLElBQUwsSUFBYSxPQUF0RDs7QUFFQSxZQUFHRCxPQUFILEVBQVc7QUFDUCxnQkFBSUUsZUFBZUwsS0FBS0ssWUFBTCxJQUFxQixVQUF4QztBQUNBLGdCQUFJQyxXQUFXTixLQUFLTSxRQUFMLElBQWlCLFVBQVcsRUFBRVQsYUFBYVUsTUFBMUQ7QUFDQSxnQkFBSUMsTUFBTUMsTUFBVjs7QUFFQSxnQkFBRyxDQUFDRCxJQUFJRixRQUFKLENBQUosRUFBa0I7QUFDZEUsb0JBQUlGLFFBQUosSUFBZ0IsVUFBU0ksTUFBVCxFQUFnQjtBQUM1QiwyQkFBT0YsSUFBSUYsUUFBSixDQUFQO0FBQ0gsaUJBRkQ7QUFHSDs7QUFFREosbUJBQU8sQ0FBQ0EsSUFBSVMsT0FBSixDQUFZLEdBQVosS0FBb0IsQ0FBQyxDQUFyQixHQUF5QixHQUF6QixHQUErQixHQUFoQyxJQUF1Q04sWUFBdkMsR0FBc0QsR0FBdEQsR0FBNERDLFFBQW5FO0FBQ0g7O0FBRUQsWUFBR04sS0FBS1ksT0FBUixFQUFpQlYsT0FBTyxDQUFDQSxJQUFJUyxPQUFKLENBQVksR0FBWixLQUFvQixDQUFDLENBQXJCLEdBQXlCLEdBQXpCLEdBQStCLEdBQWhDLElBQXVDLElBQXZDLEdBQStDLENBQUMsSUFBSUUsSUFBSixFQUF2RDs7QUFFakIsWUFBSUMsU0FBU0MsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFiO0FBQ0FGLGVBQU9WLElBQVAsR0FBYyxpQkFBZDtBQUNBVSxlQUFPRyxLQUFQLEdBQWUsSUFBZjtBQUNBSCxlQUFPSSxNQUFQLEdBQWdCakIsR0FBR2tCLE1BQUgsQ0FBVUMsSUFBVixDQUFlbkIsRUFBZixDQUFoQjtBQUNBYSxlQUFPTyxPQUFQLEdBQWlCcEIsR0FBR3FCLE9BQUgsQ0FBV0YsSUFBWCxDQUFnQm5CLEVBQWhCLENBQWpCO0FBQ0FhLGVBQU9aLEdBQVAsR0FBYUEsR0FBYjtBQUNBLFlBQUdGLEtBQUt1QixFQUFSLEVBQVlULE9BQU9TLEVBQVAsR0FBWXZCLEtBQUt1QixFQUFqQjtBQUNaUixpQkFBU1Msb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsRUFBeUNDLFdBQXpDLENBQXFEWCxNQUFyRDtBQUNILEtBNUIyQjs7QUE4QjVCSyxZQUFRLGdCQUFTTyxDQUFULEVBQVc7QUFDZixZQUFJWixTQUFTWSxFQUFFQyxNQUFmO0FBQ0FiLGVBQU9JLE1BQVAsR0FBZ0JKLE9BQU9PLE9BQVAsR0FBaUIsSUFBakM7QUFDQSxlQUFPUCxNQUFQO0FBQ0gsS0FsQzJCOztBQW9DNUJRLGFBQVMsaUJBQVNJLENBQVQsRUFBVztBQUNoQixZQUFJWixTQUFTWSxFQUFFQyxNQUFmO0FBQ0FiLGVBQU9JLE1BQVAsR0FBZ0JKLE9BQU9PLE9BQVAsR0FBaUIsSUFBakM7QUFDQSxlQUFPSyxDQUFQO0FBQ0gsS0F4QzJCOztBQTBDNUJFLGFBQVM7QUFDTHJCLGdCQUFRO0FBREg7O0FBMUNtQixDQUFiLENBQW5COztBQWdEQXNCLE9BQU9DLE9BQVAsR0FBaUJqQyxZQUFqQiIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGlsbyAxLjEuMTAgZm9yIGNvbW1vbmpzXG4gKiBDb3B5cmlnaHQgMjAxNiBhbGliYWJhLmNvbVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbnZhciBDbGFzcyA9IHJlcXVpcmUoJy4uL2NvcmUvQ2xhc3MnKTtcblxuXG5cbi8qKlxuICogQGxhbmd1YWdlPWVuXG4gKiBAcHJpdmF0ZVxuICogQGNsYXNzIGphdmFzY3JpcHQgb3IgSlNPTlAgbG9hZGVyXG4gKiBAbW9kdWxlIGhpbG8vbG9hZGVyL1NjcmlwdExvYWRlclxuICogQHJlcXVpcmVzIGhpbG8vY29yZS9DbGFzc1xuICovXG52YXIgU2NyaXB0TG9hZGVyID0gQ2xhc3MuY3JlYXRlKHtcbiAgICBsb2FkOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgdmFyIG1lID0gdGhpcywgc3JjID0gZGF0YS5zcmMsIGlzSlNPTlAgPSBkYXRhLnR5cGUgPT0gJ2pzb25wJztcblxuICAgICAgICBpZihpc0pTT05QKXtcbiAgICAgICAgICAgIHZhciBjYWxsYmFja05hbWUgPSBkYXRhLmNhbGxiYWNrTmFtZSB8fCAnY2FsbGJhY2snO1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZGF0YS5jYWxsYmFjayB8fCAnanNvbnAnICsgKCsrU2NyaXB0TG9hZGVyLl9jb3VudCk7XG4gICAgICAgICAgICB2YXIgd2luID0gd2luZG93O1xuXG4gICAgICAgICAgICBpZighd2luW2NhbGxiYWNrXSl7XG4gICAgICAgICAgICAgICAgd2luW2NhbGxiYWNrXSA9IGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB3aW5bY2FsbGJhY2tdO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNyYyArPSAoc3JjLmluZGV4T2YoJz8nKSA9PSAtMSA/ICc/JyA6ICcmJykgKyBjYWxsYmFja05hbWUgKyAnPScgKyBjYWxsYmFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGRhdGEubm9DYWNoZSkgc3JjICs9IChzcmMuaW5kZXhPZignPycpID09IC0xID8gJz8nIDogJyYnKSArICd0PScgKyAoK25ldyBEYXRlKCkpO1xuXG4gICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IG1lLm9uTG9hZC5iaW5kKG1lKTtcbiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSBtZS5vbkVycm9yLmJpbmQobWUpO1xuICAgICAgICBzY3JpcHQuc3JjID0gc3JjO1xuICAgICAgICBpZihkYXRhLmlkKSBzY3JpcHQuaWQgPSBkYXRhLmlkO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfSxcblxuICAgIG9uTG9hZDogZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBzY3JpcHQgPSBlLnRhcmdldDtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHNjcmlwdDtcbiAgICB9LFxuXG4gICAgb25FcnJvcjogZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBzY3JpcHQgPSBlLnRhcmdldDtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfSxcblxuICAgIFN0YXRpY3M6IHtcbiAgICAgICAgX2NvdW50OiAwXG4gICAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY3JpcHRMb2FkZXI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * @module runman/loading\n*/\nvar loading = {\n    elem: document.getElementById('loading'),\n    start: function start() {\n        this.elem.style.display = \"block\";\n        this.loaded(0);\n    },\n    loaded: function loaded(num) {\n        this.elem.innerHTML = 'loading... ' + (num * 100).toFixed(2) + '%';\n    },\n    end: function end() {\n        this.elem.parentNode.removeChild(this.elem);\n    }\n};\n\nmodule.exports = loading;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcnVubWFuL2xvYWRpbmcuanM/MWRmZCJdLCJuYW1lcyI6WyJsb2FkaW5nIiwiZWxlbSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdGFydCIsInN0eWxlIiwiZGlzcGxheSIsImxvYWRlZCIsIm51bSIsImlubmVySFRNTCIsInRvRml4ZWQiLCJlbmQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7QUFHQSxJQUFJQSxVQUFVO0FBQ1ZDLFVBQUtDLFNBQVNDLGNBQVQsQ0FBd0IsU0FBeEIsQ0FESztBQUVWQyxXQUFNLGlCQUFVO0FBQ1osYUFBS0gsSUFBTCxDQUFVSSxLQUFWLENBQWdCQyxPQUFoQixHQUEwQixPQUExQjtBQUNBLGFBQUtDLE1BQUwsQ0FBWSxDQUFaO0FBQ0gsS0FMUztBQU1WQSxZQUFPLGdCQUFTQyxHQUFULEVBQWE7QUFDaEIsYUFBS1AsSUFBTCxDQUFVUSxTQUFWLEdBQXNCLGdCQUFnQixDQUFDRCxNQUFNLEdBQVAsRUFBWUUsT0FBWixDQUFvQixDQUFwQixDQUFoQixHQUF5QyxHQUEvRDtBQUNILEtBUlM7QUFTVkMsU0FBSSxlQUFVO0FBQ1YsYUFBS1YsSUFBTCxDQUFVVyxVQUFWLENBQXFCQyxXQUFyQixDQUFpQyxLQUFLWixJQUF0QztBQUNIO0FBWFMsQ0FBZDs7QUFlQWEsT0FBT0MsT0FBUCxHQUFpQmYsT0FBakIiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgcnVubWFuL2xvYWRpbmdcbiovXG52YXIgbG9hZGluZyA9IHtcbiAgICBlbGVtOmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nJyksXG4gICAgc3RhcnQ6ZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5lbGVtLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIHRoaXMubG9hZGVkKDApO1xuICAgIH0sXG4gICAgbG9hZGVkOmZ1bmN0aW9uKG51bSl7XG4gICAgICAgIHRoaXMuZWxlbS5pbm5lckhUTUwgPSAnbG9hZGluZy4uLiAnICsgKG51bSAqIDEwMCkudG9GaXhlZCgyKSArICclJztcbiAgICB9LFxuICAgIGVuZDpmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW0pO1xuICAgIH1cbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBsb2FkaW5nOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n")}]);